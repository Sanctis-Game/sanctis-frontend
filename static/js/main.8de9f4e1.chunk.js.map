{"version":3,"sources":["components/Sidebar/Item.tsx","components/Sidebar/items.ts","assets/black-hole-space-svgrepo-com.png","components/Sidebar/Content.tsx","utils/index.ts","components/ConfirmationModal/index.tsx","contexts/ConfirmationModal.tsx","hooks/useConfirmationModal.tsx","constants/index.ts","assets/electric.svg","assets/metal-bar.svg","assets/ore.svg","assets/topaz.svg","hooks/useLocalStorage.ts","contexts/ChainPicker.tsx","hooks/useChainPicker.tsx","hooks/useApprovedObjects.tsx","contexts/Sanctis/index.tsx","hooks/useSanctis.tsx","assets/character.svg","components/Sidebar/CommanderBadge.tsx","components/Sidebar/ColorModeSwitcher.tsx","components/Sidebar/NetworkPicker.tsx","components/Sidebar/Mobile.tsx","components/Sidebar/index.ts","components/Sidebar/Sidebar.tsx","views/Home/Home.tsx","hooks/usePlanet.ts","contexts/Sanctis/types.ts","components/ResourceBadge.tsx","contexts/DocumentationButton.tsx","views/Planet/ReservesSection.tsx","hooks/useInfrastructure.tsx","views/Planet/infrastructures/CreateInfrastructureCard.tsx","hooks/usePowerPlant.tsx","views/Planet/infrastructures/PowerPlantCard.tsx","hooks/useResourceProducer.tsx","views/Planet/infrastructures/ResourceProducerCard.tsx","assets/chest.svg","assets/gladius.svg","assets/shield.svg","assets/speedometer.svg","components/ShipStatBadge.tsx","hooks/useShip.tsx","hooks/useSpatioport.tsx","views/Planet/infrastructures/SpatioportCard.tsx","views/Planet/InfrastructuresSection.tsx","hooks/useFleets.tsx","views/Planet/fleets/AddToFleetItem.tsx","views/Planet/fleets/LoadResourceItem.tsx","views/Planet/fleets/RemoveFromFleetItem.tsx","views/Planet/fleets/UnloadResourceItem copy.tsx","views/Planet/fleets/FleetCard.tsx","views/Planet/FleetsSection.tsx","views/Planet/Planet.tsx","views/Commanders/CommanderCard.tsx","views/Commanders/CreateCommanderCard.tsx","views/Commanders/Commanders.tsx","hooks/useApproval.ts","views/Commander/ColonizeCard.tsx","views/Commander/PlanetCard.tsx","views/Commander/Commander.tsx","hooks/useCommander.ts","views/Documentation.tsx","views/Planets.tsx","views/Fleets.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavItem","icon","url","children","rest","href","style","textDecoration","_focus","boxShadow","align","p","mx","borderRadius","role","cursor","_hover","bg","color","mr","fontSize","_groupHover","as","LinkItems","name","FiHome","FiTrendingUp","FiCompass","SiStarship","FiBook","SidebarContent","onClose","transition","useColorModeValue","borderRight","borderRightColor","w","base","md","pos","h","alignItems","justifyContent","src","logo","rounded","maxW","fontFamily","fontWeight","display","onClick","map","link","planetIdToCoordinate","planetId","num","BigNumber","from","bits80","x","and","y","shr","z","ConfirmationModal","isOpen","spacing","my","size","thickness","ConfirmationModalContext","createContext","confirming","open","Promise","ChainPickerProvider","useDisclosure","onOpen","onCloseModal","useCallback","action","a","Provider","value","useConfirmationModal","useContext","supportedNetworks","rpcUrl","chainId","deployedAddresses","sanctis","credits","parliament","commanders","planets","fleets","humans","energy","iron","deuterium","silicon","ironMines","siliconFurnaces","heavyWaterPlants","solarPanels","fusionReactors","spatioports","transporters","scouts","destroyers","plundering","resourceWrapper","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setValue","valueToStore","Function","setItem","stringify","useEffect","ChainPickerContext","setNetwork","network","useChainPicker","useApprovedObjects","races","address","resources","metalBar","ore","infrastructures","description","ships","SanctisContext","setCurrentCommander","commander","fetchCommander","fetchPlanet","createCommander","colonizePlanet","SanctisProvider","toast","useToast","approvedObjects","useWallet","ethereum","account","contracts","useMemo","SanctisInterface","utils","Interface","SanctisABI","abi","CommandersInterface","CommandersABI","CreditsInterface","CreditsABI","PlanetsInterface","PlanetsABI","ResourceInterface","ResourceABI","PowerPlantsInterface","PowerPlantsABI","ResourceProducerInterface","ResourceProducerABI","ShipInterface","ShipABI","signer","providers","Web3Provider","getSigner","Contract","ownedCredits","setOwnedCredits","ownedCommanders","setOwnedCommanders","setCommanders","undefined","memorizedCommander","setMemorizedCommander","owner","setOwner","currentCommander","setCurrentCommanderState","setPlanets","colonizationCost","setColonizationCost","includes","fetchColonizationCost","fetchOwnedCredits","Number","ethers","balanceOf","formatEther","commanderId","race","empireSize","toNumber","all","Array","fill","_","i","commanderPlanetByIndex","toString","commanderPlanets","id","find","e","old","fetchOwnedCommanders","commandersBalance","length","tokenOfOwnerByIndex","filter","Boolean","planet","status","ruler","humidity","resource","contract","reserve","amount","reserves","infrastructure","InfrastructureInterface","InfrastructureABI","level","create","result","wait","title","message","shl","add","colonize","useSanctis","CommanderBadge","setAutoconnect","reset","handleReset","Date","now","py","commanderIcon","ml","substring","numeral","format","borderColor","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","variant","marginLeft","NetworkPicker","MenuButton","validConnectors","MobileNav","connect","openModal","autoconnect","connector","setConnector","handleChooseWallet","handleConnect","px","height","borderBottomWidth","borderBottomColor","leftIcon","Object","values","isFullWidth","Sidebar","minH","autoFocus","placement","returnFocusOnClose","onOverlayClick","Commanders","useCommanders","background","textAlign","Link","usePlanet","setPlanet","fetch","FleetStatus","PlanetStatus","ResourceBadge","bgColor","iconSize","width","content","shadow","direction","maxH","minW","label","DocumentationButton","target","ReservesSection","m","margin","mb","useInfrastructure","loadedInfrastructure","setLoadedInfrastructure","isFetching","setIsFetching","costs","costsResources","nextCosts","nextUpgrade","getAddress","upgrade","CreateInfrastuctureCard","choices","choice","setChoice","handleSelect","handleCreate","onChange","mt","colorScheme","usePowerPlant","baseInfra","loadedPlant","setLoadedPlant","PowerPlantInterface","PowerPlantABI","currentProduction","nextProduction","powerPlant","PowerPlantCard","getBlockNumber","justify","cost","disabled","useResourceProducer","loadedProducer","setLoadedProducer","lastHarvest","producedResources","productionPerBlock","harvest","data","producer","ResourceProducerCard","prod","mul","Math","max","ShipStatBadge","type","speed","offense","defense","capacity","stroke","useShip","ship","loadedShip","setLoadedShip","unitCosts","offensivePower","defensivePower","useSpatioport","spatioport","setSpatioport","SpatioportInterface","SpatioportABI","currentDiscount","nextDiscount","discountFactor","build","quantity","SpatioportCard","setQuantity","placeholder","InfrastructuresSection","infrastructureCards","card","resourceProducers","powerPlants","useFleets","approvedShips","approvedResources","setFleets","FleetInterface","FleetsABI","fleetId","fleet","fromPlanetId","toPlanetId","totalSpeed","totalOffensivePower","totalDefensivePower","arrivalBlock","fromPlanet","toPlanet","fleetStatus","Preparing","Orbitting","Travelling","shipsInFleet","resourcesInFleet","push","fetchPlanetFleets","fleetsOnPlanet","fleetOnPlanetByIndex","createFleet","move","to","moveFleet","addToFleet","removeFromFleet","putInOrbit","land","loadResource","load","unloadResource","unload","AddToFleetItem","min","LoadResourceItem","gt","RemoveFromFleetItem","UnloadResourceItem","FleetCard","allowMultiple","allowToggle","border","FleetsSection","Planet","useParams","sections","rightIcon","CommanderCard","alignContent","BiPlanet","emptyColor","CreateCommanderCard","setName","setRace","handleName","match","useApproval","tokenAddress","spenderAddress","ERC20Interface","ERC20ABI","allowance","setAllowance","isApproving","setIsApproving","isApproved","setIsApproved","handleApprove","approve","pow","sub","fetchAllowance","onApprove","ColonizeCard","colonizer","setX","setY","setZ","div","isLoading","PlanetCard","Commander","setCommander","useCommander","Documentation","Planets","Fleets","WalletProvider","Providers","ChainPicker","App","path","element","Home","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8de9f4e1.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Flex,\n  Icon,\n  Link,\n  FlexProps,\n} from '@chakra-ui/react'\nimport { IconType } from 'react-icons';\nimport { ReactText } from 'react';\n\ninterface NavItemProps extends FlexProps {\n  icon: IconType;\n  url: string;\n  children: ReactText;\n}\nexport const NavItem = ({ icon, url, children, ...rest }: NavItemProps) => {\n  return (\n    <Link href={`#${url}`} style={{ textDecoration: 'none' }} _focus={{ boxShadow: 'none' }}>\n      <Flex\n        align=\"center\"\n        p=\"4\"\n        mx=\"4\"\n        borderRadius=\"lg\"\n        role=\"group\"\n        cursor=\"pointer\"\n        _hover={{\n          bg: 'cyan.400',\n          color: 'white',\n        }}\n        {...rest}>\n        {icon && (\n          <Icon\n            mr=\"4\"\n            fontSize=\"16\"\n            _groupHover={{\n              color: 'white',\n            }}\n            as={icon}\n          />\n        )}\n        {children}\n      </Flex>\n    </Link>\n  );\n};","import { IconType } from \"react-icons\";\nimport { FiCompass, FiHome, FiTrendingUp, FiBook } from \"react-icons/fi\";\nimport { SiStarship } from \"react-icons/si\";\n\ninterface LinkItemProps {\n  name: string;\n  icon: IconType;\n  url: string;\n}\nexport const LinkItems: Array<LinkItemProps> = [\n  { name: \"Home\", icon: FiHome, url: \"/\" },\n  { name: \"Commanders\", icon: FiTrendingUp, url: \"/commanders\" },\n  { name: \"Planets\", icon: FiCompass, url: \"/planets\" },\n  { name: \"Fleets\", icon: SiStarship, url: \"/fleets\" },\n  { name: \"Documentation\", icon: FiBook, url: \"/documentation\" },\n];\n","export default __webpack_public_path__ + \"static/media/black-hole-space-svgrepo-com.e831c469.png\";","import React from \"react\";\nimport { Box, CloseButton, Flex, useColorModeValue, Text, BoxProps, Image } from \"@chakra-ui/react\";\nimport { NavItem } from \"./Item\";\nimport { LinkItems } from \"./items\";\nimport logo from \"../../assets/black-hole-space-svgrepo-com.png\";\n\nexport interface SidebarProps extends BoxProps {\n  onClose: () => void;\n}\nexport const SidebarContent = ({ onClose, ...rest }: SidebarProps) => {\n  return (\n    <Box\n      transition=\"3s ease\"\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      borderRight=\"1px\"\n      borderRightColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n      w={{ base: \"full\", md: 60 }}\n      pos=\"fixed\"\n      h=\"full\"\n      {...rest}\n    >\n      <Flex h=\"20\" alignItems=\"center\" mx=\"8\" justifyContent=\"space-between\">\n        <Image src={logo} rounded=\"full\" maxW=\"48px\" />\n        <Text fontSize=\"2xl\" fontFamily=\"monospace\" fontWeight=\"bold\">\n          Sanctis\n        </Text>\n        <CloseButton display={{ base: \"flex\", md: \"none\" }} onClick={onClose} />\n      </Flex>\n      {LinkItems.map((link) => (\n        <NavItem key={link.name} icon={link.icon} url={link.url}>\n          {link.name}\n        </NavItem>\n      ))}\n    </Box>\n  );\n};\n","import { BigNumber } from \"ethers\";\n\nexport const shortAddress = (address: string | undefined): string => {\n  if (!address) return \"???\";\n  return (\n    address.substring(0, 4) +\n    \"...\" +\n    address.substring(address.length - 4, address.length)\n  );\n};\n\nexport const planetIdToCoordinate = (planetId: string) => {\n  const num = BigNumber.from(planetId)\n  const bits80 = BigNumber.from(\"0xFFFFF\")\n  const x = num.and(bits80)\n  const y = num.shr(80).and(bits80)\n  const z = num.shr(160).and(bits80)\n  return `(X=${x}; Y=${y}; Z=${z})`\n}","import {\n  VStack,\n  Image,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Spinner,\n} from \"@chakra-ui/react\";\n\ninterface ConfirmationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst ConfirmationModal: React.FC<ConfirmationModalProps> = ({\n  isOpen,\n  onClose\n}) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent maxW=\"350px\">\n        <ModalHeader>Confirming transaction...</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing=\"8px\" my={2}>\n            <Image src={\"ojiji\"} w=\"100%\" h=\"100%\" />\n            <Spinner size=\"xl\" thickness={\"8px\"} />\n          </VStack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ConfirmationModal;\n","import { useDisclosure } from \"@chakra-ui/react\";\nimport ConfirmationModal from \"components/ConfirmationModal\";\nimport React, { createContext, useCallback } from \"react\";\n\nexport interface ConfirmationModalContextValues {\n  confirming: boolean\n  open: (action: () => Promise<void>, onClose?: () => Promise<void>) => Promise<void>\n}\n\nexport const ConfirmationModalContext = createContext<ConfirmationModalContextValues>({\n  confirming: false,\n  open: () => new Promise(() => {})\n})\n\nexport const ChainPickerProvider: React.FC = ({ children }) => {\n  const { isOpen: confirming, onOpen, onClose: onCloseModal } = useDisclosure();\n\n  const open = useCallback(async (action: () => Promise<void>, onClose?: () => Promise<void>) => {\n    onOpen()\n    await action()\n    if (onClose) await onClose()\n    onCloseModal()\n  }, [onOpen, onCloseModal])\n\n  return (\n    <ConfirmationModalContext.Provider\n      value={{ confirming, open }}\n    >\n      {children}\n      <ConfirmationModal isOpen={confirming} onClose={onCloseModal} />\n    </ConfirmationModalContext.Provider>\n  );\n};\n\nexport default ChainPickerProvider;\n","import { useContext } from \"react\";\n\nimport { ConfirmationModalContext } from \"../contexts/ConfirmationModal\";\n\nconst useConfirmationModal = () => {\n  return {\n    ...useContext(ConfirmationModalContext),\n  };\n};\n\nexport default useConfirmationModal;\n","export interface Network {\n  name: string;\n  rpcUrl: string;\n  chainId: number;\n}\n\nexport const supportedNetworks: Network[] = [\n  // {\n  //   name: \"Fantom Testnet\",\n  //   rpcUrl: \"https://xapi.testnet.fantom.network/lachesis\",\n  //   chainId: 4002,\n  // },\n  {\n    name: \"Polygon Testnet (Mumbai)\",\n    rpcUrl: \"https://matic-mumbai.chainstacklabs.com\",\n    chainId: 80001,\n  },\n  // {\n  //   name: \"Fantom Mainnet\",\n  //   rpcUrl: \"https://rpc.fantom.network/\",\n  //   chainId: 250,\n  // },\n];\n\nexport const deployedAddresses: { [id: number]: { [contract: string]: string } } = {\n  4002: {\n    sanctis: \"0x82796af064346a29d5a27057d16a28be0c4b3316\",\n    credits: \"0x9abbbddbd5e6bf2697c4eb8109e7bd4335e40bb1\",\n    parliament: \"0xacec97ae37b3fd23d699251a341e902689e1c238\",\n    commanders: \"0x3032804c781d518f554b4e5e0e179103b15eab34\",\n    planets: \"0x2620ae485267a456d5fe872bef584b4a52c243e2\",\n    fleets: \"0x08fd27f8dd1e2b28b2ce99572e0699c0364f0d29\",\n    humans: \"0x989c5d11a3607cd3d5663dd2c89f9d70e63bbf9c\",\n    energy: \"0x9023550b35e8438734d6f541648ea036a46033d4\",\n    iron: \"0x84b288f20389aa710b7ff0232e48c4608b731fb8\",\n    deuterium: \"0xdd7e06e51a748acacd6574d26bb73d027667f08c\",\n    silicon: \"0x7a19b32208ceaa7567fe412af85e05403021cef8\",\n    ironMines: \"0x5571c77a08c57548eca2f619e192a2eeebdbde9b\",\n    siliconFurnaces: \"0xefdfe52bd8b7d30a1a8bd969f64e635b1fc82897\",\n    heavyWaterPlants: \"0x5c40018bdc649998029b549ee93e05bf82b9cfce\",\n    solarPanels: \"0x0d911b301015e69754e1dea19255e65890f362df\",\n    fusionReactors: \"0x8c36ccff8265a3e8a5fe4623903fa1284ef26beb\",\n    spatioports: \"0xa569f91ab1038416239635ce84917e8a2c2b1f68\",\n    transporters: \"0x911361700250b3a17b56fd0b874ba3799b1f4bc3\",\n    scouts: \"0xfdb621612cae882d3de41f46de3da9e9c8f81da6\",\n    destroyers: \"0xceacea7a31c308f082cf7cb0273d6b22948bfa22\",\n    plundering: \"0x8febd06842530cbc196178630a6d3708f886b075\",\n    resourceWrapper: \"0x43d37eb9f543bc45dab093ecae13f899e637ceec\",\n  },\n  80001: {\n    sanctis: \"0x668f9757cc3b99ea15493a204d3499a944298d45\",\n    credits: \"0x26466c41c505be988a55b01b999d1472743b8935\",\n    parliament: \"0xd4cd11d88e7a199fe829be923bd4d238e55a0f73\",\n    commanders: \"0x77c3e082a27117aba44a77be1839ed8d80951050\",\n    planets: \"0x97745b5a7c3c130aecc9602d9d948aee82af2f86\",\n    fleets: \"0x934f4f1d8c646e5624553f4f93fa5a406e40b661\",\n    humans: \"0x57d267e0616b2556380b2a7098fb6da850238e30\",\n    energy: \"0xa65bdda4d8b9b713148a83e22bfdca2310a19292\",\n    iron: \"0x186281c4f12bdd9322e7231a2df54859fbebf0f1\",\n    deuterium: \"0xfb2b326ed3f3e29431a62e47eab52498867cf7e4\",\n    silicon: \"0xd561741cc2acce2a08389a786adcd535bd186049\",\n    ironMines: \"0xdbfd99cdae2458d87963a92acab1643182dca5ba\",\n    siliconFurnaces: \"0x2f26bad1c73ac3229fafa046dfc318962518e7aa\",\n    heavyWaterPlants: \"0xbe9ca39a7c1f56f086d59c8b5c8e659c8ce1bcfa\",\n    solarPanels: \"0x84704afe8234d8255d4d473bdec59258676a8b70\",\n    fusionReactors: \"0x4a8417f0684a97896fee7d4eb8d6fc22f8bf8a48\",\n    spatioports: \"0xf830c264bc30293d1adbec82bcabad0b30eb16c9\",\n    transporters: \"0x25a471c7b60ae3ce475400d2e24f6a11219436a2\",\n    scouts: \"0xbfec4d314cf68644a45a3bb6531895f8e7bb3179\",\n    destroyers: \"0x0eb5f5f085c0575f4ee03b92938fedb214b4464f\",\n    plundering: \"0x56b07dc2d28e31d2e08958ef4feeea19e0134b33\",\n    resourceWrapper: \"0x9cc76cc5abd2cc9dd4532fb969bfd8869325b01c\",\n  },\n};\n\nexport default deployedAddresses;\n","export default __webpack_public_path__ + \"static/media/electric.711b3b48.svg\";","export default __webpack_public_path__ + \"static/media/metal-bar.7f83f5c0.svg\";","export default __webpack_public_path__ + \"static/media/ore.4eebbfb5.svg\";","export default __webpack_public_path__ + \"static/media/topaz.a9cfb39d.svg\";","import { useCallback, useEffect, useState } from \"react\";\n\nexport default function useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = useCallback((value: T | ((value: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  }, [key, storedValue]);\n\n  // Update the stored value if the key is updated\n  useEffect(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      setStoredValue(item ? JSON.parse(item) : initialValue);\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      setStoredValue(initialValue);\n    }\n  }, [key, initialValue])\n\n  return [storedValue, setValue] as [T, (value: T | ((value: T) => T)) => void];\n}","import React, { createContext } from \"react\";\n\nimport { supportedNetworks, Network } from \"../constants\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nexport interface ChainPickerContextValues extends Network {\n  setNetwork: (network: Network) => void\n}\n\nexport const ChainPickerContext = createContext<ChainPickerContextValues>({\n  ...supportedNetworks[0],\n  setNetwork: () => {}\n})\n\nexport const ChainPickerProvider: React.FC = ({ children }) => {\n  const [network, setNetwork] = useLocalStorage<Network>(\"network\", supportedNetworks[0])\n\n  return (\n    <ChainPickerContext.Provider\n      value={{ ...network, setNetwork }}\n    >\n      {children}\n    </ChainPickerContext.Provider>\n  );\n};\n\nexport default ChainPickerProvider;\n","import { useContext } from \"react\";\n\nimport { ChainPickerContext } from \"../contexts/ChainPicker\";\n\nconst useChainPicker = () => {\n  return {\n    ...useContext(ChainPickerContext),\n  };\n};\n\nexport default useChainPicker;\n","import energy from '../assets/electric.svg'\nimport metalBar from '../assets/metal-bar.svg'\nimport ore from '../assets/ore.svg'\nimport deuterium from '../assets/topaz.svg'\nimport deployedAddresses from '../constants'\nimport { Infrastructure, Race, Resource, Ship } from '../contexts/Sanctis/types'\nimport useChainPicker from './useChainPicker'\n\nconst useApprovedObjects = () => {\n  const { chainId } = useChainPicker();\n\n  const races: Race[] = [{ name: \"Human\", address: deployedAddresses[chainId].humans }];\n  const resources: Resource[] = [\n    { name: \"Energy\", address: deployedAddresses[chainId].energy, icon: energy },\n    { name: \"Iron\", address: deployedAddresses[chainId].iron, icon: metalBar },\n    { name: \"Silicon\", address: deployedAddresses[chainId].silicon, icon: ore },\n    { name: \"Deuterium\", address: deployedAddresses[chainId].deuterium, icon: deuterium },\n  ];\n  const infrastructures: Infrastructure[] = [\n    {\n      name: \"Iron mines\",\n      description: \"It extracts a constant rate of iron.\",\n      address: deployedAddresses[chainId].ironMines,\n    },\n    {\n      name: \"Silicon Furnaces\",\n      description: \"It produces silicon at a constant rate.\",\n      address: deployedAddresses[chainId].siliconFurnaces,\n    },\n    {\n      name: \"Heavy Water Plants\",\n      description: \"Used to concentrate deuterium.\",\n      address: deployedAddresses[chainId].heavyWaterPlants,\n    },\n    {\n      name: \"Solar Panels\",\n      description: \"Harvests the energy of the nearby star\",\n      address: deployedAddresses[chainId].solarPanels,\n    },\n    {\n      name: \"Fusion Reactors\",\n      description: \"Fuses deuterium isotopes to create energy.\",\n      address: deployedAddresses[chainId].fusionReactors,\n    },\n    {\n      name: \"Spatioports\",\n      description: \"A building necessary to build ships\",\n      address: deployedAddresses[chainId].spatioports,\n    },\n  ];\n  const ships: Ship[] = [\n    {\n      name: \"Transporters\",\n      description: \"Small ships used to transports resources around.\",\n      address: deployedAddresses[chainId].transporters,\n    },\n    { name: \"Scouts\", description: \"Fast reconnaissance units.\", address: deployedAddresses[chainId].scouts },\n    {\n      name: \"Destroyers\",\n      description: \"Heavily armed ships used to take down ennemy's fleets\",\n      address: deployedAddresses[chainId].destroyers,\n    },\n  ];\n\n  return {\n    races,\n    resources,\n    infrastructures,\n    ships,\n  };\n};\n\nexport default useApprovedObjects;\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { ExternalProvider } from \"@ethersproject/providers\";\r\nimport { BigNumber, Contract, ethers, providers, utils } from \"ethers\";\r\nimport useConfirmationModal from \"hooks/useConfirmationModal\";\r\nimport React, { createContext, useCallback, useEffect, useMemo, useState } from \"react\";\r\n\r\nimport { deployedAddresses } from \"../../constants\";\r\nimport CommandersABI from \"../../constants/contracts/Commanders.sol/Commanders.json\";\r\nimport InfrastructureABI from \"../../constants/contracts/IInfrastructure.sol/IInfrastructure.json\";\r\nimport PowerPlantsABI from \"../../constants/contracts/IPowerPlants.sol/IPowerPlants.json\";\r\nimport ResourceABI from \"../../constants/contracts/IResource.sol/IResource.json\";\r\nimport ResourceProducerABI from \"../../constants/contracts/IResourceProducer.sol/IResourceProducer.json\";\r\nimport ShipABI from \"../../constants/contracts/IShip.sol/IShip.json\";\r\nimport PlanetsABI from \"../../constants/contracts/Planets.sol/Planets.json\";\r\nimport SanctisABI from \"../../constants/contracts/Sanctis.sol/Sanctis.json\";\r\nimport CreditsABI from \"../../constants/contracts/SpaceCredits.sol/SpaceCredits.json\";\r\nimport useApprovedObjects from \"../../hooks/useApprovedObjects\";\r\nimport useChainPicker from \"../../hooks/useChainPicker\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport { Commander, Planet, Race, Reserve } from \"./types\";\r\n\r\nexport interface SanctisContextValues {\r\n  colonizationCost?: BigNumber;\r\n  ownedCredits?: number;\r\n  ownedCommanders?: Commander[];\r\n  currentCommander?: Commander;\r\n  commanders: { [commanderId: string]: Commander };\r\n  planets: { [planetId: string]: Planet };\r\n  setCurrentCommander: (commander?: Commander) => void;\r\n  fetchCommander: (commanderId: string) => Promise<Commander | undefined | null>;\r\n  fetchPlanet: (planetId: string) => Promise<Planet | undefined | null>;\r\n  createCommander: (name: string, race: Race) => Promise<void>;\r\n  colonizePlanet: (commander: Commander, x: number, y: number, z: number) => Promise<void>;\r\n}\r\n\r\nexport const SanctisContext = createContext<SanctisContextValues>({\r\n  commanders: {},\r\n  planets: {},\r\n  setCurrentCommander: (commander?: Commander) => {},\r\n  fetchCommander: () => new Promise(() => {}),\r\n  fetchPlanet: () => new Promise(() => {}),\r\n  createCommander: () => new Promise(() => {}),\r\n  colonizePlanet: () => new Promise(() => {}),\r\n});\r\n\r\nexport const SanctisProvider: React.FC = ({ children }) => {\r\n  const toast = useToast();\r\n  const { open } = useConfirmationModal();\r\n  const { chainId } = useChainPicker();\r\n  const approvedObjects = useApprovedObjects();\r\n  const { ethereum, account } = useWallet<ExternalProvider>();\r\n\r\n  const contracts = useMemo(() => {\r\n    if (!ethereum) return;\r\n    const SanctisInterface = new utils.Interface(SanctisABI.abi);\r\n    const CommandersInterface = new utils.Interface(CommandersABI.abi);\r\n    const CreditsInterface = new utils.Interface(CreditsABI.abi);\r\n    const PlanetsInterface = new utils.Interface(PlanetsABI.abi);\r\n    const ResourceInterface = new utils.Interface(ResourceABI.abi);\r\n    const PowerPlantsInterface = new utils.Interface(PowerPlantsABI.abi);\r\n    const ResourceProducerInterface = new utils.Interface(ResourceProducerABI.abi);\r\n    const ShipInterface = new utils.Interface(ShipABI.abi);\r\n    const signer = new providers.Web3Provider(ethereum).getSigner();\r\n    return {\r\n      sanctis: new Contract(deployedAddresses[chainId].sanctis, SanctisInterface, signer),\r\n      commanders: new Contract(deployedAddresses[chainId].commanders, CommandersInterface, signer),\r\n      credits: new Contract(deployedAddresses[chainId].credits, CreditsInterface, signer),\r\n      planets: new Contract(deployedAddresses[chainId].planets, PlanetsInterface, signer),\r\n      energy: new Contract(deployedAddresses[chainId].energy, ResourceInterface, signer),\r\n      iron: new Contract(deployedAddresses[chainId].iron, ResourceInterface, signer),\r\n      silicon: new Contract(deployedAddresses[chainId].silicon, ResourceInterface, signer),\r\n      deuterium: new Contract(deployedAddresses[chainId].deuterium, ResourceInterface, signer),\r\n      solarPanels: new Contract(deployedAddresses[chainId].solarPanels, PowerPlantsInterface, signer),\r\n      fusionReactors: new Contract(deployedAddresses[chainId].fusionReactors, PowerPlantsInterface, signer),\r\n      ironMines: new Contract(deployedAddresses[chainId].ironMines, ResourceProducerInterface, signer),\r\n      siliconFurnaces: new Contract(deployedAddresses[chainId].siliconFurnaces, ResourceProducerInterface, signer),\r\n      heavyWaterPlants: new Contract(deployedAddresses[chainId].heavyWaterPlants, ResourceProducerInterface, signer),\r\n      transporters: new Contract(deployedAddresses[chainId].transporters, ShipInterface, signer),\r\n      scouts: new Contract(deployedAddresses[chainId].scouts, ShipInterface, signer),\r\n      destroyers: new Contract(deployedAddresses[chainId].destroyers, ShipInterface, signer),\r\n    };\r\n  }, [chainId, ethereum]);\r\n\r\n  const [ownedCredits, setOwnedCredits] = useState<number>();\r\n  const [ownedCommanders, setOwnedCommanders] = useState<Commander[]>();\r\n  const [commanders, setCommanders] = useState<{ [commanderId: string]: Commander }>({});\r\n  const [memorizedCommander, setMemorizedCommander] = useLocalStorage<Commander | undefined>(\r\n    \"memorized_commander\",\r\n    undefined\r\n  );\r\n  const [owner, setOwner] = useLocalStorage<string | null>(\"memorized_owner\", null);\r\n  const [currentCommander, setCurrentCommanderState] = useState<Commander | undefined>(memorizedCommander);\r\n  const [planets, setPlanets] = useState<{ [planetId: string]: Planet }>({});\r\n  const [colonizationCost, setColonizationCost] = useState<BigNumber>();\r\n\r\n  const setCurrentCommander = useCallback(\r\n    (commander?: Commander) => {\r\n      setMemorizedCommander(commander);\r\n      setOwner(account);\r\n      setCurrentCommanderState(commander);\r\n    },\r\n    [account, setOwner, setMemorizedCommander, setCurrentCommanderState]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (memorizedCommander && ownedCommanders && ownedCommanders.includes(memorizedCommander) && owner === account) {\r\n      setCurrentCommander(memorizedCommander);\r\n    } else if (account && account !== owner) {\r\n      setCurrentCommander(undefined);\r\n    }\r\n  }, [memorizedCommander, owner, account, ownedCommanders, setCurrentCommander]);\r\n\r\n  const fetchColonizationCost = useCallback(async () => {\r\n    if (!contracts) return;\r\n    setColonizationCost(await contracts.planets.colonizationCost());\r\n  }, [contracts]);\r\n\r\n  useEffect(() => {\r\n    fetchColonizationCost();\r\n  }, [fetchColonizationCost]);\r\n\r\n  const fetchOwnedCredits = useCallback(async () => {\r\n    if (!contracts || !account) return;\r\n    setOwnedCredits(Number(ethers.utils.formatEther(await contracts.credits.balanceOf(account))));\r\n  }, [contracts, account]);\r\n\r\n  useEffect(() => {\r\n    fetchOwnedCredits();\r\n  }, [fetchOwnedCredits]);\r\n\r\n  const fetchCommander = useCallback(\r\n    async (commanderId: string) => {\r\n      if (!contracts) return;\r\n\r\n      try {\r\n        const [name, race] = await contracts.commanders.commander(commanderId);\r\n        const empireSize = (await contracts.planets.empireSize(commanderId)).toNumber();\r\n        // TODO: Fetch only planet IDs\r\n        const commanderPlanets = await Promise.all(\r\n          Array(empireSize)\r\n            .fill(0)\r\n            .map(async (_, i) => (await contracts.planets.commanderPlanetByIndex(commanderId, i)).toString())\r\n        );\r\n        const commander: Commander = {\r\n          id: commanderId,\r\n          name,\r\n          race: approvedObjects.races.find((e) => e.address === race),\r\n          planets: commanderPlanets,\r\n        };\r\n        setCommanders((old) => {\r\n          old[commanderId] = commander;\r\n          return old;\r\n        });\r\n        return commander;\r\n      } catch (err) {\r\n        console.log(\"Error fetching commander:\", err);\r\n        return null;\r\n      }\r\n    },\r\n    [approvedObjects, contracts]\r\n  );\r\n\r\n  const fetchOwnedCommanders = useCallback(async () => {\r\n    if (!contracts || !account) return;\r\n\r\n    const commandersBalance = (await contracts.commanders.balanceOf(account)).toNumber();\r\n\r\n    if (ownedCommanders?.length === commandersBalance) return;\r\n\r\n    const commanders = (\r\n      await Promise.all(\r\n        Array(commandersBalance)\r\n          .fill(0)\r\n          .map(\r\n            async (_, i) =>\r\n              (await fetchCommander((await contracts.commanders.tokenOfOwnerByIndex(account, i)).toString()))!\r\n          )\r\n      )\r\n    ).filter(Boolean);\r\n\r\n    setOwnedCommanders(commanders);\r\n  }, [account, contracts, ownedCommanders, fetchCommander]);\r\n\r\n  useEffect(() => {\r\n    fetchOwnedCommanders();\r\n  }, [fetchOwnedCommanders]);\r\n\r\n  const fetchPlanet = useCallback(\r\n    async (planetId: string) => {\r\n      if (!contracts) return;\r\n      try {\r\n        const { status, ruler, x, y, z, humidity } = await contracts.planets.planet(planetId);\r\n        const reserves: Reserve[] = await Promise.all(\r\n          approvedObjects.resources.map(async (resource) => {\r\n            const ResourceInterface = new utils.Interface(ResourceABI.abi);\r\n            const contract = new Contract(\r\n              resource.address,\r\n              ResourceInterface,\r\n              new providers.Web3Provider(ethereum).getSigner()\r\n            );\r\n            return {\r\n              resource,\r\n              amount: await contract.reserve(planetId),\r\n            };\r\n          })\r\n        );\r\n        const infrastructures = await Promise.all(\r\n          approvedObjects.infrastructures.map(async (infrastructure) => {\r\n            const InfrastructureInterface = new utils.Interface(InfrastructureABI.abi);\r\n            const contract = new Contract(\r\n              infrastructure.address,\r\n              InfrastructureInterface,\r\n              new providers.Web3Provider(ethereum).getSigner()\r\n            );\r\n            return {\r\n              ...infrastructure,\r\n              level: (await contract.level(planetId)).toNumber(),\r\n            };\r\n          })\r\n        );\r\n        const planet = {\r\n          id: planetId,\r\n          status: status,\r\n          ruler: ruler.toString(),\r\n          x: x.toNumber(),\r\n          y: y.toNumber(),\r\n          z: z.toNumber(),\r\n          humidity: humidity,\r\n          infrastructures: infrastructures,\r\n          reserves: reserves,\r\n        };\r\n        setPlanets((old) => {\r\n          old[planetId] = planet;\r\n          return old;\r\n        });\r\n        return planet;\r\n      } catch (err) {\r\n        console.log(\"Error fetching planet:\", err);\r\n        return null;\r\n      }\r\n    },\r\n    [approvedObjects, contracts, ethereum]\r\n  );\r\n\r\n  const createCommander = useCallback(\r\n    async (name: string, race: Race) => {\r\n      if (!contracts) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contracts.commanders.create(name, race.address);\r\n          await result.wait();\r\n          await fetchOwnedCommanders();\r\n          toast({ status: \"success\", title: \"Created\", description: `The world awaits your order, Commander ${name}` });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed creation: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contracts, open, toast, fetchOwnedCommanders]\r\n  );\r\n\r\n  const colonizePlanet = useCallback(\r\n    async (commander: Commander, x: number, y: number, z: number) => {\r\n      if (!contracts) return;\r\n\r\n      open(async () => {\r\n        try {\r\n          const planetId = BigNumber.from(z).shl(80).add(y).shl(80).add(x);\r\n          const result = await contracts.planets.colonize(commander.id, planetId);\r\n          await result.wait();\r\n          await fetchPlanet(planetId.toString());\r\n          await fetchOwnedCredits();\r\n          await fetchCommander(commander.id);\r\n          toast({ status: \"success\", title: \"Created\", description: `A new planet has been colonized` });\r\n        } catch (err: any) {\r\n          console.log(err);\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed colonization: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contracts, open, toast, fetchCommander, fetchPlanet, fetchOwnedCredits]\r\n  );\r\n\r\n  return (\r\n    <SanctisContext.Provider\r\n      value={{\r\n        colonizationCost,\r\n        ownedCredits,\r\n        ownedCommanders,\r\n        commanders,\r\n        planets,\r\n        currentCommander,\r\n        setCurrentCommander,\r\n        fetchCommander,\r\n        fetchPlanet,\r\n        createCommander,\r\n        colonizePlanet,\r\n      }}\r\n    >\r\n      {children}\r\n    </SanctisContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SanctisProvider;\r\n","import { useContext } from \"react\";\n\nimport { SanctisContext } from \"../contexts/Sanctis\";\n\nconst useSanctis = () => {\n  return {\n    ...useContext(SanctisContext),\n  };\n};\n\nexport default useSanctis;\n","export default __webpack_public_path__ + \"static/media/character.977d0c9e.svg\";","import React, { useCallback } from \"react\";\nimport {\n  Avatar,\n  Box,\n  Flex,\n  HStack,\n  VStack,\n  useColorModeValue,\n  Text,\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n  MenuGroup,\n} from \"@chakra-ui/react\";\nimport { FiChevronDown } from \"react-icons/fi\";\nimport { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { shortAddress } from \"utils\";\nimport numeral from \"numeral\";\nimport useSanctis from \"hooks/useSanctis\";\n\nimport commanderIcon from \"../../assets/character.svg\";\n\nexport const CommanderBadge: React.FC<{ setAutoconnect: (date: number) => void }> = ({ setAutoconnect }) => {\n  const { reset, account } = useWallet();\n  const { ownedCredits, ownedCommanders, currentCommander, setCurrentCommander } = useSanctis();\n\n  const handleReset = useCallback(() => {\n    setAutoconnect(Date.now());\n    setCurrentCommander(undefined);\n    reset();\n  }, [setAutoconnect, reset, setCurrentCommander]);\n\n  return (\n    <Flex alignItems={\"center\"}>\n      <Menu>\n        <MenuButton py={2} transition=\"all 0.3s\" _focus={{ boxShadow: \"none\" }}>\n          <HStack>\n            <Avatar size={\"sm\"} src={commanderIcon} />\n            <VStack display={{ base: \"none\", md: \"flex\" }} alignItems=\"flex-start\" spacing=\"1px\" ml=\"2\">\n              <Text fontSize=\"sm\">{currentCommander ? currentCommander.name : shortAddress(account || \"\")}</Text>\n              <Text fontSize=\"xs\" color=\"gray.600\">\n                {ownedCredits ? numeral(ownedCredits).format(\"0.00aa\") : \"???\"} $CREDS\n              </Text>\n            </VStack>\n            <Box display={{ base: \"none\", md: \"flex\" }}>\n              <FiChevronDown />\n            </Box>\n          </HStack>\n        </MenuButton>\n        <MenuList bg={useColorModeValue(\"white\", \"gray.900\")} borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}>\n          <MenuGroup title=\"Commanders\">\n            {[\n              ownedCommanders &&\n                ownedCommanders.map((e) => (\n                  <MenuItem key={e.name || \"\" + e.id} onClick={() => setCurrentCommander(e)}>\n                    {e.name}\n                  </MenuItem>\n                )),\n              <MenuItem key={\"create\"}>Create a commander</MenuItem>,\n            ]}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuGroup title=\"Wallet\">\n            <MenuItem onClick={handleReset}>Disconnect</MenuItem>\n          </MenuGroup>\n        </MenuList>\n      </Menu>\n    </Flex>\n  );\n};\n","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import React from \"react\";\nimport {\n  useColorModeValue,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  MenuGroup,\n  IconButton,\n  Badge,\n  MenuDivider,\n} from \"@chakra-ui/react\";\nimport { BiNetworkChart } from \"react-icons/bi\";\n\nimport useChainPicker from \"../../hooks/useChainPicker\";\nimport { supportedNetworks } from \"../../constants\";\n\nexport const NetworkPicker: React.FC = () => {\n  const { chainId, setNetwork } = useChainPicker();\n\n  return (\n    <Menu>\n      <IconButton\n        as={MenuButton}\n        p={3}\n        transition=\"all 0.3s\"\n        size=\"md\"\n        fontSize=\"lg\"\n        variant=\"ghost\"\n        color=\"current\"\n        icon={<BiNetworkChart />}\n        aria-label={`Switch network`}\n      />\n      <MenuList bg={useColorModeValue(\"white\", \"gray.900\")} borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}>\n        <MenuGroup title=\"Networks\">\n          <MenuDivider />\n          {supportedNetworks.map((e) => (\n            <MenuItem key={e.name || \"\" + e.chainId} onClick={() => setNetwork(e)}>\n              {e.chainId === chainId && <Badge>Selected</Badge>} {e.name}\n            </MenuItem>\n          ))}\n        </MenuGroup>\n      </MenuList>\n    </Menu>\n  );\n};\n","import {\n  IconButton,\n  Flex,\n  HStack,\n  useColorModeValue,\n  Text,\n  FlexProps,\n  Button,\n  useDisclosure,\n  Modal,\n  ModalCloseButton,\n  ModalHeader,\n  ModalContent,\n  ModalBody,\n  Box,\n  ModalOverlay,\n} from \"@chakra-ui/react\";\nimport { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { FiMenu } from \"react-icons/fi\";\nimport { GrConnect } from \"react-icons/gr\";\nimport { CommanderBadge } from \"./CommanderBadge\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport { useCallback, useEffect } from \"react\";\nimport useLocalStorage from \"hooks/useLocalStorage\";\nimport { NetworkPicker } from \"./NetworkPicker\";\n\ninterface MobileProps extends FlexProps {\n  onOpen: () => void;\n}\n\nconst validConnectors = [{ name: \"MetaMask\", id: \"injected\" }];\n\nconst autoconnectPeriod = 86400000;\n\nexport const MobileNav = ({ onOpen, ...rest }: MobileProps) => {\n  const { account, connect } = useWallet();\n  const { isOpen, onOpen: openModal, onClose } = useDisclosure();\n  const [autoconnect, setAutoconnect] = useLocalStorage(\"autoconnectExpirationDate\", Date.now());\n  const [connector, setConnector] = useLocalStorage<string | undefined>(\"connector\", undefined);\n\n  const handleChooseWallet = useCallback(async () => {\n    openModal();\n  }, [openModal]);\n\n  const handleConnect = useCallback(\n    async (id: string) => {\n      await connect(id as any);\n      setAutoconnect(Date.now() + autoconnectPeriod);\n      setConnector(id);\n      onClose();\n    },\n    [connect, onClose, setAutoconnect, setConnector]\n  );\n\n  useEffect(() => {\n    if (!connector) return;\n    if (autoconnect > Date.now() && !account) {\n      connect(connector as any);\n    }\n  }, [account, autoconnect, connector, connect, handleConnect]);\n\n  return (\n    <Flex\n      ml={{ base: 0, md: 60 }}\n      px={{ base: 4, md: 4 }}\n      height=\"20\"\n      alignItems=\"center\"\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      borderBottomWidth=\"1px\"\n      borderBottomColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n      justifyContent={{ base: \"space-between\", md: \"flex-end\" }}\n      {...rest}\n    >\n      <IconButton\n        display={{ base: \"flex\", md: \"none\" }}\n        onClick={onOpen}\n        variant=\"outline\"\n        aria-label=\"open menu\"\n        icon={<FiMenu />}\n      />\n      <Text display={{ base: \"flex\", md: \"none\" }} fontSize=\"2xl\" fontFamily=\"monospace\" fontWeight=\"bold\">\n        Logo\n      </Text>\n\n      <HStack spacing={{ base: \"0\", md: \"6\" }}>\n        <ColorModeSwitcher />\n        <NetworkPicker />\n        {account ? (\n          <CommanderBadge setAutoconnect={setAutoconnect} />\n        ) : (\n          <Button\n            size=\"lg\"\n            variant=\"ghost\"\n            aria-label=\"open menu\"\n            leftIcon={<GrConnect />}\n            onClick={handleChooseWallet}\n          >\n            Connect\n          </Button>\n        )}\n      </HStack>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalCloseButton />\n          <ModalHeader>Choose a wallet</ModalHeader>\n          <ModalBody>\n            {Object.values(validConnectors).map((connector) => (\n              <Button key={connector.id} isFullWidth onClick={() => handleConnect(connector.id)}>\n                <Box>{connector.name}</Box>\n              </Button>\n            ))}\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </Flex>\n  );\n};\n","import Sidebar from \"./Sidebar\"\n\nexport default Sidebar","import { ReactNode } from 'react';\nimport {\n  Box,\n  useColorModeValue,\n  Drawer,\n  DrawerContent,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { SidebarContent } from './Content';\nimport { MobileNav } from './Mobile';\n\nexport default function SidebarWithHeader({\n  children,\n}: {\n  children: ReactNode;\n}) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <Box minH=\"100vh\" bg={useColorModeValue('gray.100', 'gray.900')}>\n      <SidebarContent\n        onClose={() => onClose}\n        display={{ base: 'none', md: 'block' }}\n      />\n      <Drawer\n        autoFocus={false}\n        isOpen={isOpen}\n        placement=\"left\"\n        onClose={onClose}\n        returnFocusOnClose={false}\n        onOverlayClick={onClose}\n        size=\"full\">\n        <DrawerContent>\n          <SidebarContent onClose={onClose} />\n        </DrawerContent>\n      </Drawer>\n      {/* mobilenav */}\n      <MobileNav onOpen={onOpen} />\n      <Box ml={{ base: 0, md: 60 }} p=\"4\">\n        {children}\n      </Box>\n    </Box>\n  );\n}","import React from \"react\";\nimport { Box, Button, Container, Heading, Link, Stack, useColorModeValue } from \"@chakra-ui/react\";\n\nimport useCommanders from \"../../hooks/useSanctis\";\n\nconst Commanders: React.FC = () => {\n  const { ownedCommanders } = useCommanders();\n\n  console.log(ownedCommanders);\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Stack\n        background={useColorModeValue(\"white\", \"gray.800\")}\n        textAlign={\"center\"}\n        align={\"center\"}\n        spacing={{ base: 8, md: 10 }}\n        p=\"3\"\n        rounded=\"xl\"\n      >\n        <Heading>Sanctis</Heading>\n        <Box>\n          A commander is free to create and you can have as many as you want. However, the game is designed to encourage\n          players to have few commanders with a big empire rather than many commanders with smaller empires.\n        </Box>\n        <Button as={Link} href={\"#/commanders\"}>\n          Choose a commander\n        </Button>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Commanders;\n","import { Planet } from \"contexts/Sanctis/types\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport useSanctis from \"./useSanctis\";\n\nexport default function usePlanet(planetId?: string) {\n  const { planets, fetchPlanet } = useSanctis()\n  const [planet, setPlanet] = useState<Planet | null>()\n\n  const fetch = useCallback(async () => {\n    if(!planetId) return\n    else if(!planets[planetId]) {\n      setPlanet(await fetchPlanet(planetId))\n    } else {\n      setPlanet(planets[planetId])\n    }\n  }, [planets, planetId, fetchPlanet])\n\n  useEffect(() =>  {\n    fetch()\n  }, [fetch])\n\n  return planet\n}","import { BigNumber } from \"ethers\";\r\n\r\nexport interface Race {\r\n  address: string;\r\n  name: string;\r\n}\r\n\r\nexport interface Resource {\r\n  address: string;\r\n  name: string;\r\n  icon: string;\r\n}\r\n\r\nexport interface Reserve {\r\n  resource: Resource;\r\n  amount: BigNumber;\r\n}\r\n\r\nexport interface Infrastructure {\r\n  address: string;\r\n  name: string;\r\n  description: string;\r\n  level?: number;\r\n  nextUpgrade?: number;\r\n  costsResources?: Resource[];\r\n  nextCosts?: BigNumber[];\r\n}\r\n\r\nexport interface ResourceProducer extends Infrastructure {\r\n  level?: number;\r\n  producedResources?: Resource[];\r\n  productionPerBlock?: number[];\r\n  lastHarvest?: number;\r\n  nextUpgrade?: number;\r\n}\r\n\r\nexport interface Ship {\r\n  address: string;\r\n  name: string;\r\n  description: string;\r\n  costsResources?: Resource[];\r\n  costs?: BigNumber[];\r\n  speed?: number;\r\n  offensivePower?: number;\r\n  defensivePower?: number;\r\n  capacity?: BigNumber;\r\n  reserve?: number;\r\n}\r\n\r\nexport enum FleetStatus {\r\n  Preparing = \"Preparing\",\r\n  Orbitting = \"Orbitting\",\r\n  Travelling = \"Travelling\",\r\n}\r\n\r\nexport interface Fleet {\r\n  id: string;\r\n  commander: BigNumber;\r\n  fromPlanet?: Planet;\r\n  toPlanet?: Planet;\r\n  totalSpeed: BigNumber;\r\n  totalOffensivePower: BigNumber;\r\n  totalDefensivePower: BigNumber;\r\n  capacity: BigNumber;\r\n  ships: BigNumber;\r\n  arrivalBlock: number;\r\n  status: FleetStatus;\r\n  shipsInFleet: { [address: string]: number };\r\n  resources: Reserve[];\r\n}\r\n\r\nexport enum PlanetStatus {\r\n  Unknown,\r\n  Uncharted,\r\n  Colonized,\r\n  Federated,\r\n  Occupied,\r\n}\r\n\r\nexport interface Planet {\r\n  id: string;\r\n  status: PlanetStatus;\r\n  ruler: string;\r\n  x: number;\r\n  y: number;\r\n  z: number;\r\n  humidity: number;\r\n  infrastructures: Infrastructure[];\r\n  reserves: Reserve[];\r\n}\r\n\r\nexport interface Commander {\r\n  id: string;\r\n  name?: string;\r\n  race?: Race;\r\n  onboarding?: Date;\r\n  planets?: string[];\r\n}\r\n","import { Box, Flex, Image, Text, Tooltip, useColorModeValue } from \"@chakra-ui/react\";\nimport { BigNumber, ethers } from \"ethers\";\nimport numeral from \"numeral\";\nimport React, { useMemo } from \"react\";\n\nimport { Resource } from \"../contexts/Sanctis/types\";\n\nconst ResourceBadge: React.FC<{ resource: Resource; amount?: BigNumber; size?: \"sm\" | \"md\" | \"lg\" }> = ({\n  resource,\n  amount,\n  size = \"md\",\n}) => {\n  const bgColor = useColorModeValue(\"gray.400\", \"gray.600\");\n  const iconSize = ((size: string) => {\n    switch (size) {\n      case \"sm\":\n        return \"30px\";\n      case \"md\":\n        return \"40px\";\n      case \"lg\":\n        return \"50px\";\n      default:\n        return \"40px\";\n    }\n  })(size);\n  const width = useMemo(() => {\n    switch (size) {\n      case \"sm\":\n        return \"3em\";\n      case \"md\":\n        return \"2em\";\n      case \"lg\":\n        return \"2em\";\n    }\n  }, [size]);\n  const content = useMemo(() => {\n    return (\n      <Flex\n        background={bgColor}\n        p=\"2\"\n        rounded=\"3xl\"\n        w=\"calc(120%)\"\n        shadow={size}\n        align=\"center\"\n        direction={size !== \"sm\" ? \"column\" : \"row\"}\n      >\n        <Image src={resource.icon} background=\"black\" maxW={iconSize} maxH={iconSize} p={2} rounded=\"full\" />\n        <Box ml=\"1\" minW={width} justifyContent={size !== \"sm\" ? \"center\" : \"start\"}>\n          <Text fontWeight=\"bold\" fontSize={size} width=\"fit-content\">\n            {amount ? numeral(ethers.utils.formatEther(amount)).format(\"0.0a\") : \"???\"}\n          </Text>\n          {size !== \"sm\" && (\n            <Text fontSize={size} width=\"fit-content\">\n              {resource.name}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n    );\n  }, [amount, iconSize, resource, bgColor, size, width]);\n\n  return size !== \"sm\" ? content : <Tooltip label={resource.name}>{content}</Tooltip>;\n};\n\nexport default ResourceBadge;\n","import { IconButton, Link } from \"@chakra-ui/react\";\r\nimport { BiHelpCircle } from \"react-icons/bi\";\r\n\r\nconst DocumentationButton: React.FC<{ href: string }> = ({ href }) => {\r\n  return (\r\n    <IconButton\r\n      as={Link}\r\n      href={href}\r\n      target=\"_blank\"\r\n      icon={<BiHelpCircle />}\r\n      aria-label=\"See the docs\"\r\n      w=\"48px\"\r\n      rounded=\"full\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default DocumentationButton;\r\n","import {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Flex,\r\n  Text,\r\n  useColorModeValue,\r\n  Wrap,\r\n  WrapItem,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nimport ResourceBadge from \"../../components/ResourceBadge\";\r\nimport DocumentationButton from \"../../contexts/DocumentationButton\";\r\nimport { Planet } from \"../../contexts/Sanctis/types\";\r\n\r\nconst ReservesSection: React.FC<{ planet: Planet }> = ({ planet }) => {\r\n  return (\r\n    <AccordionItem>\r\n      <Flex\r\n        direction=\"column\"\r\n        align={\"center\"}\r\n        m={2}\r\n        p={3}\r\n        background={useColorModeValue(\"gray.300\", \"gray.700\")}\r\n        rounded=\"lg\"\r\n      >\r\n        <AccordionButton justifyContent=\"center\">\r\n          <DocumentationButton href=\"https://docs.sanctis.xyz/sections/game/resources\" />\r\n          <Text margin=\"auto\" mb=\"3\" fontSize=\"xl\" fontWeight=\"bold\">\r\n            Planet's reserves\r\n          </Text>\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n        <AccordionPanel>\r\n          <Wrap>\r\n            {planet.reserves.map((e) => (\r\n              <WrapItem key={e.resource.name + e.amount.toString()}>\r\n                <ResourceBadge resource={e.resource} amount={e.amount} size=\"lg\" />\r\n              </WrapItem>\r\n            ))}\r\n          </Wrap>\r\n        </AccordionPanel>\r\n      </Flex>\r\n    </AccordionItem>\r\n  );\r\n};\r\n\r\nexport default ReservesSection;\r\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useToast } from '@chakra-ui/react'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { Contract, ethers, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport ResourceProducerABI from '../constants/contracts/IResourceProducer.sol/IResourceProducer.json'\nimport { Infrastructure } from '../contexts/Sanctis/types'\nimport useApprovedObjects from './useApprovedObjects'\nimport useConfirmationModal from './useConfirmationModal'\nimport useSanctis from './useSanctis'\n\nconst useInfrastructure = (infrastructure: Infrastructure, planetId: string) => {\n  const toast = useToast();\n  const { open } = useConfirmationModal();\n  const { resources } = useApprovedObjects();\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { fetchPlanet } = useSanctis();\n  const [loadedInfrastructure, setLoadedInfrastructure] = useState<Infrastructure>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const ResourceProducerInterface = new utils.Interface(ResourceProducerABI.abi);\n    return new Contract(\n      infrastructure.address,\n      ResourceProducerInterface,\n      new providers.Web3Provider(ethereum).getSigner()\n    );\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n\n    const level = await contract.level(planetId);\n    const [costsResources, nextCosts] = await contract.costs(planetId);\n    const nextUpgrade = await contract.nextUpgrade(planetId);\n    setLoadedInfrastructure({\n      ...infrastructure,\n      level: level.toNumber(),\n      nextUpgrade: nextUpgrade.toNumber(),\n      costsResources: costsResources.map((e: string) =>\n        resources.find((a) => ethers.utils.getAddress(e) === ethers.utils.getAddress(a.address))\n      ),\n      nextCosts,\n    });\n\n    setIsFetching(false);\n  }, [isFetching, infrastructure, planetId, resources, contract, setLoadedInfrastructure]);\n\n  useEffect(() => {\n    if (!loadedInfrastructure.nextCosts || loadedInfrastructure.address !== infrastructure.address) fetch();\n  }, [loadedInfrastructure, infrastructure, fetch]);\n\n  const create = useCallback(\n    async (planetId: string) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.create(planetId);\n          await result.wait();\n          await fetch();\n          await fetchPlanet(planetId);\n          toast({\n            status: \"success\",\n            title: \"Created\",\n            description: `${infrastructure.name} has been built on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({ status: \"error\", title: \"Error\", description: `Failed creation: ${err.message}` });\n        }\n      });\n    },\n    [contract, infrastructure, fetch, fetchPlanet, open, toast]\n  );\n\n  const upgrade = useCallback(\n    async (planetId: string) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.upgrade(planetId);\n          await result.wait();\n          await fetch();\n          await fetchPlanet(planetId);\n          toast({\n            status: \"success\",\n            title: \"Upgraded\",\n            description: `${infrastructure.name} has been upgraded on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({ status: \"error\", title: \"Error\", description: `Failed upgrade: ${err.message}` });\n        }\n      });\n    },\n    [contract, infrastructure, fetch, fetchPlanet, open, toast]\n  );\n\n  return {\n    infrastructure: loadedInfrastructure,\n    create,\n    upgrade,\n  };\n};\n\nexport default useInfrastructure;\n","import { Button, Select, Stack, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport ResourceBadge from \"components/ResourceBadge\";\nimport React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { Infrastructure, Planet, Resource } from \"../../../contexts/Sanctis/types\";\nimport useApprovedObjects from \"../../../hooks/useApprovedObjects\";\nimport useInfrastructure from \"../../../hooks/useInfrastructure\";\n\nconst CreateInfrastuctureCard: React.FC<{ planet: Planet }> = ({ planet }) => {\n  const { infrastructures } = useApprovedObjects();\n  const choices = useMemo(() => {\n    return planet.infrastructures.filter((e) => !e.level);\n  }, [planet.infrastructures]);\n  const [choice, setChoice] = useState<Infrastructure | undefined>(choices[0]);\n  const { infrastructure, create } = useInfrastructure(choice || infrastructures[0], planet.id);\n\n  const handleSelect = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      setChoice(JSON.parse(e.target.value));\n    },\n    [setChoice]\n  );\n\n  const handleCreate = useCallback(async () => {\n    create(planet.id);\n  }, [planet, create]);\n\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\n      <Text fontSize=\"xl\" fontWeight=\"bold\">\n        Choose an infrastructure to build\n      </Text>\n      <Select onChange={handleSelect}>\n        {choices.map((e) => (\n          <option key={e.name} value={JSON.stringify(e)}>\n            {e.name}\n          </option>\n        ))}\n      </Select>\n      {choice && infrastructure && (\n        <>\n          <Text fontSize=\"lg\">{infrastructure.description}</Text>\n          {infrastructure.nextCosts && infrastructure.costsResources ? (\n            <Stack spacing={0}>\n              <Text>Costs:</Text>\n              <Wrap mt={0}>\n                {infrastructure.costsResources.map((e: Resource, i) => (\n                  <WrapItem key={e.name} mt={0}>\n                    <ResourceBadge resource={e} amount={infrastructure.nextCosts![i]} size=\"sm\" />\n                  </WrapItem>\n                ))}\n              </Wrap>\n            </Stack>\n          ) : (\n            <Text>This infrastructure is free to build</Text>\n          )}\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            onClick={handleCreate}\n          >\n            Create\n          </Button>\n        </>\n      )}\n    </Stack>\n  );\n};\n\nexport default CreateInfrastuctureCard;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { BigNumber, Contract, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport PowerPlantABI from '../constants/contracts/IPowerPlants.sol/IPowerPlants.json'\nimport { Infrastructure, Resource } from '../contexts/Sanctis/types'\nimport useApprovedObjects from './useApprovedObjects'\nimport useInfrastructure from './useInfrastructure'\n\nexport interface PowerPlantCharacteristics extends Infrastructure {\n  energy?: Resource;\n  currentProduction?: BigNumber;\n  nextProduction?: BigNumber;\n}\n\nconst usePowerPlant = (infrastructure: Infrastructure, planetId: string) => {\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { resources } = useApprovedObjects();\n  const { infrastructure: baseInfra, create, upgrade } = useInfrastructure(infrastructure, planetId);\n  const [loadedPlant, setLoadedPlant] = useState<PowerPlantCharacteristics>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n\n    const PowerPlantInterface = new utils.Interface(PowerPlantABI.abi);\n    return new Contract(infrastructure.address, PowerPlantInterface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n    try {\n      const currentProduction = await contract.currentProduction(planetId);\n      const nextProduction = await contract.nextProduction(planetId);\n      setLoadedPlant({\n        ...baseInfra,\n        energy: resources.find((e) => e.name === \"Energy\")!,\n        currentProduction: currentProduction,\n        nextProduction: nextProduction,\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching resource producer\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, baseInfra, planetId, resources, setLoadedPlant]);\n\n  useEffect(() => {\n    if (!loadedPlant.costsResources || !loadedPlant.nextCosts) fetch();\n  }, [loadedPlant, fetch]);\n\n  return {\n    powerPlant: loadedPlant,\n    fetch,\n    create,\n    upgrade,\n  };\n};\n\nexport default usePowerPlant;\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { Button, Divider, Flex, Stack, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport ResourceBadge from \"components/ResourceBadge\";\nimport { BigNumber } from \"ethers\";\nimport usePowerPlant from \"hooks/usePowerPlant\";\nimport React from \"react\";\n\nimport { Infrastructure, Planet } from \"../../../contexts/Sanctis/types\";\n\nconst PowerPlantCard: React.FC<{ infrastructure: Infrastructure; planet: Planet }> = ({ infrastructure, planet }) => {\n  const { getBlockNumber } = useWallet();\n  const { powerPlant, upgrade } = usePowerPlant(infrastructure, planet.id);\n\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\" shadow={\"xl\"}>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {powerPlant.name}\n      </Text>\n      <Text fontSize=\"md\">{powerPlant.description}</Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Level: {powerPlant.level}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Pending:\n      </Text>\n      {powerPlant.energy && powerPlant.currentProduction && (\n        <Flex direction={\"row\"}>\n          <ResourceBadge resource={powerPlant.energy} amount={BigNumber.from(powerPlant.currentProduction)} size=\"sm\" />\n        </Flex>\n      )}\n      <Divider />\n      <Stack spacing={2} justify={\"center\"}>\n        <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n          Upgrade costs:\n        </Text>\n        <Wrap>\n          {(powerPlant.nextCosts || []).map((cost, i) => (\n            <WrapItem key={powerPlant.costsResources![i].name}>\n              <ResourceBadge resource={powerPlant.costsResources![i]} amount={BigNumber.from(cost)} size=\"sm\" />\n            </WrapItem>\n          ))}\n        </Wrap>\n        <Button\n          rounded={\"full\"}\n          px={6}\n          colorScheme={\"blue\"}\n          onClick={() => upgrade(planet.id)}\n          disabled={getBlockNumber() < powerPlant.nextUpgrade!}\n        >\n          {getBlockNumber() < powerPlant.nextUpgrade!\n            ? `Upgradable in ${powerPlant.nextUpgrade! - getBlockNumber()} blocks`\n            : \"Upgrade\"}\n        </Button>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default PowerPlantCard;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useToast } from '@chakra-ui/react'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { BigNumber, Contract, ethers, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport ResourceProducerABI from '../constants/contracts/IResourceProducer.sol/IResourceProducer.json'\nimport { Infrastructure, Resource } from '../contexts/Sanctis/types'\nimport useApprovedObjects from './useApprovedObjects'\nimport useConfirmationModal from './useConfirmationModal'\nimport useInfrastructure from './useInfrastructure'\nimport useSanctis from './useSanctis'\n\nexport interface ResourceProducerCharacteristics extends Infrastructure {\n  lastHarvest?: number;\n  producedResources?: Resource[];\n  productionPerBlock?: BigNumber[];\n  nextProduction?: BigNumber[];\n}\n\nconst useResourceProducer = (infrastructure: Infrastructure, planetId: string) => {\n  const toast = useToast();\n  const { open } = useConfirmationModal();\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { resources } = useApprovedObjects();\n  const { fetchPlanet } = useSanctis();\n  const { infrastructure: baseInfra, create, upgrade } = useInfrastructure(infrastructure, planetId);\n  const [loadedProducer, setLoadedProducer] = useState<ResourceProducerCharacteristics>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const ResourceProducerInterface = new utils.Interface(ResourceProducerABI.abi);\n    return new Contract(\n      infrastructure.address,\n      ResourceProducerInterface,\n      new providers.Web3Provider(ethereum).getSigner()\n    );\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n\n    try {\n      const lastHarvest = await contract.lastHarvest(planetId);\n      const [producedResources, currentProduction] = await contract.currentProduction(planetId);\n      const [, nextProduction] = await contract.nextProduction(planetId);\n      setLoadedProducer({\n        ...baseInfra,\n        lastHarvest: lastHarvest.toNumber(),\n        producedResources: producedResources.map((e: string) =>\n          resources.find((a) => ethers.utils.getAddress(e) === ethers.utils.getAddress(a.address))\n        ),\n        productionPerBlock: currentProduction.map((e: any) => BigNumber.from(e)),\n        nextProduction: nextProduction,\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching resource producer\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, baseInfra, planetId, resources, setLoadedProducer]);\n\n  useEffect(() => {\n    if (!loadedProducer.costsResources || !loadedProducer.nextCosts) fetch();\n  }, [loadedProducer, fetch]);\n\n  const harvest = useCallback(\n    async (planetId: string) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.harvest(planetId);\n          await result.wait();\n          await fetch();\n          await fetchPlanet(planetId);\n          toast({\n            status: \"success\",\n            title: \"Harvest\",\n            description: `An ${infrastructure.name} has been harvested on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({\n            status: \"error\",\n            title: \"Error\",\n            description: `Failed harvest: ${err.data?.message || err.message}`,\n          });\n        }\n      });\n    },\n    [contract, infrastructure, fetch, fetchPlanet, open, toast]\n  );\n\n  return {\n    producer: loadedProducer,\n    fetch,\n    create,\n    upgrade,\n    harvest,\n  };\n};\n\nexport default useResourceProducer;\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { Button, Divider, Stack, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport ResourceBadge from \"components/ResourceBadge\";\nimport { BigNumber } from \"ethers\";\nimport useResourceProducer from \"hooks/useResourceProducer\";\nimport React from \"react\";\n\nimport { Infrastructure, Planet } from \"../../../contexts/Sanctis/types\";\n\nconst ResourceProducerCard: React.FC<{ infrastructure: Infrastructure; planet: Planet }> = ({\n  infrastructure,\n  planet,\n}) => {\n  const { getBlockNumber } = useWallet();\n  const { producer, upgrade, harvest } = useResourceProducer(infrastructure, planet.id);\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\" shadow={\"xl\"}>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {producer.name}\n      </Text>\n      <Text fontSize=\"md\">{producer.description}</Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Level: {producer.level}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Pending:\n      </Text>\n      <Wrap>\n        {(producer.productionPerBlock || []).map((prod, i) => (\n          <WrapItem key={producer.producedResources![i].name}>\n            <ResourceBadge\n              resource={producer.producedResources![i]}\n              amount={BigNumber.from(prod).mul(Math.max(0, getBlockNumber() - producer.lastHarvest!))}\n              size=\"sm\"\n            />\n          </WrapItem>\n        ))}\n      </Wrap>\n      <Button\n        rounded={\"full\"}\n        px={6}\n        bg={\"blue.400\"}\n        _hover={{ bg: \"blue.500\" }}\n        colorScheme={\"blue\"}\n        onClick={() => harvest(planet.id)}\n        disabled={getBlockNumber() < producer.lastHarvest!}\n      >\n        {getBlockNumber() < producer.lastHarvest!\n          ? `Harvestable in ${producer.lastHarvest! - getBlockNumber()} blocks`\n          : \"Harvest\"}\n      </Button>\n      <Divider />\n      <Stack spacing={2} justify={\"center\"}>\n        <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n          Upgrade costs:\n        </Text>\n        <Wrap>\n          {(producer.nextCosts || []).map((cost, i) => (\n            <WrapItem key={producer.costsResources![i].name}>\n              <ResourceBadge resource={producer.costsResources![i]} amount={BigNumber.from(cost)} size=\"sm\" />\n            </WrapItem>\n          ))}\n        </Wrap>\n        <Button\n          rounded={\"full\"}\n          px={6}\n          colorScheme={\"blue\"}\n          onClick={() => upgrade(planet.id)}\n          disabled={getBlockNumber() < producer.nextUpgrade!}\n        >\n          {getBlockNumber() < producer.nextUpgrade!\n            ? `Upgradable in ${producer.nextUpgrade! - getBlockNumber()} blocks`\n            : \"Upgrade\"}\n        </Button>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default ResourceProducerCard;\n","export default __webpack_public_path__ + \"static/media/chest.c488cb7e.svg\";","export default __webpack_public_path__ + \"static/media/gladius.48d1672b.svg\";","export default __webpack_public_path__ + \"static/media/shield.5ea7eb49.svg\";","export default __webpack_public_path__ + \"static/media/speedometer.a047b5a0.svg\";","import { Flex, Image, Text, Tooltip, useColorModeValue } from '@chakra-ui/react'\nimport React, { useMemo } from 'react'\n\nimport capacity from '../assets/chest.svg'\nimport offense from '../assets/gladius.svg'\nimport defense from '../assets/shield.svg'\nimport speed from '../assets/speedometer.svg'\n\nconst ShipStatBadge: React.FC<{\n  type: \"offense\" | \"defense\" | \"capacity\" | \"speed\";\n  amount?: number;\n}> = ({ type, amount }) => {\n  const name = useMemo(() => {\n    switch (type) {\n      case \"speed\":\n        return \"Speed\";\n      case \"offense\":\n        return \"Attack\";\n      case \"defense\":\n        return \"Defense\";\n      case \"capacity\":\n        return \"Capacity\";\n    }\n  }, [type]);\n\n  const icon = useMemo(() => {\n    switch (type) {\n      case \"speed\":\n        return speed;\n      case \"offense\":\n        return offense;\n      case \"defense\":\n        return defense;\n      case \"capacity\":\n        return capacity;\n      default:\n        return defense;\n    }\n  }, [type]);\n\n  return (\n    <Tooltip label={name}>\n      <Flex\n        w=\"100%\"\n        background={useColorModeValue(\"gray.400\", \"gray.600\")}\n        p=\"1.5\"\n        rounded=\"3xl\"\n        shadow={\"sm\"}\n        align=\"center\"\n      >\n        <Image\n          src={icon}\n          stroke={useColorModeValue(\"black\", \"white\")}\n          background=\"black\"\n          maxW={\"30px\"}\n          maxH={\"30px\"}\n          p={2}\n          rounded=\"full\"\n        />\n        <Flex ml=\"1\">\n          <Text fontWeight=\"bold\" fontSize={\"sm\"} mr={2} textAlign=\"center\" width={\"fit-content\"}>\n            {amount ? amount : \"0\"}\n          </Text>\n        </Flex>\n      </Flex>\n    </Tooltip>\n  );\n};\n\nexport default ShipStatBadge;\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { ExternalProvider } from \"@ethersproject/providers\";\nimport { BigNumber, Contract, ethers, providers, utils } from \"ethers\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport ShipABI from \"../constants/contracts/IShip.sol/IShip.json\";\nimport { Infrastructure, Planet, Resource, Ship } from \"../contexts/Sanctis/types\";\nimport useApprovedObjects from \"./useApprovedObjects\";\n\nexport interface PowerPlantCharacteristics extends Infrastructure {\n  energy?: Resource;\n  currentProduction?: BigNumber;\n  nextProduction?: BigNumber;\n}\n\nconst useShip = (ship: Ship, planet?: Planet) => {\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { resources } = useApprovedObjects();\n  const [loadedShip, setLoadedShip] = useState<Ship>(ship);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n\n    const ShipInterface = new utils.Interface(ShipABI.abi);\n    return new Contract(ship.address, ShipInterface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, ship]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n    try {\n      const [costsResources, costs] = await contract.unitCosts();\n      const speed = await contract.speed();\n      const offensivePower = await contract.offensivePower();\n      const defensivePower = await contract.defensivePower();\n      const capacity = await contract.capacity();\n      const reserve = planet ? (await contract.reserve(planet.id)).toNumber() : 0;\n      setLoadedShip({\n        ...ship,\n        costsResources: costsResources.map((e: string) =>\n          resources.find((a) => ethers.utils.getAddress(e) === ethers.utils.getAddress(a.address))\n        ),\n        costs,\n        speed: speed.toNumber(),\n        offensivePower: offensivePower.toNumber(),\n        defensivePower: defensivePower.toNumber(),\n        capacity: capacity,\n        reserve,\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching ship\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, ship, planet, resources, setLoadedShip]);\n\n  useEffect(() => {\n    if (!loadedShip.costsResources || loadedShip.address !== ship.address) fetch();\n  }, [loadedShip, ship, fetch]);\n\n  return {\n    ship: loadedShip,\n    fetch,\n  };\n};\n\nexport default useShip;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useToast } from '@chakra-ui/react'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { Contract, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport SpatioportABI from '../constants/contracts/ISpatioports.sol/ISpatioports.json'\nimport { Infrastructure, Ship } from '../contexts/Sanctis/types'\nimport useConfirmationModal from './useConfirmationModal'\nimport useInfrastructure from './useInfrastructure'\n\nexport interface SpatioportCharacteristics extends Infrastructure {\n  currentDiscount?: number;\n  nextDiscount?: number;\n  discountFactor?: number;\n}\n\nconst useSpatioport = (infrastructure: Infrastructure, planetId: string) => {\n  const toast = useToast();\n  const { open } = useConfirmationModal();\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { infrastructure: loadedInfrastructure, create, upgrade } = useInfrastructure(infrastructure, planetId);\n  const [spatioport, setSpatioport] = useState<SpatioportCharacteristics>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const SpatioportInterface = new utils.Interface(SpatioportABI.abi);\n    return new Contract(infrastructure.address, SpatioportInterface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n\n    try {\n      const currentDiscount = await contract.currentDiscount(planetId);\n      const nextDiscount = await contract.nextDiscount(planetId);\n      const discountFactor = await contract.discountFactor();\n      setSpatioport({\n        ...loadedInfrastructure,\n        currentDiscount: currentDiscount.toNumber(),\n        nextDiscount: nextDiscount.toNumber(),\n        discountFactor: discountFactor.toNumber(),\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching resource producer\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, loadedInfrastructure, planetId, setSpatioport]);\n\n  useEffect(() => {\n    if (!spatioport.costsResources) fetch();\n  }, [spatioport, fetch]);\n\n  const build: (planetId: string, ship: Ship, quantity: number) => Promise<void> = useCallback(\n    async (planetId, ship, quantity) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.build(planetId, ship.address, quantity);\n          await result.wait();\n          toast({\n            status: \"success\",\n            title: \"Build\",\n            description: `${quantity} ${ship.name} have been built on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({\n            status: \"error\",\n            title: \"Error\",\n            description: `Failed harvest: ${err.data?.message || err.message}`,\n          });\n        }\n      });\n    },\n    [contract, open, toast]\n  );\n\n  return {\n    spatioport,\n    fetch,\n    create,\n    upgrade,\n    build,\n  };\n};\n\nexport default useSpatioport;\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { Button, Divider, Flex, Input, Select, Stack, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport ResourceBadge from \"components/ResourceBadge\";\nimport { BigNumber, ethers } from \"ethers\";\nimport React, { useState } from \"react\";\n\nimport ShipStatBadge from \"../../../components/ShipStatBadge\";\nimport { Infrastructure, Planet, Ship } from \"../../../contexts/Sanctis/types\";\nimport useApprovedObjects from \"../../../hooks/useApprovedObjects\";\nimport useShip from \"../../../hooks/useShip\";\nimport useSpatioport from \"../../../hooks/useSpatioport\";\n\nconst SpatioportCard: React.FC<{ infrastructure: Infrastructure; planet: Planet }> = ({ infrastructure, planet }) => {\n  const { ships } = useApprovedObjects();\n  const { getBlockNumber } = useWallet();\n  const { spatioport, upgrade, build } = useSpatioport(infrastructure, planet.id);\n  const [choice, setChoice] = useState<Ship>(ships[0]);\n  const { ship } = useShip(choice);\n  const [quantity, setQuantity] = useState<number>(0);\n\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\" shadow={\"xl\"}>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {infrastructure.name}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {infrastructure.description}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n        Level: {infrastructure.level}\n      </Text>\n      <Select onChange={(e) => setChoice(JSON.parse(e.target.value))}>\n        {ships.map((e) => (\n          <option key={e.address} value={JSON.stringify(e)}>\n            {e.name}\n          </option>\n        ))}\n      </Select>\n      <Input\n        type=\"number\"\n        placeholder=\"Number of ships to build...\"\n        onChange={(e) => setQuantity(Number(e.target.value))}\n      />\n      <Text fontSize=\"md\" textAlign=\"start\">\n        Ship statistics:\n      </Text>\n      <Flex>\n        <ShipStatBadge type=\"speed\" amount={ship.speed} />\n        <ShipStatBadge type=\"offense\" amount={ship.offensivePower} />\n        <ShipStatBadge type=\"defense\" amount={ship.defensivePower} />\n        <ShipStatBadge type=\"capacity\" amount={Number(ethers.utils.formatEther(ship.capacity || 0))} />\n      </Flex>\n      <Text fontSize=\"md\" textAlign=\"start\">\n        Costs per ship:\n      </Text>\n      <Wrap>\n        {ship.costsResources?.map((resource, i) => (\n          <WrapItem key={resource.name}>\n            <ResourceBadge resource={resource} amount={ship.costs![i]} size=\"sm\" />\n          </WrapItem>\n        ))}\n      </Wrap>\n      <Button\n        rounded={\"full\"}\n        px={6}\n        colorScheme={\"blue\"}\n        bg={useColorModeValue(\"gray.300\", \"gray.500\")}\n        _hover={{ bg: useColorModeValue(\"gray.400\", \"gray.400\") }}\n        onClick={() => build(planet.id, choice, quantity)}\n        disabled={!quantity}\n      >\n        Build\n      </Button>\n      <Divider />\n      <Stack spacing={2} justify={\"center\"}>\n        <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n          Upgrade costs:\n        </Text>\n        <Wrap>\n          {(spatioport.nextCosts || []).map((cost, i) => (\n            <WrapItem key={spatioport.costsResources![i].name}>\n              <ResourceBadge resource={spatioport.costsResources![i]} amount={BigNumber.from(cost)} size=\"sm\" />\n            </WrapItem>\n          ))}\n        </Wrap>\n        <Button\n          rounded={\"full\"}\n          px={6}\n          colorScheme={\"blue\"}\n          onClick={() => upgrade(planet.id)}\n          disabled={getBlockNumber() < spatioport.nextUpgrade!}\n        >\n          {getBlockNumber() < spatioport.nextUpgrade!\n            ? `Upgradable in ${spatioport.nextUpgrade! - getBlockNumber()} blocks`\n            : \"Upgrade\"}\n        </Button>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default SpatioportCard;\n","import {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Divider,\r\n  Flex,\r\n  Text,\r\n  useColorModeValue,\r\n  Wrap,\r\n  WrapItem,\r\n} from \"@chakra-ui/react\";\r\nimport React, { ReactChild, useMemo } from \"react\";\r\n\r\nimport deployedAddresses from \"../../constants\";\r\nimport DocumentationButton from \"../../contexts/DocumentationButton\";\r\nimport { Planet } from \"../../contexts/Sanctis/types\";\r\nimport useChainPicker from \"../../hooks/useChainPicker\";\r\nimport CreateInfrastuctureCard from \"./infrastructures/CreateInfrastructureCard\";\r\nimport PowerPlantCard from \"./infrastructures/PowerPlantCard\";\r\nimport ResourceProducerCard from \"./infrastructures/ResourceProducerCard\";\r\nimport SpatioportCard from \"./infrastructures/SpatioportCard\";\r\n\r\nconst InfrastructuresSection: React.FC<{ planet: Planet }> = ({ planet }) => {\r\n  const { chainId } = useChainPicker();\r\n\r\n  const infrastructureCards = useMemo(() => {\r\n    return (\r\n      planet &&\r\n      planet.infrastructures &&\r\n      Object.values(planet.infrastructures)\r\n        .filter((e: any) => e.level !== 0)\r\n        .map((e) => {\r\n          let card: ReactChild;\r\n\r\n          const resourceProducers = [\r\n            deployedAddresses[chainId].ironMines,\r\n            deployedAddresses[chainId].siliconFurnaces,\r\n            deployedAddresses[chainId].heavyWaterPlants,\r\n          ];\r\n          const powerPlants = [deployedAddresses[chainId].solarPanels, deployedAddresses[chainId].fusionReactors];\r\n\r\n          if (resourceProducers.includes(e.address)) {\r\n            card = <ResourceProducerCard planet={planet} infrastructure={e} />;\r\n          } else if (powerPlants.includes(e.address)) {\r\n            card = <PowerPlantCard planet={planet} infrastructure={e} />;\r\n          } else if (e.address === deployedAddresses[chainId].spatioports) {\r\n            card = <SpatioportCard planet={planet} infrastructure={e} />;\r\n          } else {\r\n            card = <Text>Unknown infrastructure</Text>;\r\n          }\r\n          return <WrapItem key={e.name}>{card}</WrapItem>;\r\n        })\r\n    );\r\n  }, [chainId, planet]);\r\n\r\n  return (\r\n    <AccordionItem>\r\n      <Flex\r\n        direction={\"column\"}\r\n        textAlign={\"center\"}\r\n        align={\"center\"}\r\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\r\n        m={2}\r\n        p={3}\r\n        rounded=\"lg\"\r\n        shadow=\"2xl\"\r\n        boxShadow=\"inner\"\r\n      >\r\n        <AccordionButton justifyContent=\"center\">\r\n          <DocumentationButton href=\"https://docs.sanctis.xyz/sections/game/infrastructures\" />\r\n          <Text margin=\"auto\" fontSize=\"xl\" fontWeight=\"bold\" mb=\"3\">\r\n            Planet's infrastructures\r\n          </Text>\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n        <AccordionPanel>\r\n          <Wrap justify={\"center\"} m={2}>\r\n            {infrastructureCards}\r\n          </Wrap>\r\n          <Divider mt={7} />\r\n          <Flex justify={\"center\"} m={5}>\r\n            <CreateInfrastuctureCard planet={planet} />\r\n          </Flex>\r\n        </AccordionPanel>\r\n      </Flex>\r\n    </AccordionItem>\r\n  );\r\n};\r\n\r\nexport default InfrastructuresSection;\r\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { ExternalProvider } from \"@ethersproject/providers\";\r\nimport { BigNumber, Contract, ethers, providers, utils } from \"ethers\";\r\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport deployedAddresses from \"../constants\";\r\n\r\nimport FleetsABI from \"../constants/contracts/IFleets.sol/IFleets.json\";\r\nimport { Commander, Fleet, FleetStatus, Planet, Reserve, Resource, Ship } from \"../contexts/Sanctis/types\";\r\nimport useApprovedObjects from \"./useApprovedObjects\";\r\nimport useChainPicker from \"./useChainPicker\";\r\nimport useConfirmationModal from \"./useConfirmationModal\";\r\nimport useSanctis from \"./useSanctis\";\r\n\r\nconst useFleets = (planetId?: string) => {\r\n  const toast = useToast();\r\n  const { open } = useConfirmationModal();\r\n  const { chainId } = useChainPicker();\r\n  const { ethereum } = useWallet<ExternalProvider>();\r\n  const { fetchPlanet } = useSanctis();\r\n  const { ships: approvedShips, resources: approvedResources } = useApprovedObjects();\r\n  const [fleets, setFleets] = useState<Fleet[]>();\r\n  const [isFetching, setIsFetching] = useState<boolean>(false);\r\n\r\n  const contract = useMemo(() => {\r\n    if (!ethereum) return;\r\n    const FleetInterface = new utils.Interface(FleetsABI.abi);\r\n    return new Contract(\r\n      deployedAddresses[chainId].fleets,\r\n      FleetInterface,\r\n      new providers.Web3Provider(ethereum).getSigner()\r\n    );\r\n  }, [ethereum, chainId]);\r\n\r\n  const fetch = useCallback(\r\n    async (fleetId: BigNumber) => {\r\n      if (!contract) return;\r\n\r\n      const {\r\n        commander,\r\n        fromPlanetId,\r\n        toPlanetId,\r\n        totalSpeed,\r\n        totalOffensivePower,\r\n        totalDefensivePower,\r\n        capacity,\r\n        ships,\r\n        arrivalBlock,\r\n        status,\r\n      } = await contract.fleet(fleetId);\r\n      const fromPlanet = await fetchPlanet(fromPlanetId);\r\n      const toPlanet = await fetchPlanet(toPlanetId);\r\n\r\n      const fleetStatus = (id: number) => {\r\n        switch (id) {\r\n          default:\r\n            return FleetStatus.Preparing;\r\n          case 0:\r\n            return FleetStatus.Preparing;\r\n          case 1:\r\n            return FleetStatus.Orbitting;\r\n          case 2:\r\n            return FleetStatus.Travelling;\r\n        }\r\n      };\r\n\r\n      const shipsInFleet: { [address: string]: number } = {};\r\n      await Promise.all(\r\n        approvedShips.map(async (ship) => {\r\n          shipsInFleet[ship.address] = (await contract.shipsInFleet(ship.address, fleetId)).toNumber();\r\n        })\r\n      );\r\n\r\n      const resourcesInFleet: Reserve[] = [];\r\n      await Promise.all(\r\n        approvedResources.map(async (resource) => {\r\n          resourcesInFleet.push({ resource: resource, amount: await contract.shipsInFleet(resource.address, fleetId) });\r\n        })\r\n      );\r\n\r\n      return {\r\n        id: fleetId.toString(),\r\n        commander,\r\n        fromPlanet: fromPlanet || undefined,\r\n        toPlanet: toPlanet || undefined,\r\n        totalSpeed,\r\n        totalOffensivePower,\r\n        totalDefensivePower,\r\n        capacity,\r\n        ships,\r\n        arrivalBlock: arrivalBlock.toNumber(),\r\n        status: fleetStatus(status.toNumber()),\r\n        shipsInFleet: shipsInFleet,\r\n        resources: resourcesInFleet,\r\n      };\r\n    },\r\n    [approvedResources, approvedShips, contract, fetchPlanet]\r\n  );\r\n\r\n  const fetchPlanetFleets = useCallback(\r\n    async (planetId?: string) => {\r\n      if (!contract || isFetching) return;\r\n      setIsFetching(true);\r\n\r\n      const fleetsOnPlanet = await contract.fleetsOnPlanet(planetId);\r\n\r\n      const fleets: Fleet[] = await Promise.all(\r\n        Array(fleetsOnPlanet.toNumber())\r\n          .fill(0)\r\n          .map(async (_, i) => (await fetch(await contract.fleetOnPlanetByIndex(planetId, i)))!)\r\n      );\r\n\r\n      // Assign it to the planets fleets\r\n      setFleets(fleets.filter(Boolean));\r\n      setIsFetching(false);\r\n    },\r\n    [isFetching, contract, fetch]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!fleets && planetId) fetchPlanetFleets(planetId);\r\n  }, [fleets, planetId, fetchPlanetFleets]);\r\n\r\n  const create = useCallback(\r\n    async (commander: Commander, planetId: string) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.createFleet(commander.id, planetId);\r\n          await result.wait();\r\n          await fetchPlanetFleets(planetId);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Creation\",\r\n            description: `A fleet has been created on Planet ${planetId}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed creation: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const move = useCallback(\r\n    async (fleet: Fleet, to: Planet) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.moveFleet(fleet.id, to.id);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Creation\",\r\n            description: `A fleet has been created on Planet ${fleet.fromPlanet?.id}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed creation: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const addToFleet = useCallback(\r\n    async (fleet: Fleet, ship: Ship, quantity: number) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.addToFleet(fleet.id, ship.address, quantity);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Add to fleet\",\r\n            description: `${quantity} ${ship.name} have been added to fleet ${fleet.id}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed adding: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const removeFromFleet = useCallback(\r\n    async (fleet: Fleet, ship: Ship, quantity: number) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.removeFromFleet(fleet.id, ship.address, quantity);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Remove from fleet\",\r\n            description: `${quantity} ${ship.name} have been removed from fleet ${fleet.id}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed removing: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const putInOrbit = useCallback(\r\n    async (fleet: Fleet) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.putInOrbit(fleet.id);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Put in orbit\",\r\n            description: `Fleet ${fleet.id} has been put in orbit`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed putting in orbit: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const land = useCallback(\r\n    async (fleet: Fleet) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.land(fleet.id);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Landing\",\r\n            description: `Fleet ${fleet.id} has landed`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed landing: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const loadResource = useCallback(\r\n    async (fleet: Fleet, resource: Resource, quantity: BigNumber) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.load(fleet.id, resource.address, quantity);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          await fetchPlanet(fleet.fromPlanet!.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Loaded\",\r\n            description: `Fleet ${fleet.id} loaded ${ethers.utils.formatEther(quantity)} ${resource.name}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed loading: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, fetchPlanet, open, toast]\r\n  );\r\n\r\n  const unloadResource = useCallback(\r\n    async (fleet: Fleet, resource: Resource, quantity: BigNumber) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.unload(fleet.id, resource.address, quantity);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          await fetchPlanet(fleet.fromPlanet!.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Unloaded\",\r\n            description: `Fleet ${fleet.id} unloaded ${ethers.utils.formatEther(quantity)} ${resource.name}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed unloading: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, fetchPlanet, open, toast]\r\n  );\r\n\r\n  return {\r\n    fleets,\r\n    create,\r\n    move,\r\n    addToFleet,\r\n    removeFromFleet,\r\n    putInOrbit,\r\n    land,\r\n    loadResource,\r\n    unloadResource,\r\n  };\r\n};\r\n\r\nexport default useFleets;\r\n","import {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Button,\r\n  Input,\r\n  Select,\r\n  Stack,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { Fleet, Ship } from \"../../../contexts/Sanctis/types\";\r\nimport useApprovedObjects from \"../../../hooks/useApprovedObjects\";\r\nimport useFleets from \"../../../hooks/useFleets\";\r\nimport useShip from \"../../../hooks/useShip\";\r\n\r\nconst AddToFleetItem: React.FC<{ fleet: Fleet }> = ({ fleet }) => {\r\n  const { ships } = useApprovedObjects();\r\n  const { addToFleet } = useFleets();\r\n  const [choice, setChoice] = useState<Ship>(ships[0]);\r\n  const [quantity, setQuantity] = useState<number>();\r\n  const { ship } = useShip(choice, fleet.fromPlanet);\r\n\r\n  return (\r\n    <AccordionItem>\r\n      <AccordionButton justifyContent=\"center\">\r\n        <Text margin=\"auto\" fontSize=\"lg\">\r\n          Add ships to the fleet\r\n        </Text>\r\n        <AccordionIcon />\r\n      </AccordionButton>\r\n      <AccordionPanel>\r\n        <Stack spacing={1}>\r\n          <Select onChange={(e) => setChoice(JSON.parse(e.target.value))}>\r\n            {ships\r\n              .filter((e) => (e.reserve || 0) > 0)\r\n              .map((ship) => (\r\n                <option key={ship.name} value={JSON.stringify(ship)}>\r\n                  {ship.name}\r\n                </option>\r\n              ))}\r\n          </Select>\r\n          <Input\r\n            type=\"number\"\r\n            max={ship.reserve}\r\n            value={quantity || 0}\r\n            onChange={(e) => setQuantity(Math.min(Number(e.target.value), ship.reserve || 0))}\r\n          />\r\n          <Button disabled={!quantity} onClick={() => addToFleet(fleet, choice, quantity!)}>\r\n            Add to fleet\r\n          </Button>\r\n        </Stack>\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n\r\nexport default AddToFleetItem;\r\n","import {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Button,\r\n  Input,\r\n  Select,\r\n  Stack,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { BigNumber } from \"ethers\";\r\nimport React, { useMemo, useState } from \"react\";\r\nimport { BiArrowFromLeft, BiPlanet } from \"react-icons/bi\";\r\nimport { FaSpaceShuttle } from \"react-icons/fa\";\r\n\r\nimport { Fleet, Resource } from \"../../../contexts/Sanctis/types\";\r\nimport useFleets from \"../../../hooks/useFleets\";\r\n\r\nconst LoadResourceItem: React.FC<{ fleet: Fleet }> = ({ fleet }) => {\r\n  const { loadResource } = useFleets();\r\n  const choices = useMemo(() => {\r\n    return fleet.fromPlanet?.reserves.filter((e) => e.amount.gt(0) && e.resource.name !== \"Energy\") || [];\r\n  }, [fleet.fromPlanet]);\r\n  const [choice, setChoice] = useState<Resource | undefined>(choices.length > 0 ? choices[0].resource : undefined);\r\n  const [quantity, setQuantity] = useState<number>();\r\n\r\n  console.log(\r\n    fleet.fromPlanet?.reserves,\r\n    fleet.fromPlanet?.reserves.filter((e) => e.amount.gt(0) && e.resource.name !== \"Energy\")\r\n  );\r\n\r\n  return (\r\n    <AccordionItem>\r\n      <AccordionButton justifyContent=\"center\">\r\n        <Text margin=\"auto\" fontSize=\"lg\">\r\n          Load resources\r\n        </Text>\r\n        <BiPlanet /> <BiArrowFromLeft /> <FaSpaceShuttle />\r\n        <AccordionIcon />\r\n      </AccordionButton>\r\n      <AccordionPanel>\r\n        <Stack spacing={2}>\r\n          <Select onChange={(e) => setChoice(JSON.parse(e.target.value))}>\r\n            {choices.map((e) => (\r\n              <option key={e.resource.name} value={JSON.stringify(e)}>\r\n                {e.resource.name}\r\n              </option>\r\n            ))}\r\n          </Select>\r\n          <Input placeholder=\"Quantity\" type=\"number\" onChange={(e) => setQuantity(Number(e.target.value))} />\r\n          <Button\r\n            px={6}\r\n            disabled={!choice}\r\n            onClick={() => loadResource(fleet, choice!, BigNumber.from(quantity).mul(10 ** 18))}\r\n          >\r\n            Load\r\n          </Button>\r\n        </Stack>\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n\r\nexport default LoadResourceItem;\r\n","import {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Button,\r\n  Input,\r\n  Select,\r\n  Stack,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { Fleet, Ship } from \"../../../contexts/Sanctis/types\";\r\nimport useApprovedObjects from \"../../../hooks/useApprovedObjects\";\r\nimport useFleets from \"../../../hooks/useFleets\";\r\nimport useShip from \"../../../hooks/useShip\";\r\n\r\nconst RemoveFromFleetItem: React.FC<{ fleet: Fleet }> = ({ fleet }) => {\r\n  const { ships } = useApprovedObjects();\r\n  const { ships: approvedShips } = useApprovedObjects();\r\n  const { removeFromFleet } = useFleets();\r\n  const [choice, setChoice] = useState<Ship>(ships[0]);\r\n  const [quantity, setQuantity] = useState<number>();\r\n  const { ship } = useShip(choice, fleet.fromPlanet);\r\n\r\n  return (\r\n    <AccordionItem>\r\n      <AccordionButton justifyContent=\"center\">\r\n        <Text margin=\"auto\" fontSize=\"lg\">\r\n          Remove ships from the fleet\r\n        </Text>\r\n        <AccordionIcon />\r\n      </AccordionButton>\r\n      <AccordionPanel>\r\n        <Stack spacing={1}>\r\n          <Select onChange={(e) => setChoice(JSON.parse(e.target.value))}>\r\n            {approvedShips\r\n              .filter((e) => fleet.shipsInFleet[e.address] > 0)\r\n              .map((ship) => (\r\n                <option key={ship.name} value={JSON.stringify(ship)}>\r\n                  {ship.name}\r\n                </option>\r\n              ))}\r\n          </Select>\r\n          <Input\r\n            type=\"number\"\r\n            max={ship.reserve}\r\n            value={quantity || 0}\r\n            onChange={(e) => setQuantity(Math.min(Number(e.target.value), fleet.shipsInFleet[choice.address] || 0))}\r\n          />\r\n          <Button disabled={!quantity} onClick={() => removeFromFleet(fleet, choice, quantity!)}>\r\n            Remove from fleet\r\n          </Button>\r\n        </Stack>\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n\r\nexport default RemoveFromFleetItem;\r\n","import {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Button,\r\n  Input,\r\n  Select,\r\n  Stack,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { BigNumber } from \"ethers\";\r\nimport React, { useState } from \"react\";\r\nimport { BiArrowFromLeft, BiPlanet } from \"react-icons/bi\";\r\nimport { FaSpaceShuttle } from \"react-icons/fa\";\r\n\r\nimport { Fleet, Resource } from \"../../../contexts/Sanctis/types\";\r\nimport useFleets from \"../../../hooks/useFleets\";\r\n\r\nconst UnloadResourceItem: React.FC<{ fleet: Fleet }> = ({ fleet }) => {\r\n  const { unloadResource } = useFleets();\r\n  const [choice, setChoice] = useState<Resource>();\r\n  const [quantity, setQuantity] = useState<number>();\r\n\r\n  return (\r\n    <AccordionItem>\r\n      <AccordionButton justifyContent=\"center\">\r\n        <Text margin=\"auto\" fontSize=\"lg\">\r\n          Unload resources\r\n        </Text>\r\n        <FaSpaceShuttle /> <BiArrowFromLeft /> <BiPlanet />\r\n        <AccordionIcon />\r\n      </AccordionButton>\r\n      <AccordionPanel>\r\n        <Stack spacing={2}>\r\n          <Select onChange={(e) => setChoice(JSON.parse(e.target.value))}>\r\n            {fleet.resources\r\n              .filter((e) => e.amount.gt(0))\r\n              .map((e) => (\r\n                <option key={e.resource.name} value={JSON.stringify(e)}>\r\n                  {e.resource.name}\r\n                </option>\r\n              ))}\r\n          </Select>\r\n          <Input placeholder=\"Quantity\" type=\"number\" onChange={(e) => setQuantity(Number(e.target.value))} />\r\n          <Button\r\n            disabled={!choice}\r\n            onClick={() => unloadResource(fleet, choice!, BigNumber.from(quantity).mul(10 ** 18))}\r\n          >\r\n            Unload\r\n          </Button>\r\n        </Stack>\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n\r\nexport default UnloadResourceItem;\r\n","import {\r\n  Accordion,\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  HStack,\r\n  Input,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport { ethers } from \"ethers\";\r\nimport React from \"react\";\r\nimport ResourceBadge from \"../../../components/ResourceBadge\";\r\nimport ShipStatBadge from \"../../../components/ShipStatBadge\";\r\n\r\nimport { Fleet, FleetStatus } from \"../../../contexts/Sanctis/types\";\r\nimport useFleets from \"../../../hooks/useFleets\";\r\nimport useSanctis from \"../../../hooks/useSanctis\";\r\nimport AddToFleetItem from \"./AddToFleetItem\";\r\nimport LoadResourceItem from \"./LoadResourceItem\";\r\nimport RemoveFromFleetItem from \"./RemoveFromFleetItem\";\r\nimport UnloadResourceItem from \"./UnloadResourceItem copy\";\r\n\r\nconst FleetCard: React.FC<{ fleet: Fleet }> = ({ fleet }) => {\r\n  const { currentCommander } = useSanctis();\r\n  const { move, putInOrbit, land } = useFleets();\r\n\r\n  return (\r\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\" shadow={\"xl\"} minW={80}>\r\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\r\n        Fleet ID: {fleet.id}\r\n      </Text>\r\n      <Text textAlign=\"start\">Controller: {fleet.commander.toString()}</Text>\r\n      <Text textAlign=\"start\">Status: {fleet.status}</Text>\r\n      <Text textAlign=\"start\">Fleet's statistics:</Text>\r\n      <Flex w=\"100%\">\r\n        <ShipStatBadge type=\"speed\" amount={fleet.totalSpeed.toNumber()} />\r\n        <ShipStatBadge type=\"offense\" amount={fleet.totalOffensivePower.toNumber()} />\r\n        <ShipStatBadge type=\"defense\" amount={fleet.totalDefensivePower.toNumber()} />\r\n        <ShipStatBadge type=\"capacity\" amount={Number(ethers.utils.formatEther(fleet.capacity || 0))} />\r\n      </Flex>\r\n      {Object.values(fleet.resources).filter((e) => e.amount.gt(0)).length > 0 && (\r\n        <Stack>\r\n          <Text textAlign=\"start\">Fleet's resources:</Text>\r\n          <Flex w=\"100%\">\r\n            {fleet.resources\r\n              .filter((e) => e.amount.gt(0))\r\n              .map((e) => (\r\n                <ResourceBadge resource={e.resource} amount={e.amount} />\r\n              ))}\r\n          </Flex>\r\n        </Stack>\r\n      )}\r\n      {fleet.commander.toString() === currentCommander?.id && (\r\n        <>\r\n          <Divider />\r\n          <Text fontWeight=\"bold\" fontSize=\"xl\">\r\n            Actions\r\n          </Text>\r\n          <Accordion allowMultiple allowToggle>\r\n            {fleet.status === FleetStatus.Preparing && (\r\n              <>\r\n                <AddToFleetItem fleet={fleet} />\r\n                <RemoveFromFleetItem fleet={fleet} />\r\n                <LoadResourceItem fleet={fleet} />\r\n                <UnloadResourceItem fleet={fleet} />\r\n                <AccordionItem>\r\n                  <AccordionButton justifyContent=\"center\">\r\n                    <Text margin=\"auto\" fontSize=\"lg\">\r\n                      Move\r\n                    </Text>\r\n                    <AccordionIcon />\r\n                  </AccordionButton>\r\n                  <AccordionPanel>\r\n                    <Button rounded={\"full\"} px={6} colorScheme={\"blue\"} onClick={() => putInOrbit(fleet)}>\r\n                      Put in orbit\r\n                    </Button>\r\n                  </AccordionPanel>\r\n                </AccordionItem>\r\n              </>\r\n            )}\r\n            {fleet.status === FleetStatus.Orbitting && (\r\n              <>\r\n                <LoadResourceItem fleet={fleet} />\r\n                <UnloadResourceItem fleet={fleet} />\r\n                <AccordionItem>\r\n                  <AccordionButton justifyContent=\"center\">\r\n                    <Text margin=\"auto\" fontSize=\"lg\">\r\n                      Move\r\n                    </Text>\r\n                    <AccordionIcon />\r\n                  </AccordionButton>\r\n                  <AccordionPanel>\r\n                    <Button rounded={\"full\"} px={6} colorScheme={\"blue\"} onClick={() => land(fleet)}>\r\n                      Land\r\n                    </Button>\r\n                    <Stack p={3} border=\"solid\" rounded=\"xl\">\r\n                      <Text>Send the fleet to another planet</Text>\r\n                      <HStack spacing={1} justify=\"center\">\r\n                        <Input placeholder=\"X...\" maxW={20} />\r\n                        <Input placeholder=\"Y...\" maxW={20} />\r\n                        <Input placeholder=\"Z...\" maxW={20} />\r\n                      </HStack>\r\n                      <Button rounded={\"full\"} px={6} colorScheme={\"blue\"} onClick={() => move(fleet, fleet.toPlanet!)}>\r\n                        Move\r\n                      </Button>\r\n                    </Stack>\r\n                  </AccordionPanel>\r\n                </AccordionItem>\r\n              </>\r\n            )}\r\n          </Accordion>\r\n        </>\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default FleetCard;\r\n","import {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n  Wrap,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport DocumentationButton from \"../../contexts/DocumentationButton\";\r\nimport { Planet } from \"../../contexts/Sanctis/types\";\r\n\r\nimport useFleets from \"../../hooks/useFleets\";\r\nimport useSanctis from \"../../hooks/useSanctis\";\r\nimport FleetCard from \"./fleets/FleetCard\";\r\n\r\nconst FleetsSection: React.FC<{ planet: Planet }> = ({ planet }) => {\r\n  const { currentCommander } = useSanctis();\r\n  const { fleets, create } = useFleets(planet?.id);\r\n\r\n  return (\r\n    <AccordionItem w=\"100%\">\r\n      <Flex\r\n        direction={\"column\"}\r\n        textAlign={\"center\"}\r\n        align={\"center\"}\r\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\r\n        m={2}\r\n        p={3}\r\n        rounded=\"lg\"\r\n        shadow=\"2xl\"\r\n        boxShadow=\"inner\"\r\n      >\r\n        <AccordionButton justifyContent=\"center\">\r\n          <DocumentationButton href=\"https://docs.sanctis.xyz/sections/game/fleets\" />\r\n          <Text margin=\"auto\" fontSize=\"xl\" fontWeight=\"bold\" mb=\"3\">\r\n            Planet's fleets\r\n          </Text>\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n        <AccordionPanel>\r\n          <Stack spacing={4}>\r\n            <Wrap justify={\"center\"} m={2}>\r\n              {fleets && fleets.length > 0 ? (\r\n                fleets.map((fleet) => <FleetCard key={fleet.id} fleet={fleet} />)\r\n              ) : (\r\n                <Text>There are no fleets on this planet</Text>\r\n              )}\r\n            </Wrap>\r\n            {currentCommander && currentCommander?.id === planet.ruler && (\r\n              <>\r\n                <Divider mt={7} w=\"100%\" />\r\n                <Flex justify={\"center\"} mt={5}>\r\n                  <Button onClick={() => create(currentCommander, planet.id)}>Create a new fleet</Button>\r\n                </Flex>\r\n              </>\r\n            )}\r\n          </Stack>\r\n        </AccordionPanel>\r\n      </Flex>\r\n    </AccordionItem>\r\n  );\r\n};\r\n\r\nexport default FleetsSection;\r\n","import { Accordion, Box, Button, Link, useColorModeValue } from \"@chakra-ui/react\";\r\nimport usePlanet from \"hooks/usePlanet\";\r\nimport React from \"react\";\r\nimport { BiArrowBack } from \"react-icons/bi\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport ReservesSection from \"./ReservesSection\";\r\nimport InfrastructuresSection from \"./InfrastructuresSection\";\r\nimport FleetsSection from \"./FleetsSection\";\r\n\r\nconst Planet: React.FC = () => {\r\n  const { id } = useParams();\r\n  const planet = usePlanet(id);\r\n\r\n  const sections = planet ? (\r\n    <>\r\n      <ReservesSection planet={planet} />\r\n      <InfrastructuresSection planet={planet} />\r\n      <FleetsSection planet={planet} />\r\n    </>\r\n  ) : null;\r\n\r\n  return (\r\n    <Box w=\"100%\">\r\n      <Button\r\n        rightIcon={<BiArrowBack />}\r\n        as={Link}\r\n        href={planet ? `#/commander/` + planet?.ruler : \"#/commanders\"}\r\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\r\n        mb={3}\r\n      >\r\n        Back\r\n      </Button>\r\n      <Accordion allowMultiple allowToggle>\r\n        {sections}\r\n      </Accordion>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Planet;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Link,\r\n  List,\r\n  ListIcon,\r\n  ListItem,\r\n  Spinner,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { planetIdToCoordinate } from \"utils\";\r\nimport useSanctis from \"../../hooks/useSanctis\";\r\nimport { Commander } from \"../../contexts/Sanctis/types\";\r\nimport { BiPlanet } from \"react-icons/bi\";\r\n\r\nconst CommanderCard: React.FC<{ commander: Commander }> = ({ commander }) => {\r\n  const { currentCommander, setCurrentCommander } = useSanctis();\r\n\r\n  return (\r\n    <Container maxW={\"5xl\"}>\r\n      <Stack spacing={6} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\r\n        {commander ? (\r\n          <Box alignContent={\"flex-start\"}>\r\n            <Text fontWeight=\"bold\" fontSize=\"2xl\">\r\n              {commander.name}\r\n            </Text>\r\n            <Text fontWeight=\"bold\" fontSize=\"lg\">\r\n              {commander.race?.name}\r\n            </Text>\r\n            <Box textAlign={\"start\"}>\r\n              {!commander.planets || commander.planets.length === 0 ? (\r\n                <Text my=\"3\">This commander has no planet</Text>\r\n              ) : (\r\n                <>\r\n                  <Text fontSize=\"xl\">Planets:</Text>\r\n                  <List>\r\n                    {commander.planets.map((planet, i) => (\r\n                      <ListItem key={planet + i}>\r\n                        <ListIcon as={BiPlanet} fontSize=\"2xl\" />\r\n                        <Link href={`/planet/${planet}`}>{planetIdToCoordinate(planet)}</Link>\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </>\r\n              )}\r\n            </Box>\r\n            <Button\r\n              rounded={\"full\"}\r\n              m={4}\r\n              px={6}\r\n              colorScheme={\"blue\"}\r\n              bg={\"blue.400\"}\r\n              _hover={{ bg: \"blue.500\" }}\r\n              as={Link}\r\n              href={`#/commander/${commander.id}`}\r\n              onClick={() => setCurrentCommander(commander)}\r\n            >\r\n              {currentCommander?.name !== commander.name\r\n                ? `Play as ${commander.name}`\r\n                : `Already playing ${commander.name}`}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"xl\" />\r\n        )}\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CommanderCard;\r\n","import React, { ChangeEvent, useCallback, useState } from \"react\";\nimport { Button, Input, Select, Stack, Text, useColorModeValue } from \"@chakra-ui/react\";\n\nimport { Race } from \"../../contexts/Sanctis/types\";\nimport useCommanders from \"../../hooks/useSanctis\";\nimport useApprovedObjects from \"hooks/useApprovedObjects\";\n\nconst CreateCommanderCard: React.FC = () => {\n  const { races } = useApprovedObjects()\n  const { createCommander } = useCommanders()\n  const [name, setName] = useState<string>()\n  const [race, setRace] = useState<Race>(races[0])\n\n  const handleSelect = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\n    setRace(JSON.parse(e.target.value))\n  }, [setRace])\n\n  const handleName = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  }, [setName])\n\n  const handleCreate = useCallback(async () => {\n    if (!race || !name) return\n\n    await createCommander(name, race)\n  }, [race, name, createCommander])\n\n  return (\n    <Stack spacing={6} background={useColorModeValue('white', 'gray.800')} p=\"5\" rounded=\"xl\">\n      <Text fontWeight=\"bold\" fontSize=\"xl\">Create a Commander</Text>\n      <Input placeholder=\"Commander's name\" onChange={handleName} />\n      <Select onChange={handleSelect}>\n        {races.map((race) => <option key={race.name} value={JSON.stringify(race)}>{race.name}</option>)}\n      </Select>\n      <Button\n        rounded={\"full\"}\n        px={6}\n        colorScheme={\"blue\"}\n        bg={\"blue.400\"}\n        _hover={{ bg: \"blue.500\" }}\n        disabled={!name || !!name.match(/[^A-Za-z0-9 ]/) }\n        onClick={handleCreate}\n      >\n        Create commander\n      </Button>\n    </Stack>\n  );\n};\n\nexport default CreateCommanderCard;\n","import { Box, Container, Stack, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport useCommanders from \"../../hooks/useSanctis\";\nimport CommanderCard from \"./CommanderCard\";\nimport CreateCommanderCard from \"./CreateCommanderCard\";\n\nconst Commanders: React.FC = () => {\n  const { ownedCommanders } = useCommanders();\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Stack textAlign={\"center\"} align={\"center\"} spacing={{ base: 8, md: 10 }}>\n        {ownedCommanders && ownedCommanders.length > 0 && (\n          <Wrap>\n            {ownedCommanders.map((commander, i) => (\n              <WrapItem key={`${commander.id}-${i}`}>\n                <CommanderCard commander={commander} />\n              </WrapItem>\n            ))}\n          </Wrap>\n        )}\n        <Box background={useColorModeValue(\"white\", \"gray.800\")} p=\"3\" rounded=\"xl\">\n          A commander is free to create and you can have as many as you want. However, the game is designed to encourage\n          players to have few commanders with a big empire rather than many commanders with smaller empires.\n        </Box>\n        <CreateCommanderCard />\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Commanders;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { BigNumber, Contract, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport ERC20ABI from '../constants/contracts/IERC20.sol/IERC20.json'\nimport useConfirmationModal from './useConfirmationModal'\n\nconst useApproval = (tokenAddress: string, spenderAddress?: string) => {\n  const { open } = useConfirmationModal();\n  const { account, ethereum } = useWallet<ExternalProvider>();\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const ERC20Interface = new utils.Interface(ERC20ABI.abi);\n    return new Contract(tokenAddress, ERC20Interface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, tokenAddress]);\n\n  const [allowance, setAllowance] = useState<BigNumber>();\n  const [isApproving, setIsApproving] = useState(false);\n  const [isApproved, setIsApproved] = useState(false);\n\n  const handleApprove = useCallback(() => {\n    if (!ethereum || !account || !spenderAddress || !contract) return;\n    open(async () => {\n      try {\n        setIsApproving(true);\n        const result = await contract.approve(spenderAddress, BigNumber.from(2).pow(256).sub(1));\n        await result.wait();\n        setIsApproved(true);\n        setIsApproving(false);\n      } catch (e) {\n        console.log(e);\n        setIsApproving(false);\n      }\n    });\n  }, [account, contract, ethereum, open, setIsApproved, setIsApproving, spenderAddress]);\n\n  const fetchAllowance = useCallback(async () => {\n    if (!contract || !spenderAddress || !account) return;\n    setAllowance(await contract.allowance(account, spenderAddress));\n  }, [contract, account, spenderAddress]);\n\n  useEffect(() => {\n    fetchAllowance();\n  }, [fetchAllowance]);\n\n  useEffect(() => {\n    if (allowance && allowance.gt(0)) {\n      setIsApproved(true);\n    }\n  }, [allowance, setIsApproved]);\n\n  return {\n    allowance,\n    isApproved,\n    isApproving,\n    onApprove: handleApprove,\n  };\n};\n\nexport default useApproval;\n","import { Button, Input, Stack, Text, useColorModeValue } from \"@chakra-ui/react\";\nimport useChainPicker from \"hooks/useChainPicker\";\nimport React, { useState } from \"react\";\n\nimport deployedAddresses from \"../../constants\";\nimport { Commander } from \"../../contexts/Sanctis/types\";\nimport useApproval from \"../../hooks/useApproval\";\nimport useSanctis from \"../../hooks/useSanctis\";\n\nconst ColonizeCard: React.FC<{ colonizer: Commander }> = ({ colonizer }) => {\n  const { chainId } = useChainPicker();\n  const { colonizationCost, colonizePlanet } = useSanctis();\n  const { isApproved, isApproving, onApprove } = useApproval(\n    deployedAddresses[chainId].credits,\n    deployedAddresses[chainId].planets\n  );\n  const [x, setX] = useState<number>();\n  const [y, setY] = useState<number>();\n  const [z, setZ] = useState<number>();\n\n  return (\n    <Stack textAlign={\"center\"} align={\"center\"} m={5} spacing={{ base: 8, md: 10 }}>\n      <Stack spacing={6} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\n        <Text fontWeight=\"bold\" fontSize=\"xl\">\n          Colonize a planet\n        </Text>\n        <Input type=\"number\" placeholder=\"X coordinate...\" onChange={(e) => setX(Number(e.target.value))} />\n        <Input type=\"number\" placeholder=\"Y coordinate...\" onChange={(e) => setY(Number(e.target.value))} />\n        <Input type=\"number\" placeholder=\"Z coordinate...\" onChange={(e) => setZ(Number(e.target.value))} />\n        {isApproved ? (\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            disabled={x === undefined || y === undefined || z === undefined}\n            onClick={() => colonizePlanet(colonizer, x || 0, y || 0, z || 0)}\n          >\n            Colonize for {colonizationCost ? colonizationCost.div(10 ** 12).toNumber() / 10 ** 6 : \"??\"} $CREDS\n          </Button>\n        ) : (\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            isLoading={isApproving}\n            onClick={() => onApprove()}\n          >\n            Approve\n          </Button>\n        )}\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default ColonizeCard;\n","import { Button, Link, Spinner, Stack, Text, useColorModeValue } from \"@chakra-ui/react\";\nimport usePlanet from \"hooks/usePlanet\";\nimport React from \"react\";\n\nconst PlanetCard: React.FC<{ planetId: string }> = ({ planetId }) => {\n  const planet = usePlanet(planetId);\n  return (\n    <Stack spacing={6} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\n      {planet ? (\n        <>\n          <Text fontWeight=\"bold\" fontSize=\"xl\">{`Coordinate: (X=${planet.x}; Y=${planet.y}; Z=${planet.z})`}</Text>\n          <Text fontSize=\"md\">Humidity: {planet.humidity}</Text>\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            as={Link}\n            href={`#/planet/${planet.id}`}\n          >\n            Details\n          </Button>\n        </>\n      ) : (\n        <Spinner />\n      )}\n    </Stack>\n  );\n};\n\nexport default PlanetCard;\n","import { Button, Container, Flex, Link, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport useCommander from \"hooks/useCommander\";\nimport React from \"react\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { useParams } from \"react-router-dom\";\n\nimport ColonizeCard from \"./ColonizeCard\";\nimport PlanetCard from \"./PlanetCard\";\n\nconst Commander: React.FC = () => {\n  const { id } = useParams();\n  const commander = useCommander(id);\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Button rightIcon={<BiArrowBack />} as={Link} href={\"#/commanders\"}>\n        Back\n      </Button>\n      <Flex\n        direction={\"column\"}\n        textAlign={\"center\"}\n        align={\"center\"}\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\n        mt={2}\n        p={3}\n        rounded=\"lg\"\n        shadow=\"2xl\"\n        boxShadow=\"inner\"\n      >\n        <Text fontSize=\"lg\" fontWeight=\"bold\">\n          {commander?.name}'s planets\n        </Text>\n        <Wrap spacing={5} mt=\"2\">\n          {commander?.planets?.map((e) => (\n            <WrapItem key={e} shadow=\"xl\">\n              <PlanetCard planetId={e} />\n            </WrapItem>\n          ))}\n        </Wrap>\n      </Flex>\n      {commander && <ColonizeCard colonizer={commander} />}\n    </Container>\n  );\n};\n\nexport default Commander;\n","import { Commander } from \"contexts/Sanctis/types\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport useSanctis from \"./useSanctis\";\n\nexport default function useCommander(id?: string) {\n  const { commanders, fetchCommander } = useSanctis();\n  const [commander, setCommander] = useState<Commander | null>();\n\n  const fetch = useCallback(async () => {\n    if (!id) {\n      return;\n    } else if (!commanders[id]) {\n      setCommander(await fetchCommander(id));\n    } else {\n      setCommander(commanders[id]);\n    }\n  }, [commanders, id, fetchCommander]);\n\n  useEffect(() => {\n    fetch();\n  }, [fetch]);\n\n  return commander;\n}\n","import React from \"react\";\nimport { Container, Heading, Link, List, ListItem, Stack, useColorModeValue } from \"@chakra-ui/react\";\n\nconst Documentation: React.FC = () => {\n  return (\n    <Container maxW={\"5xl\"}>\n      <Stack\n        background={useColorModeValue(\"white\", \"gray.800\")}\n        textAlign={\"center\"}\n        align={\"center\"}\n        spacing={{ base: 8, md: 10 }}\n        p=\"3\"\n        rounded=\"xl\"\n      >\n        <Heading>Documentation and resources</Heading>\n        <List>\n          <ListItem>\n            <Link href=\"https://docs.sanctis.xyz/\">Official documentation</Link>\n          </ListItem>\n          <ListItem>\n            <Link href=\"https://discord.gg/RzW8Eptb3g\">Discord</Link>\n          </ListItem>\n          <ListItem>\n            <Link href=\"https://github.com/Sanctis-Game\">Github</Link>\n          </ListItem>\n        </List>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Documentation;\n","import { Button, Container, Flex, Heading, Stack, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport useSanctis from \"../hooks/useSanctis\";\n\nimport ColonizeCard from \"./Commander/ColonizeCard\";\nimport PlanetCard from \"./Commander/PlanetCard\";\n\nconst Planets: React.FC = () => {\n  const { currentCommander } = useSanctis();\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Flex\n        direction={\"column\"}\n        textAlign={\"center\"}\n        align={\"center\"}\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\n        mt={2}\n        p={3}\n        rounded=\"lg\"\n        shadow=\"2xl\"\n        boxShadow=\"inner\"\n      >\n        {currentCommander ? (\n          <>\n            <Text fontSize=\"lg\" fontWeight=\"bold\">\n              {currentCommander?.name}'s planets\n            </Text>\n            <Wrap spacing={5} mt=\"2\">\n              {currentCommander?.planets?.map((e) => (\n                <WrapItem key={e} shadow=\"xl\">\n                  <PlanetCard planetId={e} />\n                </WrapItem>\n              ))}\n            </Wrap>\n          </>\n        ) : (\n          <Stack spacing={6} p={3}>\n            <Heading>You have not chosen a commander</Heading>\n            <Button>Choose a summoner</Button>\n          </Stack>\n        )}\n      </Flex>\n      {currentCommander && <ColonizeCard colonizer={currentCommander} />}\n    </Container>\n  );\n};\n\nexport default Planets;\n","import { Container, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst Fleets: React.FC = () => {\n  return (\n    <Container maxW={\"5xl\"}>\n      <Text fontSize={\"3xl\"}>This section is under construction</Text>\n    </Container>\n  );\n};\n\nexport default Fleets;\n","import React from \"react\";\nimport { Route, HashRouter as Router, Routes } from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { UseWalletProvider } from \"@binance-chain/bsc-use-wallet\";\n\nimport Sidebar from \"./components/Sidebar\";\nimport Home from \"./views/Home\";\nimport Planet from \"./views/Planet\";\nimport useChainPicker from \"./hooks/useChainPicker\";\nimport ChainPickerProvider from \"./contexts/ChainPicker\";\nimport ConfirmationModalProvider from \"./contexts/ConfirmationModal\";\nimport SanctisProvider from \"./contexts/Sanctis\";\nimport Commanders from \"views/Commanders\";\nimport Commander from \"views/Commander\";\nimport Documentation from \"./views/Documentation\";\nimport Planets from \"./views/Planets\";\nimport Fleets from \"./views/Fleets\";\n\nconst WalletProvider: React.FC = ({ children }) => {\n  const { chainId } = useChainPicker();\n\n  return <UseWalletProvider chainId={chainId}>{children}</UseWalletProvider>;\n};\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <ChakraProvider>\n      <ChainPickerProvider>\n        <WalletProvider>\n          <ConfirmationModalProvider>\n            <SanctisProvider>{children}</SanctisProvider>\n          </ConfirmationModalProvider>\n        </WalletProvider>\n      </ChainPickerProvider>\n    </ChakraProvider>\n  );\n};\n\nfunction App() {\n  return (\n    <Providers>\n      <Sidebar>\n        <Router>\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/commanders\" element={<Commanders />} />\n            <Route path=\"/commander/:id\" element={<Commander />} />\n            <Route path=\"/planet/:id\" element={<Planet />} />\n            <Route path=\"/planets\" element={<Planets />} />\n            <Route path=\"/fleets\" element={<Fleets />} />\n            <Route path=\"/documentation\" element={<Documentation />} />\n          </Routes>\n        </Router>\n      </Sidebar>\n    </Providers>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}