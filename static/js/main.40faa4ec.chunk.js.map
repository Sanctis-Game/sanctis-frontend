{"version":3,"sources":["components/Sidebar/Item.tsx","components/Sidebar/items.ts","components/Sidebar/Content.tsx","utils/index.ts","components/ConfirmationModal/index.tsx","contexts/ConfirmationModal.tsx","hooks/useConfirmationModal.tsx","constants/index.ts","assets/electric.svg","assets/metal-bar.svg","assets/ore.svg","assets/topaz.svg","hooks/useLocalStorage.ts","contexts/ChainPicker.tsx","hooks/useChainPicker.tsx","hooks/useApprovedObjects.tsx","contexts/Sanctis/index.tsx","hooks/useSanctis.tsx","assets/character.svg","components/Sidebar/CommanderBadge.tsx","ColorModeSwitcher.tsx","components/Sidebar/Mobile.tsx","components/Sidebar/index.ts","components/Sidebar/Sidebar.tsx","views/Home/Home.tsx","hooks/usePlanet.ts","components/ResourceBadge.tsx","hooks/useInfrastructure.tsx","views/Planet/CreateInfrastructureCard.tsx","hooks/usePowerPlant.tsx","views/Planet/PowerPlantCard.tsx","hooks/useResourceProducer.tsx","views/Planet/ResourceProducerCard.tsx","assets/chest.svg","assets/gladius.svg","assets/shield.svg","assets/speedometer.svg","components/ShipStatBadge.tsx","hooks/useShip.tsx","hooks/useSpatioport.tsx","views/Planet/SpatioportCard.tsx","views/Planet/Planet.tsx","hooks/useCommander.ts","views/Commanders/CommanderCard.tsx","views/Commanders/CreateCommanderCard.tsx","views/Commanders/Commanders.tsx","hooks/useApproval.ts","views/Commander/ColonizeCard.tsx","views/Commander/PlanetCard.tsx","views/Commander/Commander.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavItem","icon","url","children","rest","href","style","textDecoration","_focus","boxShadow","align","p","mx","borderRadius","role","cursor","_hover","bg","color","mr","fontSize","_groupHover","as","LinkItems","name","FiHome","FiTrendingUp","FiCompass","FiStar","FiSettings","SidebarContent","onClose","transition","useColorModeValue","borderRight","borderRightColor","w","base","md","pos","h","alignItems","justifyContent","fontFamily","fontWeight","display","onClick","map","link","planetIdToCoordinate","planetId","num","BigNumber","from","bits80","x","and","y","shr","z","ConfirmationModal","isOpen","maxW","spacing","my","src","size","thickness","ConfirmationModalContext","createContext","confirming","open","Promise","ChainPickerProvider","useDisclosure","onOpen","onCloseModal","useCallback","action","a","Provider","value","useConfirmationModal","useContext","supportedNetworks","rpcUrl","chainId","deployedAddresses","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setValue","valueToStore","Function","setItem","stringify","useEffect","ChainPickerContext","setNetwork","network","useChainPicker","useApprovedObjects","races","address","humans","resources","energy","iron","metalBar","silicon","ore","deuterium","infrastructures","description","ironMines","siliconFurnaces","heavyWaterPlants","solarPanels","fusionReactors","spatioports","ships","transporters","scouts","destroyers","SanctisContext","commanders","planets","setCurrentCommander","commander","fetchCommander","fetchPlanet","createCommander","colonizePlanet","SanctisProvider","toast","useToast","approvedObjects","useWallet","ethereum","account","contracts","useMemo","SanctisInterface","utils","Interface","SanctisABI","abi","CommandersInterface","CommandersABI","CreditsInterface","CreditsABI","PlanetsInterface","PlanetsABI","ResourceInterface","ResourceABI","PowerPlantsInterface","PowerPlantsABI","ResourceProducerInterface","ResourceProducerABI","ShipInterface","ShipABI","signer","providers","Web3Provider","getSigner","sanctis","Contract","credits","ownedCredits","setOwnedCredits","ownedCommanders","setOwnedCommanders","setCommanders","currentCommander","setPlanets","colonizationCost","setColonizationCost","fetchColonizationCost","fetchOwnedCredits","Number","ethers","balanceOf","formatEther","commanderId","race","empireSize","toNumber","all","Array","fill","_","i","commanderPlanetByIndex","toString","commanderPlanets","id","find","e","old","fetchOwnedCommanders","commandersBalance","length","tokenOfOwnerByIndex","filter","Boolean","planet","status","ruler","humidity","resource","contract","reserve","amount","reserves","infrastructure","InfrastructureInterface","InfrastructureABI","level","create","result","wait","title","message","shl","add","colonize","useSanctis","CommanderBadge","setAutoconnect","reset","handleReset","Date","now","py","commanderIcon","ml","substring","numeral","format","borderColor","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","variant","marginLeft","validConnectors","MobileNav","connect","openModal","autoconnect","undefined","connector","setConnector","handleChooseWallet","handleConnect","px","height","borderBottomWidth","borderBottomColor","leftIcon","Object","values","isFullWidth","Sidebar","minH","autoFocus","placement","returnFocusOnClose","onOverlayClick","Commanders","useCommanders","background","textAlign","rounded","Link","usePlanet","setPlanet","fetch","ResourceBadge","bgColor","iconSize","width","content","shadow","direction","maxH","minW","label","useInfrastructure","loadedInfrastructure","setLoadedInfrastructure","isFetching","setIsFetching","costs","costsResources","nextCosts","nextUpgrade","getAddress","upgrade","CreateInfrastuctureCard","choices","choice","setChoice","handleSelect","target","handleCreate","onChange","mt","colorScheme","usePowerPlant","baseInfra","loadedPlant","setLoadedPlant","PowerPlantInterface","PowerPlantABI","currentProduction","nextProduction","powerPlant","PowerPlantCard","getBlockNumber","justify","cost","disabled","useResourceProducer","loadedProducer","setLoadedProducer","lastHarvest","producedResources","productionPerBlock","harvest","data","producer","ResourceProducerCard","prod","mul","Math","max","ShipStatBadge","type","speed","offense","defense","capacity","stroke","useShip","ship","loadedShip","setLoadedShip","unitCosts","offensivePower","defensivePower","useSpatioport","spatioport","setSpatioport","SpatioportInterface","SpatioportABI","currentDiscount","nextDiscount","discountFactor","build","quantity","SpatioportCard","setQuantity","placeholder","Planet","useParams","infrastructureCards","card","resourceProducers","powerPlants","includes","rightIcon","mb","m","useCommander","setCommander","CommanderCard","alignContent","emptyColor","CreateCommanderCard","setName","setRace","handleName","match","useApproval","tokenAddress","spenderAddress","ERC20Interface","ERC20ABI","allowance","setAllowance","isApproving","setIsApproving","isApproved","setIsApproved","handleApprove","approve","pow","sub","fetchAllowance","gt","onApprove","ColonizeCard","colonizer","setX","setY","setZ","div","isLoading","PlanetCard","Commander","WalletProvider","Providers","ChainPicker","App","path","element","Home","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6ryeAeaA,EAAU,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,IAAKC,EAAsC,EAAtCA,SAAaC,EAAyB,iBACzE,OACE,cAAC,IAAD,CAAMC,KAAI,WAAMH,GAAOI,MAAO,CAAEC,eAAgB,QAAUC,OAAQ,CAAEC,UAAW,QAA/E,SACE,eAAC,IAAD,yBACEC,MAAM,SACNC,EAAE,IACFC,GAAG,IACHC,aAAa,KACbC,KAAK,QACLC,OAAO,UACPC,OAAQ,CACNC,GAAI,WACJC,MAAO,UAELd,GAXN,cAYGH,GACC,cAAC,IAAD,CACEkB,GAAG,IACHC,SAAS,KACTC,YAAa,CACXH,MAAO,SAETI,GAAIrB,IAGPE,S,QChCIoB,EAAkC,CAC7C,CAAEC,KAAM,OAAQvB,KAAMwB,IAAQvB,IAAK,KACnC,CAAEsB,KAAM,aAAcvB,KAAMyB,IAAcxB,IAAK,eAC/C,CAAEsB,KAAM,UAAWvB,KAAM0B,IAAWzB,IAAK,KACzC,CAAEsB,KAAM,aAAcvB,KAAM2B,IAAQ1B,IAAK,KACzC,CAAEsB,KAAM,WAAYvB,KAAM4B,IAAY3B,IAAK,M,cCEhC4B,EAAiB,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,QAAY3B,EAAyB,iBACpE,OACE,eAAC,IAAD,yBACE4B,WAAW,UACXf,GAAIgB,YAAkB,QAAS,YAC/BC,YAAY,MACZC,iBAAkBF,YAAkB,WAAY,YAChDG,EAAG,CAAEC,KAAM,OAAQC,GAAI,IACvBC,IAAI,QACJC,EAAE,QACEpC,GARN,cASE,eAAC,IAAD,CAAMoC,EAAE,KAAKC,WAAW,SAAS7B,GAAG,IAAI8B,eAAe,gBAAvD,UACE,cAAC,IAAD,CAAMtB,SAAS,MAAMuB,WAAW,YAAYC,WAAW,OAAvD,kBAGA,cAAC,IAAD,CAAaC,QAAS,CAAER,KAAM,OAAQC,GAAI,QAAUQ,QAASf,OAE9DR,EAAUwB,KAAI,SAACC,GAAD,OACb,cAAC,EAAD,CAAyB/C,KAAM+C,EAAK/C,KAAMC,IAAK8C,EAAK9C,IAApD,SACG8C,EAAKxB,MADMwB,EAAKxB,c,4ECtBdyB,EAAuB,SAACC,GACnC,IAAMC,EAAMC,IAAUC,KAAKH,GACrBI,EAASF,IAAUC,KAAK,WACxBE,EAAIJ,EAAIK,IAAIF,GACZG,EAAIN,EAAIO,IAAI,IAAIF,IAAIF,GACpBK,EAAIR,EAAIO,IAAI,KAAKF,IAAIF,GAC3B,MAAM,MAAN,OAAaC,EAAb,eAAqBE,EAArB,eAA6BE,EAA7B,M,qECqBaC,EArB6C,SAAC,GAGtD,IAFLC,EAEI,EAFJA,OACA9B,EACI,EADJA,QAEA,OACE,eAAC,IAAD,CAAO8B,OAAQA,EAAQ9B,QAASA,EAAhC,UACE,cAAC,IAAD,IACA,eAAC,IAAD,CAAc+B,KAAK,QAAnB,UACE,cAAC,IAAD,wCACA,cAAC,IAAD,IACA,cAAC,IAAD,UACE,eAAC,IAAD,CAAQC,QAAQ,MAAMC,GAAI,EAA1B,UACE,cAAC,IAAD,CAAOC,IAAK,QAAS7B,EAAE,OAAOI,EAAE,SAChC,cAAC,IAAD,CAAS0B,KAAK,KAAKC,UAAW,oBCrB7BC,EAA2BC,wBAA8C,CACpFC,YAAY,EACZC,KAAM,kBAAM,IAAIC,SAAQ,kBAuBXC,EApB8B,SAAC,GAAkB,IAAhBtE,EAAe,EAAfA,SAC9C,EAA8DuE,cAA9CJ,EAAhB,EAAQT,OAAoBc,EAA5B,EAA4BA,OAAiBC,EAA7C,EAAoC7C,QAE9BwC,EAAOM,sBAAW,uCAAC,WAAOC,EAA6B/C,GAApC,SAAAgD,EAAA,6DACvBJ,IADuB,SAEjBG,IAFiB,WAGnB/C,EAHmB,gCAGJA,IAHI,OAIvB6C,IAJuB,2CAAD,wDAKrB,CAACD,EAAQC,IAEZ,OACE,eAACR,EAAyBY,SAA1B,CACEC,MAAO,CAAEX,aAAYC,QADvB,UAGGpE,EACD,cAAC,EAAD,CAAmB0D,OAAQS,EAAYvC,QAAS6C,QCnBvCM,EANc,WAC3B,OAAO,eACFC,qBAAWf,KCALgB,EAA+B,CAC1C,CACE5D,KAAM,iBACN6D,OAAQ,+CACRC,QAAS,MAEX,CACE9D,KAAM,iBACN6D,OAAQ,8BACRC,QAAS,MAIAC,EAAsE,CACjF,KAAM,CACJ,QAAW,6CACX,QAAW,6CACX,WAAc,6CACd,WAAc,6CACd,QAAW,6CACX,OAAU,6CACV,OAAU,6CACV,OAAU,6CACV,KAAQ,6CACR,UAAa,6CACb,QAAW,6CACX,UAAa,6CACb,gBAAmB,6CACnB,iBAAoB,6CACpB,YAAe,6CACf,eAAkB,6CAClB,YAAe,6CACf,aAAgB,6CAChB,OAAU,6CACV,WAAc,6CACd,WAAc,6CACd,gBAAmB,+CAIRA,I,sFC9CA,OAA0B,qCCA1B,OAA0B,sCCA1B,OAA0B,gCCA1B,OAA0B,kCCE1B,SAASC,GAAmBC,EAAaC,GAGtD,MAAsCC,oBAAY,WAChD,IAEE,IAAMC,EAAOC,OAAOC,aAAaC,QAAQN,GAEzC,OAAOG,EAAOI,KAAKC,MAAML,GAAQF,EACjC,MAAOQ,GAGP,OADAC,QAAQC,IAAIF,GACLR,MATX,mBAAOW,EAAP,KAAoBC,EAApB,KAeMC,EAAW1B,uBAAY,SAACI,GAC5B,IAEE,IAAMuB,EAAevB,aAAiBwB,SAAWxB,EAAMoB,GAAepB,EAEtEqB,EAAeE,GAEfX,OAAOC,aAAaY,QAAQjB,EAAKO,KAAKW,UAAUH,IAChD,MAAON,GAEPC,QAAQC,IAAIF,MAEb,CAACT,EAAKY,IAgBT,OAbAO,qBAAU,WACR,IAEE,IAAMhB,EAAOC,OAAOC,aAAaC,QAAQN,GAEzCa,EAAeV,EAAOI,KAAKC,MAAML,GAAQF,GACzC,MAAOQ,GAEPC,QAAQC,IAAIF,GACZI,EAAeZ,MAEhB,CAACD,EAAKC,IAEF,CAACW,EAAaE,GCvChB,IAAMM,GAAqBxC,wBAAa,2BAC1Ce,EAAkB,IADwB,IAE7C0B,WAAY,gBAeCrC,GAZ8B,SAAC,GAAkB,IAAhBtE,EAAe,EAAfA,SAC9C,EAA8BqF,GAAyB,UAAWJ,EAAkB,IAApF,mBAAO2B,EAAP,KAAgBD,EAAhB,KAEA,OACE,cAACD,GAAmB7B,SAApB,CACEC,MAAK,2BAAO8B,GAAP,IAAgBD,eADvB,SAGG3G,KCXQ6G,GANQ,WACrB,OAAO,eACF7B,qBAAW0B,MCkEHI,GAhEY,WACzB,IAAQ3B,EAAY0B,KAAZ1B,QAuDR,MAAO,CACL4B,MAtDoB,CAAC,CAAE1F,KAAM,QAAS2F,QAAS5B,EAAkBD,GAAS8B,SAuD1EC,UAtD4B,CAC5B,CAAE7F,KAAM,SAAU2F,QAAS5B,EAAkBD,GAASgC,OAAQrH,KAAMqH,IACpE,CAAE9F,KAAM,OAAQ2F,QAAS5B,EAAkBD,GAASiC,KAAMtH,KAAMuH,IAChE,CAAEhG,KAAM,UAAW2F,QAAS5B,EAAkBD,GAASmC,QAASxH,KAAMyH,IACtE,CAAElG,KAAM,YAAa2F,QAAS5B,EAAkBD,GAASqC,UAAW1H,KAAM0H,KAmD1EC,gBAjDwC,CACxC,CACEpG,KAAM,aACNqG,YAAa,uCACbV,QAAS5B,EAAkBD,GAASwC,WAEtC,CACEtG,KAAM,mBACNqG,YAAa,0CACbV,QAAS5B,EAAkBD,GAASyC,iBAEtC,CACEvG,KAAM,qBACNqG,YAAa,iCACbV,QAAS5B,EAAkBD,GAAS0C,kBAEtC,CACExG,KAAM,eACNqG,YAAa,yCACbV,QAAS5B,EAAkBD,GAAS2C,aAEtC,CACEzG,KAAM,kBACNqG,YAAa,6CACbV,QAAS5B,EAAkBD,GAAS4C,gBAEtC,CACE1G,KAAM,cACNqG,YAAa,sCACbV,QAAS5B,EAAkBD,GAAS6C,cAqBtCC,MAlBoB,CACpB,CACE5G,KAAM,eACNqG,YAAa,mDACbV,QAAS5B,EAAkBD,GAAS+C,cAEtC,CAAE7G,KAAM,SAAUqG,YAAa,6BAA8BV,QAAS5B,EAAkBD,GAASgD,QACjG,CACE9G,KAAM,aACNqG,YAAa,wDACbV,QAAS5B,EAAkBD,GAASiD,eCzB7BC,GAAiBnE,wBAAoC,CAChEoE,WAAY,GACZC,QAAS,GACTC,oBAAqB,SAACC,KACtBC,eAAgB,kBAAM,IAAIrE,SAAQ,gBAClCsE,YAAa,kBAAM,IAAItE,SAAQ,gBAC/BuE,gBAAiB,kBAAM,IAAIvE,SAAQ,gBACnCwE,eAAgB,kBAAM,IAAIxE,SAAQ,kBA+OrByE,GA5O0B,SAAC,GAAkB,IAAhB9I,EAAe,EAAfA,SACpC+I,EAAQC,cACN5E,EAASW,IAATX,KACAe,EAAY0B,KAAZ1B,QACF8D,EAAkBnC,KACxB,EAA8BoC,cAAtBC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,QAEZC,EAAYC,mBAAQ,WACxB,GAAKH,EAAL,CACA,IAAMI,EAAmB,IAAIC,QAAMC,UAAUC,GAAWC,KAClDC,EAAsB,IAAIJ,QAAMC,UAAUI,EAAcF,KACxDG,EAAmB,IAAIN,QAAMC,UAAUM,GAAWJ,KAClDK,EAAmB,IAAIR,QAAMC,UAAUQ,GAAWN,KAClDO,EAAoB,IAAIV,QAAMC,UAAUU,GAAYR,KACpDS,EAAuB,IAAIZ,QAAMC,UAAUY,EAAeV,KAC1DW,EAA4B,IAAId,QAAMC,UAAUc,GAAoBZ,KACpEa,EAAgB,IAAIhB,QAAMC,UAAUgB,GAAQd,KAC5Ce,EAAS,IAAIC,YAAUC,aAAazB,GAAU0B,YACpD,MAAO,CACLC,QAAS,IAAIC,IAAS3F,EAAkBD,GAAS2F,QAASvB,EAAkBmB,GAC5EpC,WAAY,IAAIyC,IAAS3F,EAAkBD,GAASmD,WAAYsB,EAAqBc,GACrFM,QAAS,IAAID,IAAS3F,EAAkBD,GAAS6F,QAASlB,EAAkBY,GAC5EnC,QAAS,IAAIwC,IAAS3F,EAAkBD,GAASoD,QAASyB,EAAkBU,GAC5EvD,OAAQ,IAAI4D,IAAS3F,EAAkBD,GAASgC,OAAQ+C,EAAmBQ,GAC3EtD,KAAM,IAAI2D,IAAS3F,EAAkBD,GAASiC,KAAM8C,EAAmBQ,GACvEpD,QAAS,IAAIyD,IAAS3F,EAAkBD,GAASmC,QAAS4C,EAAmBQ,GAC7ElD,UAAW,IAAIuD,IAAS3F,EAAkBD,GAASqC,UAAW0C,EAAmBQ,GACjF5C,YAAa,IAAIiD,IAAS3F,EAAkBD,GAAS2C,YAAasC,EAAsBM,GACxF3C,eAAgB,IAAIgD,IAAS3F,EAAkBD,GAAS4C,eAAgBqC,EAAsBM,GAC9F/C,UAAW,IAAIoD,IAAS3F,EAAkBD,GAASwC,UAAW2C,EAA2BI,GACzF9C,gBAAiB,IAAImD,IAAS3F,EAAkBD,GAASyC,gBAAiB0C,EAA2BI,GACrG7C,iBAAkB,IAAIkD,IAAS3F,EAAkBD,GAAS0C,iBAAkByC,EAA2BI,GACvGxC,aAAc,IAAI6C,IAAS3F,EAAkBD,GAAS+C,aAAcsC,EAAeE,GACnFvC,OAAQ,IAAI4C,IAAS3F,EAAkBD,GAASgD,OAAQqC,EAAeE,GACvEtC,WAAY,IAAI2C,IAAS3F,EAAkBD,GAASiD,WAAYoC,EAAeE,OAEhF,CAACvF,EAASgE,IAEb,EAAwC3D,qBAAxC,mBAAOyF,EAAP,KAAqBC,EAArB,KACA,EAA8C1F,qBAA9C,mBAAO2F,EAAP,KAAwBC,EAAxB,KACA,EAAoC5F,mBAA+C,IAAnF,mBAAO8C,EAAP,KAAmB+C,EAAnB,KACA,EAAgD7F,qBAAhD,mBAAO8F,EAAP,KAAyB9C,EAAzB,KACA,EAA8BhD,mBAAyC,IAAvE,mBAAO+C,EAAP,KAAgBgD,EAAhB,KACA,EAAgD/F,qBAAhD,mBAAOgG,EAAP,KAAyBC,EAAzB,KAEMC,EAAwBhH,sBAAW,sBAAC,sBAAAE,EAAA,yDACnCyE,EADmC,6DAExCoC,EAFwC,SAEdpC,EAAUd,QAAQiD,mBAFJ,6EAGvC,CAACnC,IAEJ5C,qBAAU,WACRiF,MACC,CAACA,IAEJ,IAAMC,EAAoBjH,sBAAW,sBAAC,sBAAAE,EAAA,yDAC/ByE,GAAcD,EADiB,6DAEpC8B,EAFoC,KAEpBU,OAFoB,KAEbC,SAAOrC,MAFM,SAEkBH,EAAU2B,QAAQc,UAAU1C,GAF9C,6BAEA2C,YAFA,+FAGnC,CAAC1C,EAAWD,IAEf3C,qBAAU,WACRkF,MACC,CAACA,IAEJ,IAAMjD,EAAiBhE,sBAAW,uCAChC,WAAOsH,GAAP,2BAAApH,EAAA,yDACOyE,EADP,0EAI+BA,EAAUf,WAAWG,UAAUuD,GAJ9D,0CAIW3K,EAJX,KAIiB4K,EAJjB,eAK8B5C,EAAUd,QAAQ2D,WAAWF,GAL3D,eAKUE,EALV,OAKyEC,WALzE,UAOmC9H,QAAQ+H,IACrCC,MAAMH,GACHI,KAAK,GACL1J,IAFH,uCAEO,WAAO2J,EAAGC,GAAV,SAAA5H,EAAA,sEAAuByE,EAAUd,QAAQkE,uBAAuBT,EAAaQ,GAA7E,uCAAiFE,YAAjF,2CAFP,0DARN,eAOUC,EAPV,OAYUlE,EAAY,CAChBmE,GAAIZ,EACJ3K,OACA4K,KAAMhD,EAAgBlC,MAAM8F,MAAK,SAACC,GAAD,OAAOA,EAAE9F,UAAYiF,KACtD1D,QAASoE,GAEXtB,GAAc,SAAC0B,GAEb,OADAA,EAAIf,GAAevD,EACZsE,KApBb,kBAsBWtE,GAtBX,yCAwBIzC,QAAQC,IAAI,4BAAZ,MAxBJ,kBAyBW,MAzBX,0DADgC,sDA6BhC,CAACgD,EAAiBI,IAGd2D,GAAuBtI,sBAAW,sBAAC,4BAAAE,EAAA,yDAClCyE,GAAcD,EADoB,iEAGNC,EAAUf,WAAWwD,UAAU1C,GAHzB,UAGjC6D,EAHiC,OAGmCd,YAEvD,OAAfhB,QAAe,IAAfA,OAAA,EAAAA,EAAiB+B,UAAWD,EALO,6DAMvC7B,EANuC,UAQ7B/G,QAAQ+H,IACZC,MAAMY,GACHX,KAAK,GACL1J,IAFH,uCAGI,WAAO2J,EAAGC,GAAV,SAAA5H,EAAA,kEACS8D,EADT,SAC+BW,EAAUf,WAAW6E,oBAAoB/D,EAASoD,GADjF,0BACqFL,WADrF,2GAHJ,0DATiC,oBAgBnCiB,OAAOC,UAhB4B,0DAkBtC,CAACjE,EAASC,EAAW8B,EAAiBzC,IAEzCjC,qBAAU,WACRuG,OACC,CAACA,KAEJ,IAAMrE,GAAcjE,sBAAW,uCAC7B,WAAO3B,GAAP,iCAAA6B,EAAA,yDACOyE,EADP,0EAGuDA,EAAUd,QAAQ+E,OAAOvK,GAHhF,uBAGYwK,EAHZ,EAGYA,OAAQC,EAHpB,EAGoBA,MAAOpK,EAH3B,EAG2BA,EAAGE,EAH9B,EAG8BA,EAAGE,EAHjC,EAGiCA,EAAGiK,EAHpC,EAGoCA,SAHpC,UAIsCpJ,QAAQ+H,IACxCnD,EAAgB/B,UAAUtE,IAA1B,+BAAAgC,EAAA,MAA8B,WAAO8I,GAAP,iBAAA9I,EAAA,6DACtBsF,EAAoB,IAAIV,QAAMC,UAAUU,GAAYR,KACpDgE,EAAW,IAAI5C,IACnB2C,EAAS1G,QACTkD,EACA,IAAIS,YAAUC,aAAazB,GAAU0B,aALX,KAQ1B6C,EAR0B,SASZC,EAASC,QAAQ7K,GATL,6CAQ1B2K,SAR0B,KAS1BG,OAT0B,kDAA9B,wDALN,eAIUC,EAJV,iBAkBkCzJ,QAAQ+H,IACpCnD,EAAgBxB,gBAAgB7E,IAAhC,+BAAAgC,EAAA,MAAoC,WAAOmJ,GAAP,iBAAAnJ,EAAA,6DAC5BoJ,EAA0B,IAAIxE,QAAMC,UAAUwE,EAAkBtE,KAChEgE,EAAW,IAAI5C,IACnBgD,EAAe/G,QACfgH,EACA,IAAIrD,YAAUC,aAAazB,GAAU0B,aALL,6BAQ7BkD,GAR6B,iBASlBJ,EAASO,MAAMnL,GATG,0BASQoJ,WATR,MAShC+B,MATgC,8FAApC,wDAnBN,eAkBUzG,EAlBV,OAgCU6F,EAAS,CACbV,GAAI7J,EACJwK,OAAQA,EACRC,MAAOA,EAAMrB,WACb/I,EAAGA,EAAE+I,WACL7I,EAAGA,EAAE6I,WACL3I,EAAGA,EAAE2I,WACLsB,SAAUA,EACVhG,gBAAiBA,EACjBqG,SAAUA,GAEZvC,GAAW,SAACwB,GAEV,OADAA,EAAIhK,GAAYuK,EACTP,KA7Cb,kBA+CWO,GA/CX,yCAiDItH,QAAQC,IAAI,yBAAZ,MAjDJ,kBAkDW,MAlDX,0DAD6B,sDAsD7B,CAACgD,EAAiBI,EAAWF,IAGzBP,GAAkBlE,sBAAW,uCACjC,WAAOrD,EAAc4K,GAArB,SAAArH,EAAA,yDACOyE,EADP,iDAEEjF,EAAI,sBAAC,4BAAAQ,EAAA,+EAEoByE,EAAUf,WAAW6F,OAAO9M,EAAM4K,EAAKjF,SAF3D,cAEKoH,EAFL,gBAGKA,EAAOC,OAHZ,uBAIKrB,KAJL,OAKDjE,EAAM,CAAEwE,OAAQ,UAAWe,MAAO,UAAW5G,YAAY,0CAAD,OAA4CrG,KALnG,kDAOD0H,EAAM,CAAEwE,OAAQ,QAASe,MAAO,QAAS5G,YAAY,oBAAD,OAAsB,KAAI6G,WAP7E,2DAFP,2CADiC,wDAcjC,CAAClF,EAAWjF,EAAM2E,EAAOiE,KAGrBnE,GAAiBnE,sBAAW,uCAChC,WAAOsH,EAAqB5I,EAAWE,EAAWE,GAAlD,SAAAoB,EAAA,yDACOyE,EADP,iDAGEjF,EAAI,sBAAC,8BAAAQ,EAAA,sEAEK7B,EAAWE,IAAUC,KAAKM,GAAGgL,IAAI,IAAIC,IAAInL,GAAGkL,IAAI,IAAIC,IAAIrL,GAF7D,SAGoBiG,EAAUd,QAAQmG,SAAS1C,EAAajJ,GAH5D,cAGKqL,EAHL,gBAIKA,EAAOC,OAJZ,uBAKK1F,GAAY5F,EAAS2J,YAL1B,wBAMKf,IANL,yBAOKjD,EAAesD,GAPpB,QAQDjD,EAAM,CAAEwE,OAAQ,UAAWe,MAAO,UAAW5G,YAAY,oCARxD,kDAUD1B,QAAQC,IAAR,MACA8C,EAAM,CAAEwE,OAAQ,QAASe,MAAO,QAAS5G,YAAY,wBAAD,OAA0B,KAAI6G,WAXjF,2DAHP,2CADgC,4DAmBhC,CAAClF,EAAWjF,EAAM2E,EAAOL,EAAgBC,GAAagD,IAGxD,OACE,cAACtD,GAAexD,SAAhB,CACEC,MAAO,CACL0G,mBACAP,eACAE,kBACA7C,aACAC,UACA+C,mBACA9C,sBACAE,iBACAC,eACAC,mBACAC,mBAZJ,SAeG7I,KC1QQ2O,GANI,WACjB,OAAO,eACF3J,qBAAWqD,MCNH,OAA0B,sCCwB5BuG,GAAuE,SAAC,GAAwB,IhBtBhF5H,EgBsB0D6H,EAAqB,EAArBA,eACrF,EAA2B3F,cAAnB4F,EAAR,EAAQA,MAAO1F,EAAf,EAAeA,QACf,EAAiFuF,KAAzE1D,EAAR,EAAQA,aAAcE,EAAtB,EAAsBA,gBAAiBG,EAAvC,EAAuCA,iBAAkB9C,EAAzD,EAAyDA,oBAEnDuG,EAAcrK,uBAAY,WAC9BmK,EAAeG,KAAKC,OACpBH,MACC,CAACD,EAAgBC,IAEpB,OACE,cAAC,IAAD,CAAMxM,WAAY,SAAlB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAY4M,GAAI,EAAGrN,WAAW,WAAWxB,OAAQ,CAAEC,UAAW,QAA9D,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAQyD,KAAM,KAAMD,IAAKqL,KACzB,eAAC,IAAD,CAAQzM,QAAS,CAAER,KAAM,OAAQC,GAAI,QAAUG,WAAW,aAAasB,QAAQ,MAAMwL,GAAG,IAAxF,UACE,cAAC,IAAD,CAAMnO,SAAS,KAAf,SAAqBqK,EAAmBA,EAAiBjK,MhBtC1C2F,EgBsC8DoC,GAAW,GhBrC/FpC,EAEHA,EAAQqI,UAAU,EAAG,GACrB,MACArI,EAAQqI,UAAUrI,EAAQkG,OAAS,EAAGlG,EAAQkG,QAJ3B,SgBsCT,eAAC,IAAD,CAAMjM,SAAS,KAAKF,MAAM,WAA1B,UACGkK,EAAeqE,IAAQrE,GAAcsE,OAAO,UAAY,MAD3D,gBAIF,cAAC,IAAD,CAAK7M,QAAS,CAAER,KAAM,OAAQC,GAAI,QAAlC,SACE,cAAC,IAAD,WAIN,eAAC,IAAD,CAAUrB,GAAIgB,YAAkB,QAAS,YAAa0N,YAAa1N,YAAkB,WAAY,YAAjG,UACE,cAAC,IAAD,CAAWwM,MAAM,aAAjB,SACG,CACCnD,GACEA,EAAgBvI,KAAI,SAACkK,GAAD,OAClB,cAAC,IAAD,CAAoCnK,QAAS,kBAAM6F,EAAoBsE,IAAvE,SACGA,EAAEzL,MADUyL,EAAEzL,MAAQ,GAAKyL,EAAEF,OAIpC,cAAC,IAAD,gCAAe,aAGnB,cAAC,IAAD,IACA,cAAC,IAAD,CAAW0B,MAAM,SAAjB,SACE,cAAC,IAAD,CAAU3L,QAASoM,EAAnB,mC,UCrDCU,GAAsD,SAACC,GAClE,IAAQC,EAAoBC,cAApBD,gBACFE,EAAO/N,YAAkB,OAAQ,SACjCgO,EAAahO,YAAkBiO,KAAQC,MAE7C,OACE,cAAC,IAAD,aACEjM,KAAK,KACL9C,SAAS,KACTgP,QAAQ,QACRlP,MAAM,UACNmP,WAAW,IACXvN,QAASgN,EACT7P,KAAM,cAACgQ,EAAD,IACN,iCAAyBD,EAAzB,UACIH,K,cCKJS,GAAkB,CACtB,CAAE9O,KAAM,WAAYuL,GAAI,aAKbwD,GAAY,SAAC,GAAsC,IAApC5L,EAAmC,EAAnCA,OAAWvE,EAAwB,kBAC7D,EAA6BiJ,cAArBE,EAAR,EAAQA,QAASiH,EAAjB,EAAiBA,QACjB,EAA+C9L,cAAvCb,EAAR,EAAQA,OAAgB4M,EAAxB,EAAgB9L,OAAmB5C,EAAnC,EAAmCA,QACnC,EAAsCyD,GAAgB,4BAA6B2J,KAAKC,OAAxF,mBAAOsB,EAAP,KAAoB1B,EAApB,KACA,EAAkCxJ,GAAoC,iBAAamL,GAAnF,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAqBjM,sBAAW,sBAAC,sBAAAE,EAAA,sDACrC0L,IADqC,2CAEpC,CAACA,IAEEM,EAAgBlM,sBAAW,uCAAC,WAAOkI,GAAP,SAAAhI,EAAA,sEAC1ByL,EAAQzD,GADkB,OAEhCiC,EAAeG,KAAKC,MAdE,OAetByB,EAAa9D,GACbhL,IAJgC,2CAAD,sDAK9B,CAACyO,EAASzO,EAASiN,EAAgB6B,IAStC,OAPAjK,qBAAU,WACJgK,GACDF,EAAcvB,KAAKC,QAAU7F,GAC9BiH,EAAQI,KAET,CAACrH,EAASmH,EAAaE,EAAWJ,EAASO,IAG5C,eAAC,IAAD,yBACExB,GAAI,CAAElN,KAAM,EAAGC,GAAI,IACnB0O,GAAI,CAAE3O,KAAM,EAAGC,GAAI,GACnB2O,OAAO,KACPxO,WAAW,SACXxB,GAAIgB,YAAkB,QAAS,YAC/BiP,kBAAkB,MAClBC,kBAAmBlP,YAAkB,WAAY,YACjDS,eAAgB,CAAEL,KAAM,gBAAiBC,GAAI,aACzClC,GATN,cAUE,cAAC,IAAD,CACEyC,QAAS,CAAER,KAAM,OAAQC,GAAI,QAC7BQ,QAAS6B,EACTyL,QAAQ,UACR,aAAW,YACXnQ,KAAM,cAAC,IAAD,MAER,cAAC,IAAD,CACE4C,QAAS,CAAER,KAAM,OAAQC,GAAI,QAC7BlB,SAAS,MACTuB,WAAW,YACXC,WAAW,OAJb,kBAQA,eAAC,IAAD,CAAQmB,QAAS,CAAE1B,KAAM,IAAKC,GAAI,KAAlC,UACE,cAAC,GAAD,IACCiH,EACC,cAAC,GAAD,CAAgByF,eAAgBA,IAEhC,cAAC,IAAD,CACE9K,KAAK,KACLkM,QAAQ,QACR,aAAW,YACXgB,SAAU,cAAC,IAAD,IACVtO,QAASgO,EALX,wBAWJ,eAAC,IAAD,CAAOjN,OAAQA,EAAQ9B,QAASA,EAAhC,UACE,cAAC,IAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,8BACA,cAAC,IAAD,UACGsP,OAAOC,OAAOhB,IAAiBvN,KAAI,SAAA6N,GAAS,OAC3C,cAAC,IAAD,CAA2BW,aAAW,EAACzO,QAAS,kBAAMiO,EAAcH,EAAU7D,KAA9E,SAAmF,cAAC,IAAD,UAAM6D,EAAUpP,QAAtFoP,EAAU7D,oBC5GtByE,OCSA,YAIX,IAHFrR,EAGC,EAHDA,SAIA,EAAoCuE,cAA5Bb,EAAR,EAAQA,OAAQc,EAAhB,EAAgBA,OAAQ5C,EAAxB,EAAwBA,QACxB,OACE,eAAC,IAAD,CAAK0P,KAAK,QAAQxQ,GAAIgB,YAAkB,WAAY,YAApD,UACE,cAAC,EAAD,CACEF,QAAS,kBAAMA,GACfc,QAAS,CAAER,KAAM,OAAQC,GAAI,WAE/B,cAAC,IAAD,CACEoP,WAAW,EACX7N,OAAQA,EACR8N,UAAU,OACV5P,QAASA,EACT6P,oBAAoB,EACpBC,eAAgB9P,EAChBmC,KAAK,OAPP,SAQE,cAAC,IAAD,UACE,cAAC,EAAD,CAAgBnC,QAASA,QAI7B,cAAC,GAAD,CAAW4C,OAAQA,IACnB,cAAC,IAAD,CAAK4K,GAAI,CAAElN,KAAM,EAAGC,GAAI,IAAM3B,EAAE,IAAhC,SACGR,QCLM2R,GA5Bc,WAC3B,IAAQxG,EAAoByG,KAApBzG,gBAIR,OAFAnF,QAAQC,IAAIkF,GAGV,cAAC,IAAD,CAAWxH,KAAM,MAAjB,SACE,eAAC,IAAD,CACEkO,WAAY/P,YAAkB,QAAS,YACvCgQ,UAAW,SACXvR,MAAO,SACPqD,QAAS,CAAE1B,KAAM,EAAGC,GAAI,IACxB3B,EAAE,IACFuR,QAAQ,KANV,UAQE,cAAC,IAAD,sBACA,cAAC,IAAD,gOAIA,cAAC,IAAD,CAAQ5Q,GAAI6Q,IAAM9R,KAAM,eAAxB,sCCrBO,SAAS+R,GAAUlP,GAChC,MAAiC4L,KAAzBpG,EAAR,EAAQA,QAASI,EAAjB,EAAiBA,YACjB,EAA4BnD,qBAA5B,mBAAO8H,EAAP,KAAe4E,EAAf,KAEMC,EAAQzN,sBAAW,sBAAC,sBAAAE,EAAA,yDACpB7B,EADoB,oDAEfwF,EAAQxF,GAFO,6BAGtBmP,EAHsB,SAGNvJ,EAAY5F,GAHN,0DAKtBmP,EAAU3J,EAAQxF,IALI,4CAOvB,CAACwF,EAASxF,EAAU4F,IAMvB,OAJAlC,qBAAU,WACR0L,MACC,CAACA,IAEG7E,E,wBC0CM8E,GAzDwF,SAAC,GAIjG,IAHL1E,EAGI,EAHJA,SACAG,EAEI,EAFJA,OAEI,IADJ9J,YACI,MADG,KACH,EACEsO,EAAUvQ,YAAkB,WAAY,YACxCwQ,EAAY,SAACvO,GACjB,OAAQA,GACN,IAAK,KACH,MAAO,OACT,IAAK,KAIL,QACE,MAAO,OAHT,IAAK,KACH,MAAO,QAPK,CAWfA,GACGwO,EAAQjJ,mBAAQ,WACpB,OAAQvF,GACN,IAAK,KACH,MAAO,MACT,IAAK,KAEL,IAAK,KACH,MAAO,SAEV,CAACA,IACEyO,EAAUlJ,mBAAQ,WACtB,OACE,eAAC,IAAD,CACEuI,WAAYQ,EACZ7R,EAAE,IACFuR,QAAQ,MACR9P,EAAE,aACFwQ,OAAQ1O,EACRxD,MAAM,SACNmS,UAAoB,OAAT3O,EAAgB,SAAW,MAPxC,UASE,cAAC,IAAD,CAAOD,IAAK4J,EAAS5N,KAAM+R,WAAW,QAAQlO,KAAM2O,EAAUK,KAAML,EAAU9R,EAAG,EAAGuR,QAAQ,SAC5F,eAAC,IAAD,CAAK3C,GAAG,IAAIwD,KAAML,EAAOhQ,eAAyB,OAATwB,EAAgB,SAAW,QAApE,UACE,cAAC,IAAD,CAAMtB,WAAW,OAAOxB,SAAU8C,EAAMwO,MAAM,cAA9C,SACG1E,EAAShC,SAAOrC,MAAMuC,YAAY8B,GAAU,QAErC,OAAT9J,GACC,cAAC,IAAD,CAAM9C,SAAU8C,EAAMwO,MAAM,cAA5B,SACG7E,EAASrM,eAMnB,CAACwM,EAAQyE,EAAU5E,EAAU2E,EAAStO,EAAMwO,IAE/C,MAAgB,OAATxO,EAAgByO,EAAU,cAAC,KAAD,CAASK,MAAOnF,EAASrM,KAAzB,SAAgCmR,K,UC8CpDM,GA9FW,SAAC/E,EAAgChL,GACzD,IAAMgG,EAAQC,cACN5E,EAASW,IAATX,KACA8C,EAAcJ,KAAdI,UACAiC,EAAaD,cAAbC,SACAR,EAAgBgG,KAAhBhG,YACR,EAAwDnD,mBAAyBuI,GAAjF,mBAAOgF,EAAP,KAA6BC,EAA7B,KACA,EAAoCxN,oBAAkB,GAAtD,mBAAOyN,EAAP,KAAmBC,EAAnB,KAEMvF,EAAWrE,mBAAQ,WACvB,GAAKH,EAAL,CACA,IAAMmB,EAA4B,IAAId,QAAMC,UAAUc,GAAoBZ,KAC1E,OAAO,IAAIoB,IACTgD,EAAe/G,QACfsD,EACA,IAAIK,YAAUC,aAAazB,GAAU0B,gBAEtC,CAAC1B,EAAU4E,IAERoE,EAAQzN,sBAAW,sBAAC,sCAAAE,EAAA,yDACnB+I,IAAYsF,EADO,wDAExBC,GAAc,GAFU,SAIJvF,EAASO,MAAMnL,GAJX,cAIlBmL,EAJkB,gBAKkBP,EAASwF,MAAMpQ,GALjC,0CAKjBqQ,EALiB,KAKDC,EALC,eAME1F,EAAS2F,YAAYvQ,GANvB,QAMlBuQ,EANkB,OAOxBN,EAAwB,2BACnBjF,GADkB,IAErBG,MAAOA,EAAM/B,WACbmH,YAAaA,EAAYnH,WACzBiH,eAAgBA,EAAexQ,KAAI,SAACkK,GAAD,OACjC5F,EAAU2F,MAAK,SAACjI,GAAD,OAAOiH,SAAOrC,MAAM+J,WAAWzG,KAAOjB,SAAOrC,MAAM+J,WAAW3O,EAAEoC,eAEjFqM,eAGFH,GAAc,GAjBU,4CAkBvB,CAACD,EAAYlF,EAAgBhL,EAAUmE,EAAWyG,EAAUqF,IAE/DvM,qBAAU,WACHsM,EAAqBM,WAAaN,EAAqB/L,UAAY+G,EAAe/G,SAASmL,MAC/F,CAACY,EAAsBhF,EAAgBoE,IAE1C,IAAMhE,EAASzJ,sBAAW,uCACxB,WAAO3B,GAAP,SAAA6B,EAAA,yDACO+I,EADP,iDAEEvJ,EAAI,sBAAC,4BAAAQ,EAAA,+EAEoB+I,EAASQ,OAAOpL,GAFpC,cAEKqL,EAFL,gBAGKA,EAAOC,OAHZ,uBAIK8D,IAJL,wBAKKxJ,EAAY5F,GALjB,QAMDgG,EAAM,CACJwE,OAAQ,UACRe,MAAO,UACP5G,YAAY,GAAD,OAAKqG,EAAe1M,KAApB,qCAAqD0B,KATjE,kDAYDgG,EAAM,CAAEwE,OAAQ,QAASe,MAAO,QAAS5G,YAAY,oBAAD,OAAsB,KAAI6G,WAZ7E,2DAFP,2CADwB,sDAmBxB,CAACZ,EAAUI,EAAgBoE,EAAOxJ,EAAavE,EAAM2E,IAGjDyK,EAAU9O,sBAAW,uCACzB,WAAO3B,GAAP,SAAA6B,EAAA,yDACO+I,EADP,iDAEEvJ,EAAI,sBAAC,4BAAAQ,EAAA,+EAEoB+I,EAAS6F,QAAQzQ,GAFrC,cAEKqL,EAFL,gBAGKA,EAAOC,OAHZ,uBAIK8D,IAJL,wBAKKxJ,EAAY5F,GALjB,QAMDgG,EAAM,CACJwE,OAAQ,UACRe,MAAO,WACP5G,YAAY,GAAD,OAAKqG,EAAe1M,KAApB,wCAAwD0B,KATpE,kDAYDgG,EAAM,CAAEwE,OAAQ,QAASe,MAAO,QAAS5G,YAAY,mBAAD,OAAqB,KAAI6G,WAZ5E,2DAFP,2CADyB,sDAmBzB,CAACZ,EAAUI,EAAgBoE,EAAOxJ,EAAavE,EAAM2E,IAGvD,MAAO,CACLgF,eAAgBgF,EAChB5E,SACAqF,YC9BWC,GAhE+C,SAAC,GAAgB,IAAdnG,EAAa,EAAbA,OACvD7F,EAAoBX,KAApBW,gBACFiM,EAAUpK,mBAAQ,WACtB,OAAOgE,EAAO7F,gBAAgB2F,QAAO,SAACN,GAAD,OAAQA,EAAEoB,WAC9C,CAACZ,EAAO7F,kBACX,EAA4BjC,mBAAqCkO,EAAQ,IAAzE,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAmCd,GAAkBa,GAAUlM,EAAgB,GAAI6F,EAAOV,IAAlFmB,EAAR,EAAQA,eAAgBI,EAAxB,EAAwBA,OAElB0F,EAAenP,uBACnB,SAACoI,GACC8G,EAAU/N,KAAKC,MAAMgH,EAAEgH,OAAOhP,UAEhC,CAAC8O,IAGGG,EAAerP,sBAAW,sBAAC,sBAAAE,EAAA,sDAC/BuJ,EAAOb,EAAOV,IADiB,2CAE9B,CAACU,EAAQa,IAEZ,OACE,eAAC,IAAD,CAAOvK,QAAS,EAAGiO,WAAY/P,YAAkB,QAAS,YAAatB,EAAE,IAAIuR,QAAQ,KAArF,UACE,cAAC,IAAD,CAAM9Q,SAAS,KAAKwB,WAAW,OAA/B,+CAGA,cAAC,KAAD,CAAQuR,SAAUH,EAAlB,SACGH,EAAQ9Q,KAAI,SAACkK,GAAD,OACX,wBAAqBhI,MAAOe,KAAKW,UAAUsG,GAA3C,SACGA,EAAEzL,MADQyL,EAAEzL,WAKlBsS,GAAU5F,GACT,qCACE,cAAC,IAAD,CAAM9M,SAAS,KAAf,SAAqB8M,EAAerG,cACnCqG,EAAesF,WAAatF,EAAeqF,eAC1C,eAAC,IAAD,CAAOxP,QAAS,EAAhB,UACE,cAAC,IAAD,qBACA,cAAC,IAAD,CAAMqQ,GAAI,EAAV,SACGlG,EAAeqF,eAAexQ,KAAI,SAACkK,EAAaN,GAAd,OACjC,cAAC,IAAD,CAAuByH,GAAI,EAA3B,SACE,cAAC,GAAD,CAAevG,SAAUZ,EAAGe,OAAQE,EAAesF,UAAW7G,GAAIzI,KAAK,QAD1D+I,EAAEzL,cAOvB,cAAC,IAAD,mDAEF,cAAC,IAAD,CACE0Q,QAAS,OACTlB,GAAI,EACJqD,YAAa,OACbpT,GAAI,WACJD,OAAQ,CAAEC,GAAI,YACd6B,QAASoR,EANX,2BCIKI,GA5CO,SAACpG,EAAgChL,GACrD,IAAQoG,EAAaD,cAAbC,SACAjC,EAAcJ,KAAdI,UACR,EAAuD4L,GAAkB/E,EAAgBhL,GAAjEqR,EAAxB,EAAQrG,eAA2BI,EAAnC,EAAmCA,OAAQqF,EAA3C,EAA2CA,QAC3C,EAAsChO,mBAAoCuI,GAA1E,mBAAOsG,EAAP,KAAoBC,EAApB,KACA,EAAoC9O,oBAAkB,GAAtD,mBAAOyN,EAAP,KAAmBC,EAAnB,KAEMvF,EAAWrE,mBAAQ,WACvB,GAAKH,EAAL,CAEA,IAAMoL,EAAsB,IAAI/K,QAAMC,UAAU+K,EAAc7K,KAC9D,OAAO,IAAIoB,IAASgD,EAAe/G,QAASuN,EAAqB,IAAI5J,YAAUC,aAAazB,GAAU0B,gBACrG,CAAC1B,EAAU4E,IAERoE,EAAQzN,sBAAW,sBAAC,8BAAAE,EAAA,yDACnB+I,IAAYsF,EADO,wDAExBC,GAAc,GAFU,kBAIUvF,EAAS8G,kBAAkB1R,GAJrC,cAIhB0R,EAJgB,gBAKO9G,EAAS+G,eAAe3R,GAL/B,OAKhB2R,EALgB,OAMtBJ,EAAe,2BACVF,GADS,IAEZjN,OAAQD,EAAU2F,MAAK,SAACC,GAAD,MAAkB,WAAXA,EAAEzL,QAChCoT,kBAAmBA,EACnBC,eAAgBA,KAVI,kDAatB1O,QAAQC,IAAI,oCAAZ,MAbsB,QAexBiN,GAAc,GAfU,0DAgBvB,CAACvF,EAAUsF,EAAYmB,EAAWrR,EAAUmE,EAAWoN,IAM1D,OAJA7N,qBAAU,WACH4N,EAAYjB,gBAAmBiB,EAAYhB,WAAWlB,MAC1D,CAACkC,EAAalC,IAEV,CACLwC,WAAYN,EACZlC,QACAhE,SACAqF,YCIWoB,GAnDsE,SAAC,GAAgC,IAA9B7G,EAA6B,EAA7BA,eAAgBT,EAAa,EAAbA,OAC9FuH,EAAmB3L,cAAnB2L,eACR,EAAgCV,GAAcpG,EAAgBT,EAAOV,IAA7D+H,EAAR,EAAQA,WAAYnB,EAApB,EAAoBA,QAEpB,OACE,eAAC,IAAD,CAAO5P,QAAS,EAAGiO,WAAY/P,YAAkB,QAAS,YAAatB,EAAE,IAAIuR,QAAQ,KAAKU,OAAQ,KAAlG,UACE,cAAC,IAAD,CAAMhQ,WAAW,OAAOxB,SAAS,KAAjC,SACG0T,EAAWtT,OAEd,cAAC,IAAD,CAAMJ,SAAS,KAAf,SAAqB0T,EAAWjN,cAChC,eAAC,IAAD,CAAMjF,WAAW,OAAOxB,SAAS,KAAK6Q,UAAU,QAAhD,oBACU6C,EAAWzG,SAErB,cAAC,IAAD,CAAMzL,WAAW,OAAOxB,SAAS,KAAK6Q,UAAU,QAAhD,sBAGC6C,EAAWxN,QAAUwN,EAAWF,mBAC/B,cAAC,IAAD,CAAM/B,UAAW,MAAjB,SACE,cAAC,GAAD,CAAehF,SAAUiH,EAAWxN,OAAQ0G,OAAQ5K,IAAUC,KAAKyR,EAAWF,mBAAoB1Q,KAAK,SAG3G,cAAC,IAAD,IACA,eAAC,IAAD,CAAOH,QAAS,EAAGkR,QAAS,SAA5B,UACE,cAAC,IAAD,CAAMrS,WAAW,OAAOxB,SAAS,KAAK6Q,UAAU,QAAhD,4BAGA,cAAC,IAAD,WACI6C,EAAWtB,WAAa,IAAIzQ,KAAI,SAACmS,EAAMvI,GAAP,OAChC,cAAC,IAAD,UACE,cAAC,GAAD,CAAekB,SAAUiH,EAAWvB,eAAgB5G,GAAIqB,OAAQ5K,IAAUC,KAAK6R,GAAOhR,KAAK,QAD9E4Q,EAAWvB,eAAgB5G,GAAGnL,WAKjD,cAAC,IAAD,CACE0Q,QAAS,OACTlB,GAAI,EACJqD,YAAa,OACbpT,GAAIgB,YAAkB,WAAY,YAClCjB,OAAQ,CAAEC,GAAIgB,YAAkB,WAAY,aAC5Ca,QAAS,kBAAM6Q,EAAQlG,EAAOV,KAC9BoI,SAAUH,IAAmBF,EAAWrB,YAP1C,SASGuB,IAAmBF,EAAWrB,YAA9B,wBACoBqB,EAAWrB,YAAeuB,IAD9C,WAEG,mBCiDCI,GAlFa,SAAClH,EAAgChL,GAC3D,IAAMgG,EAAQC,cACN5E,EAASW,IAATX,KACA+E,EAAaD,cAAbC,SACAjC,EAAcJ,KAAdI,UACAyB,EAAgBgG,KAAhBhG,YACR,EAAuDmK,GAAkB/E,EAAgBhL,GAAjEqR,EAAxB,EAAQrG,eAA2BI,EAAnC,EAAmCA,OAAQqF,EAA3C,EAA2CA,QAC3C,EAA4ChO,mBAA0CuI,GAAtF,mBAAOmH,EAAP,KAAuBC,EAAvB,KACA,EAAoC3P,oBAAkB,GAAtD,mBAAOyN,EAAP,KAAmBC,EAAnB,KAEMvF,EAAWrE,mBAAQ,WACvB,GAAKH,EAAL,CACA,IAAMmB,EAA4B,IAAId,QAAMC,UAAUc,GAAoBZ,KAC1E,OAAO,IAAIoB,IACTgD,EAAe/G,QACfsD,EACA,IAAIK,YAAUC,aAAazB,GAAU0B,gBAEtC,CAAC1B,EAAU4E,IAERoE,EAAQzN,sBAAW,sBAAC,0CAAAE,EAAA,yDACnB+I,IAAYsF,EADO,wDAExBC,GAAc,GAFU,kBAKIvF,EAASyH,YAAYrS,GALzB,cAKhBqS,EALgB,gBAM+BzH,EAAS8G,kBAAkB1R,GAN1D,0CAMfsS,EANe,KAMIZ,EANJ,eAOW9G,EAAS+G,eAAe3R,GAPnC,oCAOb2R,EAPa,KAQtBS,EAAkB,2BACbf,GADY,IAEfgB,YAAaA,EAAYjJ,WACzBkJ,kBAAmBA,EAAkBzS,KAAI,SAACkK,GAAD,OACvC5F,EAAU2F,MAAK,SAACjI,GAAD,OAAOiH,SAAOrC,MAAM+J,WAAWzG,KAAOjB,SAAOrC,MAAM+J,WAAW3O,EAAEoC,eAEjFsO,mBAAoBb,EAAkB7R,KAAI,SAACkK,GAAD,OAAY7J,IAAUC,KAAK4J,MACrE4H,eAAgBA,KAfI,kDAkBtB1O,QAAQC,IAAI,oCAAZ,MAlBsB,QAoBxBiN,GAAc,GApBU,0DAqBvB,CAACvF,EAAUsF,EAAYmB,EAAWrR,EAAUmE,EAAWiO,IAE1D1O,qBAAU,WACHyO,EAAe9B,gBAAmB8B,EAAe7B,WAAWlB,MAChE,CAAC+C,EAAgB/C,IAEpB,IAAMoD,EAAU7Q,sBAAW,uCACzB,WAAO3B,GAAP,SAAA6B,EAAA,yDACO+I,EADP,iDAEEvJ,EAAI,sBAAC,8BAAAQ,EAAA,+EAEoB+I,EAAS4H,QAAQxS,GAFrC,cAEKqL,EAFL,gBAGKA,EAAOC,OAHZ,uBAIK8D,IAJL,wBAKKxJ,EAAY5F,GALjB,QAMDgG,EAAM,CACJwE,OAAQ,UACRe,MAAO,UACP5G,YAAY,MAAD,OAAQqG,EAAe1M,KAAvB,yCAA4D0B,KATxE,kDAYDgG,EAAM,CACJwE,OAAQ,QACRe,MAAO,QACP5G,YAAY,mBAAD,QAAqB,eAAI8N,YAAJ,eAAUjH,UAAW,KAAIA,WAf1D,2DAFP,2CADyB,sDAuBzB,CAACZ,EAAUI,EAAgBoE,EAAOxJ,EAAavE,EAAM2E,IAGvD,MAAO,CACL0M,SAAUP,EACV/C,QACAhE,SACAqF,UACA+B,YCjBWG,GAxE4E,SAAC,GAGrF,IAFL3H,EAEI,EAFJA,eACAT,EACI,EADJA,OAEQuH,EAAmB3L,cAAnB2L,eACR,EAAuCI,GAAoBlH,EAAgBT,EAAOV,IAA1E6I,EAAR,EAAQA,SAAUjC,EAAlB,EAAkBA,QAAS+B,EAA3B,EAA2BA,QAC3B,OACE,eAAC,IAAD,CAAO3R,QAAS,EAAGiO,WAAY/P,YAAkB,QAAS,YAAatB,EAAE,IAAIuR,QAAQ,KAAKU,OAAQ,KAAlG,UACE,cAAC,IAAD,CAAMhQ,WAAW,OAAOxB,SAAS,KAAjC,SACGwU,EAASpU,OAEZ,cAAC,IAAD,CAAMJ,SAAS,KAAf,SAAqBwU,EAAS/N,cAC9B,eAAC,IAAD,CAAMjF,WAAW,OAAOxB,SAAS,KAAK6Q,UAAU,QAAhD,oBACU2D,EAASvH,SAEnB,cAAC,IAAD,CAAMzL,WAAW,OAAOxB,SAAS,KAAK6Q,UAAU,QAAhD,sBAGA,cAAC,IAAD,WACI2D,EAASH,oBAAsB,IAAI1S,KAAI,SAAC+S,EAAMnJ,GAAP,OACvC,cAAC,IAAD,UACE,cAAC,GAAD,CACEkB,SAAU+H,EAASJ,kBAAmB7I,GACtCqB,OAAQ5K,IAAUC,KAAKyS,GAAMC,IAAIC,KAAKC,IAAI,EAAGjB,IAAmBY,EAASL,cACzErR,KAAK,QAJM0R,EAASJ,kBAAmB7I,GAAGnL,WASlD,cAAC,IAAD,CACE0Q,QAAS,OACTlB,GAAI,EACJ/P,GAAI,WACJD,OAAQ,CAAEC,GAAI,YACdoT,YAAa,OACbvR,QAAS,kBAAM4S,EAAQjI,EAAOV,KAC9BoI,SAAUH,IAAmBY,EAASL,YAPxC,SASGP,IAAmBY,EAASL,YAA5B,yBACqBK,EAASL,YAAeP,IAD7C,WAEG,YAEN,cAAC,IAAD,IACA,eAAC,IAAD,CAAOjR,QAAS,EAAGkR,QAAS,SAA5B,UACE,cAAC,IAAD,CAAMrS,WAAW,OAAOxB,SAAS,KAAK6Q,UAAU,QAAhD,4BAGA,cAAC,IAAD,WACI2D,EAASpC,WAAa,IAAIzQ,KAAI,SAACmS,EAAMvI,GAAP,OAC9B,cAAC,IAAD,UACE,cAAC,GAAD,CAAekB,SAAU+H,EAASrC,eAAgB5G,GAAIqB,OAAQ5K,IAAUC,KAAK6R,GAAOhR,KAAK,QAD5E0R,EAASrC,eAAgB5G,GAAGnL,WAK/C,cAAC,IAAD,CACE0Q,QAAS,OACTlB,GAAI,EACJqD,YAAa,OACbpT,GAAIgB,YAAkB,WAAY,YAClCjB,OAAQ,CAAEC,GAAIgB,YAAkB,WAAY,aAC5Ca,QAAS,kBAAM6Q,EAAQlG,EAAOV,KAC9BoI,SAAUH,IAAmBY,EAASnC,YAPxC,SASGuB,IAAmBY,EAASnC,YAA5B,wBACoBmC,EAASnC,YAAeuB,IAD5C,WAEG,mB,UC1EC,OAA0B,kCCA1B,OAA0B,oCCA1B,OAA0B,mCCA1B,OAA0B,wCCqE1BkB,GA1DV,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMnI,EAAa,EAAbA,OACNxM,EAAOiI,mBAAQ,WACnB,OAAQ0M,GACN,IAAK,QACH,MAAO,QACT,IAAK,UACH,MAAO,SACT,IAAK,UACH,MAAO,UACT,IAAK,WACH,MAAO,cAEV,CAACA,IAEElW,EAAOwJ,mBAAQ,WACnB,OAAQ0M,GACN,IAAK,QACH,OAAOC,GACT,IAAK,UACH,OAAOC,GACT,IAAK,UAIL,QACE,OAAOC,GAHT,IAAK,WACH,OAAOC,MAIV,CAACJ,IAEJ,OACE,cAAC,KAAD,CAASnD,MAAOxR,EAAhB,SACE,eAAC,IAAD,CACEY,EAAE,OACF4P,WAAY/P,YAAkB,WAAY,YAC1CtB,EAAE,MACFuR,QAAQ,MACRU,OAAQ,KACRlS,MAAM,SANR,UAQE,cAAC,IAAD,CACEuD,IAAKhE,EACLuW,OAAQvU,YAAkB,QAAS,SACnC+P,WAAW,QACXlO,KAAM,OACNgP,KAAM,OACNnS,EAAG,EACHuR,QAAQ,SAEV,cAAC,IAAD,CAAM3C,GAAG,IAAT,SACE,cAAC,IAAD,CAAM3M,WAAW,OAAOxB,SAAU,KAAMD,GAAI,EAAG8Q,UAAU,SAASS,MAAO,cAAzE,SACG1E,GAAkB,cCGhByI,GAjDC,SAACC,GACf,IAAQpN,EAAaD,cAAbC,SACAjC,EAAcJ,KAAdI,UACR,EAAoC1B,mBAAe+Q,GAAnD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCjR,oBAAkB,GAAtD,mBAAOyN,EAAP,KAAmBC,EAAnB,KAEMvF,EAAWrE,mBAAQ,WACvB,GAAKH,EAAL,CAEA,IAAMqB,EAAgB,IAAIhB,QAAMC,UAAUgB,GAAQd,KAClD,OAAO,IAAIoB,IAASwL,EAAKvP,QAASwD,EAAe,IAAIG,YAAUC,aAAazB,GAAU0B,gBACrF,CAAC1B,EAAUoN,IAERpE,EAAQzN,sBAAW,sBAAC,0CAAAE,EAAA,yDACnB+I,IAAYsF,EADO,wDAExBC,GAAc,GAFU,kBAIgBvF,EAAS+I,YAJzB,0CAIftD,EAJe,KAICD,EAJD,eAKFxF,EAASsI,QALP,eAKhBA,EALgB,iBAMOtI,EAASgJ,iBANhB,eAMhBA,EANgB,iBAOOhJ,EAASiJ,iBAPhB,eAOhBA,EAPgB,iBAQCjJ,EAASyI,WARV,QAQhBA,EARgB,OAStBK,EAAc,2BACTF,GADQ,IAEXnD,eAAgBA,EAAexQ,KAAI,SAACkK,GAAD,OACjC5F,EAAU2F,MAAK,SAACjI,GAAD,OAAOiH,SAAOrC,MAAM+J,WAAWzG,KAAOjB,SAAOrC,MAAM+J,WAAW3O,EAAEoC,eAEjFmM,QACA8C,MAAOA,EAAM9J,WACbwK,eAAgBA,EAAexK,WAC/ByK,eAAgBA,EAAezK,WAC/BiK,SAAUA,KAlBU,kDAqBtBpQ,QAAQC,IAAI,uBAAZ,MArBsB,QAuBxBiN,GAAc,GAvBU,0DAwBvB,CAACvF,EAAUsF,EAAYsD,EAAMrP,EAAWuP,IAM3C,OAJAhQ,qBAAU,WACH+P,EAAWpD,gBAAkBoD,EAAWxP,UAAYuP,EAAKvP,SAASmL,MACtE,CAACqE,EAAYD,EAAMpE,IAEf,CACLoE,KAAMC,EACNrE,U,UC4BW0E,GAvEO,SAAC9I,EAAgChL,GACrD,IAAMgG,EAAQC,cACN5E,EAASW,IAATX,KACA+E,EAAaD,cAAbC,SACR,EAAkE2J,GAAkB/E,EAAgBhL,GAA5EgQ,EAAxB,EAAQhF,eAAsCI,EAA9C,EAA8CA,OAAQqF,EAAtD,EAAsDA,QACtD,EAAoChO,mBAAoCuI,GAAxE,mBAAO+I,EAAP,KAAmBC,EAAnB,KACA,EAAoCvR,oBAAkB,GAAtD,mBAAOyN,EAAP,KAAmBC,EAAnB,KAEMvF,EAAWrE,mBAAQ,WACvB,GAAKH,EAAL,CACA,IAAM6N,EAAsB,IAAIxN,QAAMC,UAAUwN,GAActN,KAC9D,OAAO,IAAIoB,IAASgD,EAAe/G,QAASgQ,EAAqB,IAAIrM,YAAUC,aAAazB,GAAU0B,gBACrG,CAAC1B,EAAU4E,IAERoE,EAAQzN,sBAAW,sBAAC,gCAAAE,EAAA,yDACnB+I,IAAYsF,EADO,wDAExBC,GAAc,GAFU,kBAKQvF,EAASuJ,gBAAgBnU,GALjC,cAKhBmU,EALgB,gBAMKvJ,EAASwJ,aAAapU,GAN3B,cAMhBoU,EANgB,iBAOOxJ,EAASyJ,iBAPhB,QAOhBA,EAPgB,OAQtBL,EAAc,2BACThE,GADQ,IAEXmE,gBAAiBA,EAAgB/K,WACjCgL,aAAcA,EAAahL,WAC3BiL,eAAgBA,EAAejL,cAZX,kDAetBnG,QAAQC,IAAI,oCAAZ,MAfsB,QAiBxBiN,GAAc,GAjBU,0DAkBvB,CAACvF,EAAUsF,EAAYF,EAAsBhQ,EAAUgU,IAE1DtQ,qBAAU,WACHqQ,EAAW1D,gBAAgBjB,MAC/B,CAAC2E,EAAY3E,IAEhB,IAAMkF,EAA2E3S,sBAAW,uCAC1F,WAAO3B,EAAUwT,EAAMe,GAAvB,SAAA1S,EAAA,yDACO+I,EADP,iDAEEvJ,EAAI,sBAAC,8BAAAQ,EAAA,+EAEoB+I,EAAS0J,MAAMtU,EAAUwT,EAAKvP,QAASsQ,GAF3D,cAEKlJ,EAFL,gBAGKA,EAAOC,OAHZ,OAIDtF,EAAM,CACJwE,OAAQ,UACRe,MAAO,QACP5G,YAAY,GAAD,OAAK4P,EAAL,YAAiBf,EAAKlV,KAAtB,sCAAwD0B,KAPpE,gDAUDgG,EAAM,CACJwE,OAAQ,QACRe,MAAO,QACP5G,YAAY,mBAAD,QAAqB,eAAI8N,YAAJ,eAAUjH,UAAW,KAAIA,WAb1D,0DAFP,2CAD0F,0DAqB1F,CAACZ,EAAUvJ,EAAM2E,IAGnB,MAAO,CACL+N,aACA3E,QACAhE,SACAqF,UACA6D,UCoBWE,GA5FsE,SAAC,GAAgC,IAAD,EAA7BxJ,EAA6B,EAA7BA,eAAgBT,EAAa,EAAbA,OAC9FrF,EAAUnB,KAAVmB,MACA4M,EAAmB3L,cAAnB2L,eACR,EAAuCgC,GAAc9I,EAAgBT,EAAOV,IAApEkK,EAAR,EAAQA,WAAYtD,EAApB,EAAoBA,QAAS6D,EAA7B,EAA6BA,MAC7B,EAA4B7R,mBAAeyC,EAAM,IAAjD,mBAAO0L,EAAP,KAAeC,EAAf,KACQ2C,EAASD,GAAQ3C,GAAjB4C,KACR,EAAgC/Q,mBAAiB,GAAjD,mBAAO8R,EAAP,KAAiBE,EAAjB,KAGA,OAFAxR,QAAQC,IAAI6Q,GAGV,eAAC,IAAD,CAAOlT,QAAS,EAAGiO,WAAY/P,YAAkB,QAAS,YAAatB,EAAE,IAAIuR,QAAQ,KAAKU,OAAQ,KAAlG,UACE,cAAC,IAAD,CAAMhQ,WAAW,OAAOxB,SAAS,KAAjC,SACG8M,EAAe1M,OAElB,cAAC,IAAD,CAAMoB,WAAW,OAAOxB,SAAS,KAAjC,SACG8M,EAAerG,cAElB,eAAC,IAAD,CAAMjF,WAAW,OAAOxB,SAAS,KAAK6Q,UAAU,QAAhD,oBACU/D,EAAeG,SAEzB,cAAC,KAAD,CAAQ8F,SAAU,SAAClH,GAAD,OAAO8G,EAAU/N,KAAKC,MAAMgH,EAAEgH,OAAOhP,SAAvD,SACGmD,EAAMrF,KAAI,SAACkK,GAAD,OACT,wBAAwBhI,MAAOe,KAAKW,UAAUsG,GAA9C,SACGA,EAAEzL,MADQyL,EAAE9F,cAKnB,cAAC,KAAD,CACEgP,KAAK,SACLyB,YAAY,8BACZzD,SAAU,SAAClH,GAAD,OAAO0K,EAAY5L,OAAOkB,EAAEgH,OAAOhP,WAE/C,cAAC,IAAD,CAAM7D,SAAS,KAAK6Q,UAAU,QAA9B,8BAGA,eAAC,IAAD,WACE,cAAC,GAAD,CAAekE,KAAK,QAAQnI,OAAQ0I,EAAKN,QACzC,cAAC,GAAD,CAAeD,KAAK,UAAUnI,OAAQ0I,EAAKI,iBAC3C,cAAC,GAAD,CAAeX,KAAK,UAAUnI,OAAQ0I,EAAKK,iBAC3C,cAAC,GAAD,CAAeZ,KAAK,WAAWnI,OAAQjC,OAAOC,SAAOrC,MAAMuC,YAAYwK,EAAKH,UAAY,SAE1F,cAAC,IAAD,CAAMnV,SAAS,KAAK6Q,UAAU,QAA9B,6BAGA,cAAC,IAAD,oBACGyE,EAAKnD,sBADR,aACG,EAAqBxQ,KAAI,SAAC8K,EAAUlB,GAAX,OACxB,cAAC,IAAD,UACE,cAAC,GAAD,CAAekB,SAAUA,EAAUG,OAAQ0I,EAAKpD,MAAO3G,GAAIzI,KAAK,QADnD2J,EAASrM,WAK5B,cAAC,IAAD,CACE0Q,QAAS,OACTlB,GAAI,EACJqD,YAAa,OACbpT,GAAIgB,YAAkB,WAAY,YAClCjB,OAAQ,CAAEC,GAAIgB,YAAkB,WAAY,aAC5Ca,QAAS,kBAAM0U,EAAM/J,EAAOV,GAAI+G,EAAQ2D,IACxCtC,UAAWsC,EAPb,mBAWA,cAAC,IAAD,IACA,eAAC,IAAD,CAAO1T,QAAS,EAAGkR,QAAS,SAA5B,UACE,cAAC,IAAD,CAAMrS,WAAW,OAAOxB,SAAS,KAAK6Q,UAAU,QAAhD,4BAGA,cAAC,IAAD,WACIgF,EAAWzD,WAAa,IAAIzQ,KAAI,SAACmS,EAAMvI,GAAP,OAChC,cAAC,IAAD,UACE,cAAC,GAAD,CAAekB,SAAUoJ,EAAW1D,eAAgB5G,GAAIqB,OAAQ5K,IAAUC,KAAK6R,GAAOhR,KAAK,QAD9E+S,EAAW1D,eAAgB5G,GAAGnL,WAKjD,cAAC,IAAD,CACE0Q,QAAS,OACTlB,GAAI,EACJqD,YAAa,OACbpT,GAAIgB,YAAkB,WAAY,YAClCjB,OAAQ,CAAEC,GAAIgB,YAAkB,WAAY,aAC5Ca,QAAS,kBAAM6Q,EAAQlG,EAAOV,KAC9BoI,SAAUH,IAAmBiC,EAAWxD,YAP1C,SASGuB,IAAmBiC,EAAWxD,YAA9B,wBACoBwD,EAAWxD,YAAeuB,IAD9C,WAEG,mBCUC6C,GA7FU,WACvB,IAAQvS,EAAY0B,KAAZ1B,QAEFmI,EAAS2E,GADA0F,cAAP/K,IAGFgL,EAAsBtO,mBAAQ,WAClC,OACEgE,GACAA,EAAO7F,iBACPyJ,OAAOC,OAAO7D,EAAO7F,iBAClB2F,QAAO,SAACN,GAAD,OAAwB,IAAZA,EAAEoB,SACrBtL,KAAI,SAACkK,GACJ,IAAI+K,EAEEC,EAAoB,CACxB1S,EAAkBD,GAASwC,UAC3BvC,EAAkBD,GAASyC,gBAC3BxC,EAAkBD,GAAS0C,kBAEvBkQ,EAAc,CAAC3S,EAAkBD,GAAS2C,YAAa1C,EAAkBD,GAAS4C,gBAWxF,OARE8P,EADEC,EAAkBE,SAASlL,EAAE9F,SACxB,cAAC,GAAD,CAAsBsG,OAAQA,EAAQS,eAAgBjB,IACpDiL,EAAYC,SAASlL,EAAE9F,SACzB,cAAC,GAAD,CAAgBsG,OAAQA,EAAQS,eAAgBjB,IAC9CA,EAAE9F,UAAY5B,EAAkBD,GAAS6C,YAC3C,cAAC,GAAD,CAAgBsF,OAAQA,EAAQS,eAAgBjB,IAEhD,cAAC,IAAD,qCAEF,cAAC,IAAD,UAAwB+K,GAAT/K,EAAEzL,WAG7B,CAAC8D,EAASmI,IAEb,OACE,eAAC,IAAD,CAAW3J,KAAM,MAAjB,UACE,cAAC,IAAD,CACEsU,UAAW,cAAC,KAAD,IACX9W,GAAI6Q,IACJ9R,KAAMoN,EAAS,uBAAiBA,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAQE,OAAQ,eAChD1M,GAAIgB,YAAkB,WAAY,YAClCoW,GAAI,EALN,kBASA,eAAC,IAAD,CACExF,UAAU,SACVnS,MAAO,SACP4X,EAAG,EACH3X,EAAG,EACHqR,WAAY/P,YAAkB,WAAY,YAC1CiQ,QAAQ,KANV,UAQE,cAAC,IAAD,CAAMmG,GAAG,IAAIjX,SAAS,KAAKwB,WAAW,OAAtC,+BAGA,cAAC,IAAD,WACS,OAAN6K,QAAM,IAANA,OAAA,EAAAA,EAAQQ,WACPR,EAAOQ,SAASlL,KAAI,SAACkK,GAAD,OAClB,cAAC,IAAD,UACE,cAAC,GAAD,CAAeY,SAAUZ,EAAEY,SAAUG,OAAQf,EAAEe,OAAQ9J,KAAK,QAD/C+I,EAAEY,SAASrM,cAMlC,eAAC,IAAD,CACEqR,UAAW,SACXZ,UAAW,SACXvR,MAAO,SACPO,GAAIgB,YAAkB,WAAY,YAClCqW,EAAG,EACH3X,EAAG,EACHuR,QAAQ,KACRU,OAAO,MACPnS,UAAU,QATZ,UAWE,cAAC,IAAD,CAAMW,SAAS,KAAKwB,WAAW,OAAOyV,GAAG,IAAzC,sCAGA,cAAC,IAAD,CAAMpD,QAAS,SAAUqD,EAAG,EAA5B,SACGP,OAGJtK,GACC,cAAC,IAAD,CAAMwH,QAAS,SAAUqD,EAAG,EAA5B,SACE,cAAC,GAAD,CAAyB7K,OAAQA,UChG5B,SAAS8K,GAAaxL,GACnC,MAAuC+B,KAA/BrG,EAAR,EAAQA,WAAYI,EAApB,EAAoBA,eACpB,EAAkClD,qBAAlC,mBAAOiD,EAAP,KAAkB4P,EAAlB,KAEMlG,EAAQzN,sBAAW,sBAAC,sBAAAE,EAAA,yDACnB0D,EAAWsE,GADQ,4BAEtByL,EAFsB,SAEH3P,EAAekE,GAFZ,wDAItByL,EAAa/P,EAAWsE,IAJF,2CAMvB,CAACtE,EAAYsE,EAAIlE,IAMpB,OAJAjC,qBAAU,WACR0L,MACC,CAACA,IAEG1J,ECFT,IAwDe6P,GAxDiC,SAAC,GAAY,IAAD,EACpD7P,EAAY2P,GADwC,EAATxL,IAEjD,EAAkD+B,KAA1CrD,EAAR,EAAQA,iBAAkB9C,EAA1B,EAA0BA,oBAE1B,OACE,cAAC,IAAD,CAAW7E,KAAM,MAAjB,SACE,cAAC,IAAD,CAAOC,QAAS,EAAGiO,WAAY/P,YAAkB,QAAS,YAAatB,EAAE,IAAIuR,QAAQ,KAArF,SACGtJ,EACC,eAAC,IAAD,CAAK8P,aAAc,aAAnB,UACE,cAAC,IAAD,CAAM9V,WAAW,OAAOxB,SAAS,MAAjC,SACGwH,EAAUpH,OAEb,cAAC,IAAD,CAAMoB,WAAW,OAAOxB,SAAS,KAAjC,mBACGwH,EAAUwD,YADb,aACG,EAAgB5K,OAEnB,cAAC,IAAD,CAAKyQ,UAAW,QAAhB,SACIrJ,EAAUF,SAAwC,IAA7BE,EAAUF,QAAQ2E,OAGvC,CACE,cAAC,IAAD,CAAMjM,SAAS,KAAf,sBACA,cAAC,IAAD,UACGwH,EAAUF,QAAQ3F,KAAI,SAAC0K,GAAD,OACrB,cAAC,IAAD,UACE,cAAC,IAAD,CAAMpN,KAAI,kBAAaoN,GAAvB,SAAkCxK,EAAqBwK,MAD1CA,SANrB,cAAC,IAAD,CAAMzJ,GAAG,IAAT,4CAcJ,cAAC,IAAD,CACEkO,QAAS,OACToG,EAAG,EACHtH,GAAI,EACJqD,YAAa,OACbpT,GAAI,WACJD,OAAQ,CAAEC,GAAI,YACdK,GAAI6Q,IACJ9R,KAAI,sBAAiBuI,EAAUmE,IAC/BjK,QAAS,kBAAM6F,EAAoBC,IACnCuM,UAA0B,OAAhB1J,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBjK,QAASoH,EAAUpH,KAVjD,UAYmB,OAAhBiK,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBjK,QAASoH,EAAUpH,KAArC,kBACcoH,EAAUpH,MADxB,0BAEsBoH,EAAUpH,WAIrC,cAAC,IAAD,CAAS2C,UAAU,MAAMiS,MAAM,QAAQuC,WAAW,WAAWzX,MAAM,WAAWgD,KAAK,YClB9E0U,GA1CuB,WACpC,IAAQ1R,EAAUD,KAAVC,MACA6B,EAAoBgJ,KAApBhJ,gBACR,EAAwBpD,qBAAxB,mBAAOnE,EAAP,KAAaqX,EAAb,KACA,EAAwBlT,mBAAeuB,EAAM,IAA7C,mBAAOkF,EAAP,KAAa0M,EAAb,KAEM9E,EAAenP,uBAAY,SAACoI,GAChC6L,EAAQ9S,KAAKC,MAAMgH,EAAEgH,OAAOhP,UAC3B,CAAC6T,IAEEC,EAAalU,uBAAY,SAACoI,GAC9B4L,EAAQ5L,EAAEgH,OAAOhP,SAChB,CAAC4T,IAEE3E,EAAerP,sBAAW,sBAAC,sBAAAE,EAAA,yDAC1BqH,GAAS5K,EADiB,iEAGzBuH,EAAgBvH,EAAM4K,GAHG,2CAI9B,CAACA,EAAM5K,EAAMuH,IAEhB,OACE,eAAC,IAAD,CAAOhF,QAAS,EAAGiO,WAAY/P,YAAkB,QAAS,YAAatB,EAAE,IAAIuR,QAAQ,KAArF,UACE,cAAC,IAAD,CAAMtP,WAAW,OAAOxB,SAAS,KAAjC,gCACA,cAAC,KAAD,CAAOwW,YAAY,mBAAmBzD,SAAU4E,IAChD,cAAC,KAAD,CAAQ5E,SAAUH,EAAlB,SACG9M,EAAMnE,KAAI,SAACqJ,GAAD,OAAU,wBAAwBnH,MAAOe,KAAKW,UAAUyF,GAA9C,SAAsDA,EAAK5K,MAA9C4K,EAAK5K,WAEzC,cAAC,IAAD,CACE0Q,QAAS,OACTlB,GAAI,EACJqD,YAAa,OACbpT,GAAI,WACJD,OAAQ,CAAEC,GAAI,YACdkU,UAAW3T,KAAUA,EAAKwX,MAAM,iBAChClW,QAASoR,EAPX,kCCASpC,GA3Bc,WAC3B,IAAQxG,EAAoByG,KAApBzG,gBAIR,OAFAnF,QAAQC,IAAIkF,GAGV,cAAC,IAAD,CAAWxH,KAAM,MAAjB,SACE,eAAC,IAAD,CAAOmO,UAAW,SAAUvR,MAAO,SAAUqD,QAAS,CAAE1B,KAAM,EAAGC,GAAI,IAArE,UACGgJ,GAAmBA,EAAgB+B,OAAS,GAC3C,cAAC,IAAD,UACG/B,EAAgBvI,KAAI,SAAC6F,EAAW+D,GAAZ,OACnB,cAAC,IAAD,UACE,cAAC,GAAD,CAAeI,GAAInE,EAAUmE,MAD/B,UAAkBnE,EAAUmE,GAA5B,YAAkCJ,SAMxC,cAAC,IAAD,CAAKqF,WAAY/P,YAAkB,QAAS,YAAatB,EAAE,IAAIuR,QAAQ,KAAvE,+NAIA,cAAC,GAAD,U,UCiCO+G,GArDK,SAACC,EAAsBC,GACzC,IAAQ5U,EAASW,IAATX,KACR,EAA8B8E,cAAtBE,EAAR,EAAQA,QAASD,EAAjB,EAAiBA,SAEXwE,EAAWrE,mBAAQ,WACvB,GAAKH,EAAL,CACA,IAAM8P,EAAiB,IAAIzP,QAAMC,UAAUyP,GAASvP,KACpD,OAAO,IAAIoB,IAASgO,EAAcE,EAAgB,IAAItO,YAAUC,aAAazB,GAAU0B,gBACtF,CAAC1B,EAAU4P,IAEd,EAAkCvT,qBAAlC,mBAAO2T,EAAP,KAAkBC,EAAlB,KACA,EAAsC5T,oBAAS,GAA/C,mBAAO6T,EAAP,KAAoBC,EAApB,KACA,EAAoC9T,oBAAS,GAA7C,mBAAO+T,EAAP,KAAmBC,EAAnB,KAEMC,EAAgB/U,uBAAY,WAC3ByE,GAAaC,GAAY4P,GAAmBrL,GACjDvJ,EAAI,sBAAC,4BAAAQ,EAAA,sEAED0U,GAAe,GAFd,SAGoB3L,EAAS+L,QAAQV,EAAgB/V,IAAUC,KAAK,GAAGyW,IAAI,KAAKC,IAAI,IAHpF,cAGKxL,EAHL,gBAIKA,EAAOC,OAJZ,OAKDmL,GAAc,GACdF,GAAe,GANd,kDAQDtT,QAAQC,IAAR,MACAqT,GAAe,GATd,6DAYJ,CAAClQ,EAASuE,EAAUxE,EAAU/E,EAAMoV,EAAeF,EAAgBN,IAEhEa,EAAiBnV,sBAAW,sBAAC,sBAAAE,EAAA,yDAC5B+I,GAAaqL,GAAmB5P,EADJ,6DAEjCgQ,EAFiC,SAEdzL,EAASwL,UAAU/P,EAAS4P,GAFd,6EAGhC,CAACrL,EAAUvE,EAAS4P,IAYvB,OAVAvS,qBAAU,WACRoT,MACC,CAACA,IAEJpT,qBAAU,WACJ0S,GAAaA,EAAUW,GAAG,IAC5BN,GAAc,KAEf,CAACL,EAAWK,IAER,CACLL,YACAI,aACAF,cACAU,UAAWN,ICCAO,GAlDuC,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAC/C9U,EAAY0B,KAAZ1B,QACR,EAA6CwJ,KAArCnD,EAAR,EAAQA,iBAAkB3C,EAA1B,EAA0BA,eAC1B,EAA+CiQ,GAC7C1T,EAAkBD,GAAS6F,QAC3B5F,EAAkBD,GAASoD,SAFrBgR,EAAR,EAAQA,WAAYF,EAApB,EAAoBA,YAAaU,EAAjC,EAAiCA,UAIjC,EAAkBvU,qBAAlB,mBAAOpC,EAAP,KAAU8W,EAAV,KACA,EAAkB1U,qBAAlB,mBAAOlC,EAAP,KAAU6W,EAAV,KACA,EAAkB3U,qBAAlB,mBAAOhC,EAAP,KAAU4W,EAAV,KAEA,OACE,cAAC,IAAD,CAAOtI,UAAW,SAAUvR,MAAO,SAAU4X,EAAG,EAAGvU,QAAS,CAAE1B,KAAM,EAAGC,GAAI,IAA3E,SACE,eAAC,IAAD,CAAOyB,QAAS,EAAGiO,WAAY/P,YAAkB,QAAS,YAAatB,EAAE,IAAIuR,QAAQ,KAArF,UACE,cAAC,IAAD,CAAMtP,WAAW,OAAOxB,SAAS,KAAjC,+BAGA,cAAC,KAAD,CAAO+U,KAAK,SAASyB,YAAY,kBAAkBzD,SAAU,SAAClH,GAAD,OAAOoN,EAAKtO,OAAOkB,EAAEgH,OAAOhP,WACzF,cAAC,KAAD,CAAOkR,KAAK,SAASyB,YAAY,kBAAkBzD,SAAU,SAAClH,GAAD,OAAOqN,EAAKvO,OAAOkB,EAAEgH,OAAOhP,WACzF,cAAC,KAAD,CAAOkR,KAAK,SAASyB,YAAY,kBAAkBzD,SAAU,SAAClH,GAAD,OAAOsN,EAAKxO,OAAOkB,EAAEgH,OAAOhP,WACxFyU,EACC,eAAC,IAAD,CACExH,QAAS,OACTlB,GAAI,EACJqD,YAAa,OACbpT,GAAI,WACJD,OAAQ,CAAEC,GAAI,YACdkU,cAAgBxE,IAANpN,QAAyBoN,IAANlN,QAAyBkN,IAANhN,EAChDb,QAAS,kBAAMkG,EAAeoR,EAAW7W,GAAK,EAAGE,GAAK,EAAGE,GAAK,IAPhE,0BASgBgI,EAAmBA,EAAiB6O,IAAjB,SAAqB,GAAM,KAAIlO,WAA/B,SAA4C,GAAM,GAAI,KATzF,aAYA,cAAC,IAAD,CACE4F,QAAS,OACTlB,GAAI,EACJqD,YAAa,OACbpT,GAAI,WACJD,OAAQ,CAAEC,GAAI,YACdwZ,UAAWjB,EACX1W,QAAS,kBAAMoX,KAPjB,2BCRKQ,GA7BoC,SAAC,GAAkB,IAC9DjN,EAAS2E,GADoD,EAAflP,UAEpD,OACE,cAAC,IAAD,CAAOa,QAAS,EAAGiO,WAAY/P,YAAkB,QAAS,YAAatB,EAAE,IAAIuR,QAAQ,KAArF,SACGzE,EACC,qCACE,cAAC,IAAD,CAAM7K,WAAW,OAAOxB,SAAS,KAAjC,kCAAyDqM,EAAOlK,EAAhE,eAAwEkK,EAAOhK,EAA/E,eAAuFgK,EAAO9J,EAA9F,OACA,eAAC,IAAD,CAAMf,WAAW,OAAOxB,SAAS,KAAjC,uBACaqM,EAAOG,YAEpB,cAAC,IAAD,CACEsE,QAAS,OACTlB,GAAI,EACJqD,YAAa,OACbpT,GAAI,WACJD,OAAQ,CAAEC,GAAI,YACdK,GAAI6Q,IACJ9R,KAAI,mBAAcoN,EAAOV,IAP3B,wBAaF,cAAC,IAAD,OCkBO4N,GApCa,WAAO,IAAD,EACxB5N,EAAO+K,cAAP/K,GACFnE,EAAY2P,GAAaxM,OAAOgB,IAEtC,OACE,eAAC,IAAD,CAAWjJ,KAAM,MAAjB,UACE,cAAC,IAAD,CAAQsU,UAAW,cAAC,KAAD,IAAiB9W,GAAI6Q,IAAM9R,KAAM,eAApD,kBAGA,eAAC,IAAD,CACEwS,UAAW,SACXZ,UAAW,SACXvR,MAAO,SACPO,GAAIgB,YAAkB,WAAY,YAClCmS,GAAI,EACJzT,EAAG,EACHuR,QAAQ,KACRU,OAAO,MACPnS,UAAU,QATZ,UAWE,eAAC,IAAD,CAAMW,SAAS,KAAKwB,WAAW,OAA/B,iBACGgG,QADH,IACGA,OADH,EACGA,EAAWpH,KADd,gBAGA,cAAC,IAAD,CAAMuC,QAAS,EAAGqQ,GAAG,IAArB,gBACGxL,QADH,IACGA,GADH,UACGA,EAAWF,eADd,aACG,EAAoB3F,KAAI,SAACkK,GAAD,OACvB,cAAC,IAAD,CAAkB2F,OAAO,KAAzB,SACE,cAAC,GAAD,CAAY1P,SAAU+J,KADTA,WAMpBrE,GAAa,cAAC,GAAD,CAAcwR,UAAS,OAAExR,QAAF,IAAEA,OAAF,EAAEA,EAAWmE,SCzBlD6N,GAA2B,SAAC,GAAkB,IAAhBza,EAAe,EAAfA,SAC1BmF,EAAY0B,KAAZ1B,QAER,OAAO,cAAC,IAAD,CAAmBA,QAASA,EAA5B,SAAsCnF,KAGzC0a,GAAsB,SAAC,GAAkB,IAAhB1a,EAAe,EAAfA,SAE7B,OACE,cAAC,IAAD,UACE,cAAC2a,GAAD,UACE,cAAC,GAAD,UACE,cAAC,EAAD,UACE,cAAC,GAAD,UACG3a,aA0BA4a,OAjBf,WACE,OACE,cAAC,GAAD,UACE,cAACvJ,GAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwJ,KAAK,IAAIC,QAAS,cAACC,GAAD,MACzB,cAAC,IAAD,CAAOF,KAAK,cAAcC,QAAS,cAAC,GAAD,MACnC,cAAC,IAAD,CAAOD,KAAK,iBAAiBC,QAAS,cAAC,GAAD,MACtC,cAAC,IAAD,CAAOD,KAAK,cAAcC,QAAS,cAAC,GAAD,gBCjChCE,GAZS,SAACC,GACnBA,GAAeA,aAAuB3U,UACxC,+BAAqB4U,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.40faa4ec.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Flex,\n  Icon,\n  Link,\n  FlexProps,\n} from '@chakra-ui/react'\nimport { IconType } from 'react-icons';\nimport { ReactText } from 'react';\n\ninterface NavItemProps extends FlexProps {\n  icon: IconType;\n  url: string;\n  children: ReactText;\n}\nexport const NavItem = ({ icon, url, children, ...rest }: NavItemProps) => {\n  return (\n    <Link href={`#${url}`} style={{ textDecoration: 'none' }} _focus={{ boxShadow: 'none' }}>\n      <Flex\n        align=\"center\"\n        p=\"4\"\n        mx=\"4\"\n        borderRadius=\"lg\"\n        role=\"group\"\n        cursor=\"pointer\"\n        _hover={{\n          bg: 'cyan.400',\n          color: 'white',\n        }}\n        {...rest}>\n        {icon && (\n          <Icon\n            mr=\"4\"\n            fontSize=\"16\"\n            _groupHover={{\n              color: 'white',\n            }}\n            as={icon}\n          />\n        )}\n        {children}\n      </Flex>\n    </Link>\n  );\n};","import { IconType } from \"react-icons\";\nimport { FiCompass, FiHome, FiSettings, FiStar, FiTrendingUp } from \"react-icons/fi\";\n\ninterface LinkItemProps {\n  name: string;\n  icon: IconType;\n  url: string;\n}\nexport const LinkItems: Array<LinkItemProps> = [\n  { name: 'Home', icon: FiHome, url: '/' },\n  { name: 'Commanders', icon: FiTrendingUp, url: '/commanders' },\n  { name: 'Explore', icon: FiCompass, url: '/' },\n  { name: 'Favourites', icon: FiStar, url: '/' },\n  { name: 'Settings', icon: FiSettings, url: '/' },\n];","import React from 'react';\nimport {\n  Box,\n  CloseButton,\n  Flex,\n  useColorModeValue,\n  Text,\n  BoxProps,\n} from '@chakra-ui/react';\nimport { NavItem } from './Item';\nimport { LinkItems } from './items';\n\nexport interface SidebarProps extends BoxProps {\n  onClose: () => void;\n}\nexport const SidebarContent = ({ onClose, ...rest }: SidebarProps) => {\n  return (\n    <Box\n      transition=\"3s ease\"\n      bg={useColorModeValue('white', 'gray.900')}\n      borderRight=\"1px\"\n      borderRightColor={useColorModeValue('gray.200', 'gray.700')}\n      w={{ base: 'full', md: 60 }}\n      pos=\"fixed\"\n      h=\"full\"\n      {...rest}>\n      <Flex h=\"20\" alignItems=\"center\" mx=\"8\" justifyContent=\"space-between\">\n        <Text fontSize=\"2xl\" fontFamily=\"monospace\" fontWeight=\"bold\">\n          Logo\n        </Text>\n        <CloseButton display={{ base: 'flex', md: 'none' }} onClick={onClose} />\n      </Flex>\n      {LinkItems.map((link) => (\n        <NavItem key={link.name} icon={link.icon} url={link.url}>\n          {link.name}\n        </NavItem>\n      ))}\n    </Box>\n  );\n};","import { BigNumber } from \"ethers\";\n\nexport const shortAddress = (address: string | undefined): string => {\n  if (!address) return \"???\";\n  return (\n    address.substring(0, 4) +\n    \"...\" +\n    address.substring(address.length - 4, address.length)\n  );\n};\n\nexport const planetIdToCoordinate = (planetId: string) => {\n  const num = BigNumber.from(planetId)\n  const bits80 = BigNumber.from(\"0xFFFFF\")\n  const x = num.and(bits80)\n  const y = num.shr(80).and(bits80)\n  const z = num.shr(160).and(bits80)\n  return `(X=${x}; Y=${y}; Z=${z})`\n}","import {\n  VStack,\n  Image,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Spinner,\n} from \"@chakra-ui/react\";\n\ninterface ConfirmationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst ConfirmationModal: React.FC<ConfirmationModalProps> = ({\n  isOpen,\n  onClose\n}) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent maxW=\"350px\">\n        <ModalHeader>Confirming transaction...</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing=\"8px\" my={2}>\n            <Image src={\"ojiji\"} w=\"100%\" h=\"100%\" />\n            <Spinner size=\"xl\" thickness={\"8px\"} />\n          </VStack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ConfirmationModal;\n","import { useDisclosure } from \"@chakra-ui/react\";\nimport ConfirmationModal from \"components/ConfirmationModal\";\nimport React, { createContext, useCallback } from \"react\";\n\nexport interface ConfirmationModalContextValues {\n  confirming: boolean\n  open: (action: () => Promise<void>, onClose?: () => Promise<void>) => Promise<void>\n}\n\nexport const ConfirmationModalContext = createContext<ConfirmationModalContextValues>({\n  confirming: false,\n  open: () => new Promise(() => {})\n})\n\nexport const ChainPickerProvider: React.FC = ({ children }) => {\n  const { isOpen: confirming, onOpen, onClose: onCloseModal } = useDisclosure();\n\n  const open = useCallback(async (action: () => Promise<void>, onClose?: () => Promise<void>) => {\n    onOpen()\n    await action()\n    if (onClose) await onClose()\n    onCloseModal()\n  }, [onOpen, onCloseModal])\n\n  return (\n    <ConfirmationModalContext.Provider\n      value={{ confirming, open }}\n    >\n      {children}\n      <ConfirmationModal isOpen={confirming} onClose={onCloseModal} />\n    </ConfirmationModalContext.Provider>\n  );\n};\n\nexport default ChainPickerProvider;\n","import { useContext } from \"react\";\n\nimport { ConfirmationModalContext } from \"../contexts/ConfirmationModal\";\n\nconst useConfirmationModal = () => {\n  return {\n    ...useContext(ConfirmationModalContext),\n  };\n};\n\nexport default useConfirmationModal;\n","export interface Network {\n  name: string;\n  rpcUrl: string;\n  chainId: number;\n}\n\nexport const supportedNetworks: Network[] = [\n  {\n    name: \"Fantom Testnet\",\n    rpcUrl: \"https://xapi.testnet.fantom.network/lachesis\",\n    chainId: 4002,\n  },\n  {\n    name: \"Fantom Mainnet\",\n    rpcUrl: \"https://rpc.fantom.network/\",\n    chainId: 250,\n  },\n];\n\nexport const deployedAddresses: { [id: number]: { [contract: string]: string } } = {\n  4002: {\n    \"sanctis\": \"0x82796af064346a29d5a27057d16a28be0c4b3316\",\n    \"credits\": \"0x9abbbddbd5e6bf2697c4eb8109e7bd4335e40bb1\",\n    \"parliament\": \"0xacec97ae37b3fd23d699251a341e902689e1c238\",\n    \"commanders\": \"0x3032804c781d518f554b4e5e0e179103b15eab34\",\n    \"planets\": \"0x2620ae485267a456d5fe872bef584b4a52c243e2\",\n    \"fleets\": \"0x08fd27f8dd1e2b28b2ce99572e0699c0364f0d29\",\n    \"humans\": \"0x989c5d11a3607cd3d5663dd2c89f9d70e63bbf9c\",\n    \"energy\": \"0x9023550b35e8438734d6f541648ea036a46033d4\",\n    \"iron\": \"0x84b288f20389aa710b7ff0232e48c4608b731fb8\",\n    \"deuterium\": \"0xdd7e06e51a748acacd6574d26bb73d027667f08c\",\n    \"silicon\": \"0x7a19b32208ceaa7567fe412af85e05403021cef8\",\n    \"ironMines\": \"0x5571c77a08c57548eca2f619e192a2eeebdbde9b\",\n    \"siliconFurnaces\": \"0xefdfe52bd8b7d30a1a8bd969f64e635b1fc82897\",\n    \"heavyWaterPlants\": \"0x5c40018bdc649998029b549ee93e05bf82b9cfce\",\n    \"solarPanels\": \"0x0d911b301015e69754e1dea19255e65890f362df\",\n    \"fusionReactors\": \"0x8c36ccff8265a3e8a5fe4623903fa1284ef26beb\",\n    \"spatioports\": \"0xa569f91ab1038416239635ce84917e8a2c2b1f68\",\n    \"transporters\": \"0x911361700250b3a17b56fd0b874ba3799b1f4bc3\",\n    \"scouts\": \"0xfdb621612cae882d3de41f46de3da9e9c8f81da6\",\n    \"destroyers\": \"0xceacea7a31c308f082cf7cb0273d6b22948bfa22\",\n    \"plundering\": \"0x8febd06842530cbc196178630a6d3708f886b075\",\n    \"resourceWrapper\": \"0x43d37eb9f543bc45dab093ecae13f899e637ceec\"\n  },\n};\n\nexport default deployedAddresses;\n","export default __webpack_public_path__ + \"static/media/electric.711b3b48.svg\";","export default __webpack_public_path__ + \"static/media/metal-bar.7f83f5c0.svg\";","export default __webpack_public_path__ + \"static/media/ore.4eebbfb5.svg\";","export default __webpack_public_path__ + \"static/media/topaz.a9cfb39d.svg\";","import { useCallback, useEffect, useState } from \"react\";\n\nexport default function useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = useCallback((value: T | ((value: T) => T)) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  }, [key, storedValue]);\n\n  // Update the stored value if the key is updated\n  useEffect(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      setStoredValue(item ? JSON.parse(item) : initialValue);\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      setStoredValue(initialValue);\n    }\n  }, [key, initialValue])\n\n  return [storedValue, setValue] as [T, (value: T | ((value: T) => T)) => void];\n}","import React, { createContext } from \"react\";\n\nimport { supportedNetworks, Network } from \"../constants\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nexport interface ChainPickerContextValues extends Network {\n  setNetwork: (network: Network) => void\n}\n\nexport const ChainPickerContext = createContext<ChainPickerContextValues>({\n  ...supportedNetworks[0],\n  setNetwork: () => {}\n})\n\nexport const ChainPickerProvider: React.FC = ({ children }) => {\n  const [network, setNetwork] = useLocalStorage<Network>(\"network\", supportedNetworks[0])\n\n  return (\n    <ChainPickerContext.Provider\n      value={{ ...network, setNetwork }}\n    >\n      {children}\n    </ChainPickerContext.Provider>\n  );\n};\n\nexport default ChainPickerProvider;\n","import { useContext } from \"react\";\n\nimport { ChainPickerContext } from \"../contexts/ChainPicker\";\n\nconst useChainPicker = () => {\n  return {\n    ...useContext(ChainPickerContext),\n  };\n};\n\nexport default useChainPicker;\n","import energy from '../assets/electric.svg'\nimport metalBar from '../assets/metal-bar.svg'\nimport ore from '../assets/ore.svg'\nimport deuterium from '../assets/topaz.svg'\nimport deployedAddresses from '../constants'\nimport { Infrastructure, Race, Resource, Ship } from '../contexts/Sanctis/types'\nimport useChainPicker from './useChainPicker'\n\nconst useApprovedObjects = () => {\n  const { chainId } = useChainPicker();\n\n  const races: Race[] = [{ name: \"Human\", address: deployedAddresses[chainId].humans }];\n  const resources: Resource[] = [\n    { name: \"Energy\", address: deployedAddresses[chainId].energy, icon: energy },\n    { name: \"Iron\", address: deployedAddresses[chainId].iron, icon: metalBar },\n    { name: \"Silicon\", address: deployedAddresses[chainId].silicon, icon: ore },\n    { name: \"Deuterium\", address: deployedAddresses[chainId].deuterium, icon: deuterium },\n  ];\n  const infrastructures: Infrastructure[] = [\n    {\n      name: \"Iron mines\",\n      description: \"It extracts a constant rate of iron.\",\n      address: deployedAddresses[chainId].ironMines,\n    },\n    {\n      name: \"Silicon Furnaces\",\n      description: \"It produces silicon at a constant rate.\",\n      address: deployedAddresses[chainId].siliconFurnaces,\n    },\n    {\n      name: \"Heavy Water Plants\",\n      description: \"Used to concentrate deuterium.\",\n      address: deployedAddresses[chainId].heavyWaterPlants,\n    },\n    {\n      name: \"Solar Panels\",\n      description: \"Harvests the energy of the nearby star\",\n      address: deployedAddresses[chainId].solarPanels,\n    },\n    {\n      name: \"Fusion Reactors\",\n      description: \"Fuses deuterium isotopes to create energy.\",\n      address: deployedAddresses[chainId].fusionReactors,\n    },\n    {\n      name: \"Spatioports\",\n      description: \"A building necessary to build ships\",\n      address: deployedAddresses[chainId].spatioports,\n    },\n  ];\n  const ships: Ship[] = [\n    {\n      name: \"Transporters\",\n      description: \"Small ships used to transports resources around.\",\n      address: deployedAddresses[chainId].transporters,\n    },\n    { name: \"Scouts\", description: \"Fast reconnaissance units.\", address: deployedAddresses[chainId].scouts },\n    {\n      name: \"Destroyers\",\n      description: \"Heavily armed ships used to take down ennemy's fleets\",\n      address: deployedAddresses[chainId].destroyers,\n    },\n  ];\n\n  return {\n    races,\n    resources,\n    infrastructures,\n    ships,\n  };\n};\n\nexport default useApprovedObjects;\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { ExternalProvider } from \"@ethersproject/providers\";\nimport { BigNumber, Contract, ethers, providers, utils } from \"ethers\";\nimport useConfirmationModal from \"hooks/useConfirmationModal\";\nimport React, { createContext, useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { deployedAddresses } from \"../../constants\";\nimport CommandersABI from \"../../constants/contracts/Commanders.sol/Commanders.json\";\nimport InfrastructureABI from \"../../constants/contracts/IInfrastructure.sol/IInfrastructure.json\";\nimport PowerPlantsABI from \"../../constants/contracts/IPowerPlants.sol/IPowerPlants.json\";\nimport ResourceABI from \"../../constants/contracts/IResource.sol/IResource.json\";\nimport ResourceProducerABI from \"../../constants/contracts/IResourceProducer.sol/IResourceProducer.json\";\nimport ShipABI from \"../../constants/contracts/IShip.sol/IShip.json\";\nimport PlanetsABI from \"../../constants/contracts/Planets.sol/Planets.json\";\nimport SanctisABI from \"../../constants/contracts/Sanctis.sol/Sanctis.json\";\nimport CreditsABI from \"../../constants/contracts/SpaceCredits.sol/SpaceCredits.json\";\nimport useApprovedObjects from \"../../hooks/useApprovedObjects\";\nimport useChainPicker from \"../../hooks/useChainPicker\";\nimport { Commander, Planet, Race, Reserve } from \"./types\";\n\nexport interface SanctisContextValues {\n  colonizationCost?: BigNumber;\n  ownedCredits?: number;\n  ownedCommanders?: Commander[];\n  currentCommander?: Commander;\n  commanders: { [commanderId: number]: Commander };\n  planets: { [planetId: string]: Planet };\n  setCurrentCommander: (commander: Commander) => void;\n  fetchCommander: (commanderId: number) => Promise<Commander | undefined | null>;\n  fetchPlanet: (planetId: string) => Promise<Planet | undefined | null>;\n  createCommander: (name: string, race: Race) => Promise<void>;\n  colonizePlanet: (commanderId: number, x: number, y: number, z: number) => Promise<void>;\n}\n\nexport const SanctisContext = createContext<SanctisContextValues>({\n  commanders: {},\n  planets: {},\n  setCurrentCommander: (commander: Commander) => {},\n  fetchCommander: () => new Promise(() => {}),\n  fetchPlanet: () => new Promise(() => {}),\n  createCommander: () => new Promise(() => {}),\n  colonizePlanet: () => new Promise(() => {}),\n});\n\nexport const SanctisProvider: React.FC = ({ children }) => {\n  const toast = useToast();\n  const { open } = useConfirmationModal();\n  const { chainId } = useChainPicker();\n  const approvedObjects = useApprovedObjects();\n  const { ethereum, account } = useWallet<ExternalProvider>();\n\n  const contracts = useMemo(() => {\n    if (!ethereum) return;\n    const SanctisInterface = new utils.Interface(SanctisABI.abi);\n    const CommandersInterface = new utils.Interface(CommandersABI.abi);\n    const CreditsInterface = new utils.Interface(CreditsABI.abi);\n    const PlanetsInterface = new utils.Interface(PlanetsABI.abi);\n    const ResourceInterface = new utils.Interface(ResourceABI.abi);\n    const PowerPlantsInterface = new utils.Interface(PowerPlantsABI.abi);\n    const ResourceProducerInterface = new utils.Interface(ResourceProducerABI.abi);\n    const ShipInterface = new utils.Interface(ShipABI.abi);\n    const signer = new providers.Web3Provider(ethereum).getSigner();\n    return {\n      sanctis: new Contract(deployedAddresses[chainId].sanctis, SanctisInterface, signer),\n      commanders: new Contract(deployedAddresses[chainId].commanders, CommandersInterface, signer),\n      credits: new Contract(deployedAddresses[chainId].credits, CreditsInterface, signer),\n      planets: new Contract(deployedAddresses[chainId].planets, PlanetsInterface, signer),\n      energy: new Contract(deployedAddresses[chainId].energy, ResourceInterface, signer),\n      iron: new Contract(deployedAddresses[chainId].iron, ResourceInterface, signer),\n      silicon: new Contract(deployedAddresses[chainId].silicon, ResourceInterface, signer),\n      deuterium: new Contract(deployedAddresses[chainId].deuterium, ResourceInterface, signer),\n      solarPanels: new Contract(deployedAddresses[chainId].solarPanels, PowerPlantsInterface, signer),\n      fusionReactors: new Contract(deployedAddresses[chainId].fusionReactors, PowerPlantsInterface, signer),\n      ironMines: new Contract(deployedAddresses[chainId].ironMines, ResourceProducerInterface, signer),\n      siliconFurnaces: new Contract(deployedAddresses[chainId].siliconFurnaces, ResourceProducerInterface, signer),\n      heavyWaterPlants: new Contract(deployedAddresses[chainId].heavyWaterPlants, ResourceProducerInterface, signer),\n      transporters: new Contract(deployedAddresses[chainId].transporters, ShipInterface, signer),\n      scouts: new Contract(deployedAddresses[chainId].scouts, ShipInterface, signer),\n      destroyers: new Contract(deployedAddresses[chainId].destroyers, ShipInterface, signer),\n    };\n  }, [chainId, ethereum]);\n\n  const [ownedCredits, setOwnedCredits] = useState<number>();\n  const [ownedCommanders, setOwnedCommanders] = useState<Commander[]>();\n  const [commanders, setCommanders] = useState<{ [commanderId: string]: Commander }>({});\n  const [currentCommander, setCurrentCommander] = useState<Commander>();\n  const [planets, setPlanets] = useState<{ [planetId: string]: Planet }>({});\n  const [colonizationCost, setColonizationCost] = useState<BigNumber>();\n\n  const fetchColonizationCost = useCallback(async () => {\n    if (!contracts) return;\n    setColonizationCost(await contracts.planets.colonizationCost());\n  }, [contracts]);\n\n  useEffect(() => {\n    fetchColonizationCost();\n  }, [fetchColonizationCost]);\n\n  const fetchOwnedCredits = useCallback(async () => {\n    if (!contracts || !account) return;\n    setOwnedCredits(Number(ethers.utils.formatEther(await contracts.credits.balanceOf(account))));\n  }, [contracts, account]);\n\n  useEffect(() => {\n    fetchOwnedCredits();\n  }, [fetchOwnedCredits]);\n\n  const fetchCommander = useCallback(\n    async (commanderId: number) => {\n      if (!contracts) return;\n\n      try {\n        const [name, race] = await contracts.commanders.commander(commanderId);\n        const empireSize = (await contracts.planets.empireSize(commanderId)).toNumber();\n        // TODO: Fetch only planet IDs\n        const commanderPlanets = await Promise.all(\n          Array(empireSize)\n            .fill(0)\n            .map(async (_, i) => (await contracts.planets.commanderPlanetByIndex(commanderId, i)).toString())\n        );\n        const commander = {\n          id: commanderId,\n          name,\n          race: approvedObjects.races.find((e) => e.address === race),\n          planets: commanderPlanets,\n        };\n        setCommanders((old) => {\n          old[commanderId] = commander;\n          return old;\n        });\n        return commander;\n      } catch (err) {\n        console.log(\"Error fetching commander:\", err);\n        return null;\n      }\n    },\n    [approvedObjects, contracts]\n  );\n\n  const fetchOwnedCommanders = useCallback(async () => {\n    if (!contracts || !account) return;\n\n    const commandersBalance = (await contracts.commanders.balanceOf(account)).toNumber();\n\n    if (ownedCommanders?.length === commandersBalance) return;\n    setOwnedCommanders(\n      (\n        await Promise.all(\n          Array(commandersBalance)\n            .fill(0)\n            .map(\n              async (_, i) =>\n                (await fetchCommander((await contracts.commanders.tokenOfOwnerByIndex(account, i)).toNumber()))!\n            )\n        )\n      ).filter(Boolean)\n    );\n  }, [account, contracts, ownedCommanders, fetchCommander]);\n\n  useEffect(() => {\n    fetchOwnedCommanders();\n  }, [fetchOwnedCommanders]);\n\n  const fetchPlanet = useCallback(\n    async (planetId: string) => {\n      if (!contracts) return;\n      try {\n        const { status, ruler, x, y, z, humidity } = await contracts.planets.planet(planetId);\n        const reserves: Reserve[] = await Promise.all(\n          approvedObjects.resources.map(async (resource) => {\n            const ResourceInterface = new utils.Interface(ResourceABI.abi);\n            const contract = new Contract(\n              resource.address,\n              ResourceInterface,\n              new providers.Web3Provider(ethereum).getSigner()\n            );\n            return {\n              resource,\n              amount: await contract.reserve(planetId),\n            };\n          })\n        );\n        const infrastructures = await Promise.all(\n          approvedObjects.infrastructures.map(async (infrastructure) => {\n            const InfrastructureInterface = new utils.Interface(InfrastructureABI.abi);\n            const contract = new Contract(\n              infrastructure.address,\n              InfrastructureInterface,\n              new providers.Web3Provider(ethereum).getSigner()\n            );\n            return {\n              ...infrastructure,\n              level: (await contract.level(planetId)).toNumber(),\n            };\n          })\n        );\n        const planet = {\n          id: planetId,\n          status: status,\n          ruler: ruler.toNumber(),\n          x: x.toNumber(),\n          y: y.toNumber(),\n          z: z.toNumber(),\n          humidity: humidity,\n          infrastructures: infrastructures,\n          reserves: reserves,\n        };\n        setPlanets((old) => {\n          old[planetId] = planet;\n          return old;\n        });\n        return planet;\n      } catch (err) {\n        console.log(\"Error fetching planet:\", err);\n        return null;\n      }\n    },\n    [approvedObjects, contracts, ethereum]\n  );\n\n  const createCommander = useCallback(\n    async (name: string, race: Race) => {\n      if (!contracts) return;\n      open(async () => {\n        try {\n          const result = await contracts.commanders.create(name, race.address);\n          await result.wait();\n          await fetchOwnedCommanders();\n          toast({ status: \"success\", title: \"Created\", description: `The world awaits your order, Commander ${name}` });\n        } catch (err: any) {\n          toast({ status: \"error\", title: \"Error\", description: `Failed creation: ${err.message}` });\n        }\n      });\n    },\n    [contracts, open, toast, fetchOwnedCommanders]\n  );\n\n  const colonizePlanet = useCallback(\n    async (commanderId: number, x: number, y: number, z: number) => {\n      if (!contracts) return;\n\n      open(async () => {\n        try {\n          const planetId = BigNumber.from(z).shl(80).add(y).shl(80).add(x);\n          const result = await contracts.planets.colonize(commanderId, planetId);\n          await result.wait();\n          await fetchPlanet(planetId.toString());\n          await fetchOwnedCredits();\n          await fetchCommander(commanderId);\n          toast({ status: \"success\", title: \"Created\", description: `A new planet has been colonized` });\n        } catch (err: any) {\n          console.log(err);\n          toast({ status: \"error\", title: \"Error\", description: `Failed colonization: ${err.message}` });\n        }\n      });\n    },\n    [contracts, open, toast, fetchCommander, fetchPlanet, fetchOwnedCredits]\n  );\n\n  return (\n    <SanctisContext.Provider\n      value={{\n        colonizationCost,\n        ownedCredits,\n        ownedCommanders,\n        commanders,\n        planets,\n        currentCommander,\n        setCurrentCommander,\n        fetchCommander,\n        fetchPlanet,\n        createCommander,\n        colonizePlanet,\n      }}\n    >\n      {children}\n    </SanctisContext.Provider>\n  );\n};\n\nexport default SanctisProvider;\n","import { useContext } from \"react\";\n\nimport { SanctisContext } from \"../contexts/Sanctis\";\n\nconst useSanctis = () => {\n  return {\n    ...useContext(SanctisContext),\n  };\n};\n\nexport default useSanctis;\n","export default __webpack_public_path__ + \"static/media/character.977d0c9e.svg\";","import React, { useCallback } from \"react\";\nimport {\n  Avatar,\n  Box,\n  Flex,\n  HStack,\n  VStack,\n  useColorModeValue,\n  Text,\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n  MenuGroup,\n} from \"@chakra-ui/react\";\nimport { FiChevronDown } from \"react-icons/fi\";\nimport { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { shortAddress } from \"utils\";\nimport numeral from \"numeral\";\nimport useSanctis from \"hooks/useSanctis\";\n\nimport commanderIcon from \"../../assets/character.svg\";\n\nexport const CommanderBadge: React.FC<{ setAutoconnect: (date: number) => void }> = ({ setAutoconnect }) => {\n  const { reset, account } = useWallet();\n  const { ownedCredits, ownedCommanders, currentCommander, setCurrentCommander } = useSanctis();\n\n  const handleReset = useCallback(() => {\n    setAutoconnect(Date.now());\n    reset();\n  }, [setAutoconnect, reset]);\n\n  return (\n    <Flex alignItems={\"center\"}>\n      <Menu>\n        <MenuButton py={2} transition=\"all 0.3s\" _focus={{ boxShadow: \"none\" }}>\n          <HStack>\n            <Avatar size={\"sm\"} src={commanderIcon} />\n            <VStack display={{ base: \"none\", md: \"flex\" }} alignItems=\"flex-start\" spacing=\"1px\" ml=\"2\">\n              <Text fontSize=\"sm\">{currentCommander ? currentCommander.name : shortAddress(account || \"\")}</Text>\n              <Text fontSize=\"xs\" color=\"gray.600\">\n                {ownedCredits ? numeral(ownedCredits).format(\"0.00aa\") : \"???\"} $CREDS\n              </Text>\n            </VStack>\n            <Box display={{ base: \"none\", md: \"flex\" }}>\n              <FiChevronDown />\n            </Box>\n          </HStack>\n        </MenuButton>\n        <MenuList bg={useColorModeValue(\"white\", \"gray.900\")} borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}>\n          <MenuGroup title=\"Commanders\">\n            {[\n              ownedCommanders &&\n                ownedCommanders.map((e) => (\n                  <MenuItem key={e.name || \"\" + e.id} onClick={() => setCurrentCommander(e)}>\n                    {e.name}\n                  </MenuItem>\n                )),\n              <MenuItem key={\"create\"}>Create a commander</MenuItem>,\n            ]}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuGroup title=\"Wallet\">\n            <MenuItem onClick={handleReset}>Disconnect</MenuItem>\n          </MenuGroup>\n        </MenuList>\n      </Menu>\n    </Flex>\n  );\n};\n","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import {\n  IconButton,\n  Flex,\n  HStack,\n  useColorModeValue,\n  Text,\n  FlexProps,\n  Button,\n  useDisclosure,\n  Modal,\n  ModalCloseButton,\n  ModalHeader,\n  ModalContent,\n  ModalBody,\n  Box,\n  ModalOverlay,\n} from '@chakra-ui/react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport {\n  FiMenu,\n} from 'react-icons/fi';\nimport { GrConnect } from \"react-icons/gr\"\nimport { CommanderBadge } from './CommanderBadge';\nimport { ColorModeSwitcher } from 'ColorModeSwitcher';\nimport { useCallback, useEffect } from 'react';\nimport useLocalStorage from 'hooks/useLocalStorage';\n\ninterface MobileProps extends FlexProps {\n  onOpen: () => void;\n}\n\nconst validConnectors = [\n  { name: \"MetaMask\", id: \"injected\" }\n]\n\nconst autoconnectPeriod = 86400000\n\nexport const MobileNav = ({ onOpen, ...rest }: MobileProps) => {\n  const { account, connect } = useWallet()\n  const { isOpen, onOpen: openModal, onClose } = useDisclosure()\n  const [autoconnect, setAutoconnect] = useLocalStorage(\"autoconnectExpirationDate\", Date.now())\n  const [connector, setConnector] = useLocalStorage<string | undefined>(\"connector\", undefined)\n\n  const handleChooseWallet = useCallback(async () => {\n    openModal()\n  }, [openModal])\n\n  const handleConnect = useCallback(async (id: string) => {\n    await connect(id as any)\n    setAutoconnect(Date.now() + autoconnectPeriod)\n    setConnector(id)\n    onClose()\n  }, [connect, onClose, setAutoconnect, setConnector])\n\n  useEffect(() => {\n    if(!connector) return\n    if(autoconnect > Date.now() && !account) {\n      connect(connector as any)\n    }\n  }, [account, autoconnect, connector, connect, handleConnect])\n\n  return (\n    <Flex\n      ml={{ base: 0, md: 60 }}\n      px={{ base: 4, md: 4 }}\n      height=\"20\"\n      alignItems=\"center\"\n      bg={useColorModeValue('white', 'gray.900')}\n      borderBottomWidth=\"1px\"\n      borderBottomColor={useColorModeValue('gray.200', 'gray.700')}\n      justifyContent={{ base: 'space-between', md: 'flex-end' }}\n      {...rest}>\n      <IconButton\n        display={{ base: 'flex', md: 'none' }}\n        onClick={onOpen}\n        variant=\"outline\"\n        aria-label=\"open menu\"\n        icon={<FiMenu />}\n      />\n      <Text\n        display={{ base: 'flex', md: 'none' }}\n        fontSize=\"2xl\"\n        fontFamily=\"monospace\"\n        fontWeight=\"bold\">\n        Logo\n      </Text>\n\n      <HStack spacing={{ base: '0', md: '6' }}>\n        <ColorModeSwitcher />\n        {account ? (\n          <CommanderBadge setAutoconnect={setAutoconnect} />\n        ) : (\n          <Button\n            size=\"lg\"\n            variant=\"ghost\"\n            aria-label=\"open menu\"\n            leftIcon={<GrConnect />}\n            onClick={handleChooseWallet}\n          >\n            Connect\n          </Button>\n        )}\n      </HStack>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalCloseButton />\n          <ModalHeader>Choose a wallet</ModalHeader>\n          <ModalBody>\n            {Object.values(validConnectors).map(connector =>\n              <Button key={connector.id} isFullWidth onClick={() => handleConnect(connector.id)}><Box>{connector.name}</Box></Button>\n            )}\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </Flex>\n  );\n};","import Sidebar from \"./Sidebar\"\n\nexport default Sidebar","import { ReactNode } from 'react';\nimport {\n  Box,\n  useColorModeValue,\n  Drawer,\n  DrawerContent,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { SidebarContent } from './Content';\nimport { MobileNav } from './Mobile';\n\nexport default function SidebarWithHeader({\n  children,\n}: {\n  children: ReactNode;\n}) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <Box minH=\"100vh\" bg={useColorModeValue('gray.100', 'gray.900')}>\n      <SidebarContent\n        onClose={() => onClose}\n        display={{ base: 'none', md: 'block' }}\n      />\n      <Drawer\n        autoFocus={false}\n        isOpen={isOpen}\n        placement=\"left\"\n        onClose={onClose}\n        returnFocusOnClose={false}\n        onOverlayClick={onClose}\n        size=\"full\">\n        <DrawerContent>\n          <SidebarContent onClose={onClose} />\n        </DrawerContent>\n      </Drawer>\n      {/* mobilenav */}\n      <MobileNav onOpen={onOpen} />\n      <Box ml={{ base: 0, md: 60 }} p=\"4\">\n        {children}\n      </Box>\n    </Box>\n  );\n}","import React from \"react\";\nimport { Box, Button, Container, Heading, Link, Stack, useColorModeValue } from \"@chakra-ui/react\";\n\nimport useCommanders from \"../../hooks/useSanctis\";\n\nconst Commanders: React.FC = () => {\n  const { ownedCommanders } = useCommanders();\n\n  console.log(ownedCommanders);\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Stack\n        background={useColorModeValue(\"white\", \"gray.800\")}\n        textAlign={\"center\"}\n        align={\"center\"}\n        spacing={{ base: 8, md: 10 }}\n        p=\"3\"\n        rounded=\"xl\"\n      >\n        <Heading>Sanctis</Heading>\n        <Box>\n          A commander is free to create and you can have as many as you want. However, the game is designed to encourage\n          players to have few commanders with a big empire rather than many commanders with smaller empires.\n        </Box>\n        <Button as={Link} href={\"#/commanders\"}>\n          Choose a commander\n        </Button>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Commanders;\n","import { Planet } from \"contexts/Sanctis/types\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport useSanctis from \"./useSanctis\";\n\nexport default function usePlanet(planetId?: string) {\n  const { planets, fetchPlanet } = useSanctis()\n  const [planet, setPlanet] = useState<Planet | null>()\n\n  const fetch = useCallback(async () => {\n    if(!planetId) return\n    else if(!planets[planetId]) {\n      setPlanet(await fetchPlanet(planetId))\n    } else {\n      setPlanet(planets[planetId])\n    }\n  }, [planets, planetId, fetchPlanet])\n\n  useEffect(() =>  {\n    fetch()\n  }, [fetch])\n\n  return planet\n}","import { Box, Flex, Image, Text, Tooltip, useColorModeValue } from '@chakra-ui/react'\nimport { BigNumber, ethers } from 'ethers'\nimport React, { useMemo } from 'react'\n\nimport { Resource } from '../contexts/Sanctis/types'\n\nconst ResourceBadge: React.FC<{ resource: Resource; amount?: BigNumber; size?: \"sm\" | \"md\" | \"lg\" }> = ({\n  resource,\n  amount,\n  size = \"md\",\n}) => {\n  const bgColor = useColorModeValue(\"gray.400\", \"gray.600\");\n  const iconSize = ((size: string) => {\n    switch (size) {\n      case \"sm\":\n        return \"30px\";\n      case \"md\":\n        return \"40px\";\n      case \"lg\":\n        return \"50px\";\n      default:\n        return \"40px\";\n    }\n  })(size);\n  const width = useMemo(() => {\n    switch (size) {\n      case \"sm\":\n        return \"3em\";\n      case \"md\":\n        return \"2em\";\n      case \"lg\":\n        return \"2em\";\n    }\n  }, [size]);\n  const content = useMemo(() => {\n    return (\n      <Flex\n        background={bgColor}\n        p=\"2\"\n        rounded=\"3xl\"\n        w=\"calc(120%)\"\n        shadow={size}\n        align=\"center\"\n        direction={size !== \"sm\" ? \"column\" : \"row\"}\n      >\n        <Image src={resource.icon} background=\"black\" maxW={iconSize} maxH={iconSize} p={2} rounded=\"full\" />\n        <Box ml=\"1\" minW={width} justifyContent={size !== \"sm\" ? \"center\" : \"start\"}>\n          <Text fontWeight=\"bold\" fontSize={size} width=\"fit-content\">\n            {amount ? ethers.utils.formatEther(amount) : \"???\"}\n          </Text>\n          {size !== \"sm\" && (\n            <Text fontSize={size} width=\"fit-content\">\n              {resource.name}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n    );\n  }, [amount, iconSize, resource, bgColor, size, width]);\n\n  return size !== \"sm\" ? content : <Tooltip label={resource.name}>{content}</Tooltip>;\n};\n\nexport default ResourceBadge;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useToast } from '@chakra-ui/react'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { Contract, ethers, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport ResourceProducerABI from '../constants/contracts/IResourceProducer.sol/IResourceProducer.json'\nimport { Infrastructure } from '../contexts/Sanctis/types'\nimport useApprovedObjects from './useApprovedObjects'\nimport useConfirmationModal from './useConfirmationModal'\nimport useSanctis from './useSanctis'\n\nconst useInfrastructure = (infrastructure: Infrastructure, planetId: string) => {\n  const toast = useToast();\n  const { open } = useConfirmationModal();\n  const { resources } = useApprovedObjects();\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { fetchPlanet } = useSanctis();\n  const [loadedInfrastructure, setLoadedInfrastructure] = useState<Infrastructure>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const ResourceProducerInterface = new utils.Interface(ResourceProducerABI.abi);\n    return new Contract(\n      infrastructure.address,\n      ResourceProducerInterface,\n      new providers.Web3Provider(ethereum).getSigner()\n    );\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n\n    const level = await contract.level(planetId);\n    const [costsResources, nextCosts] = await contract.costs(planetId);\n    const nextUpgrade = await contract.nextUpgrade(planetId);\n    setLoadedInfrastructure({\n      ...infrastructure,\n      level: level.toNumber(),\n      nextUpgrade: nextUpgrade.toNumber(),\n      costsResources: costsResources.map((e: string) =>\n        resources.find((a) => ethers.utils.getAddress(e) === ethers.utils.getAddress(a.address))\n      ),\n      nextCosts,\n    });\n\n    setIsFetching(false);\n  }, [isFetching, infrastructure, planetId, resources, contract, setLoadedInfrastructure]);\n\n  useEffect(() => {\n    if (!loadedInfrastructure.nextCosts || loadedInfrastructure.address !== infrastructure.address) fetch();\n  }, [loadedInfrastructure, infrastructure, fetch]);\n\n  const create = useCallback(\n    async (planetId: string) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.create(planetId);\n          await result.wait();\n          await fetch();\n          await fetchPlanet(planetId);\n          toast({\n            status: \"success\",\n            title: \"Created\",\n            description: `${infrastructure.name} has been built on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({ status: \"error\", title: \"Error\", description: `Failed creation: ${err.message}` });\n        }\n      });\n    },\n    [contract, infrastructure, fetch, fetchPlanet, open, toast]\n  );\n\n  const upgrade = useCallback(\n    async (planetId: string) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.upgrade(planetId);\n          await result.wait();\n          await fetch();\n          await fetchPlanet(planetId);\n          toast({\n            status: \"success\",\n            title: \"Upgraded\",\n            description: `${infrastructure.name} has been upgraded on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({ status: \"error\", title: \"Error\", description: `Failed upgrade: ${err.message}` });\n        }\n      });\n    },\n    [contract, infrastructure, fetch, fetchPlanet, open, toast]\n  );\n\n  return {\n    infrastructure: loadedInfrastructure,\n    create,\n    upgrade,\n  };\n};\n\nexport default useInfrastructure;\n","import { Button, Select, Stack, Text, useColorModeValue, Wrap, WrapItem } from '@chakra-ui/react'\nimport ResourceBadge from 'components/ResourceBadge'\nimport React, { ChangeEvent, useCallback, useMemo, useState } from 'react'\n\nimport { Infrastructure, Planet, Resource } from '../../contexts/Sanctis/types'\nimport useApprovedObjects from '../../hooks/useApprovedObjects'\nimport useInfrastructure from '../../hooks/useInfrastructure'\n\nconst CreateInfrastuctureCard: React.FC<{ planet: Planet }> = ({ planet }) => {\n  const { infrastructures } = useApprovedObjects();\n  const choices = useMemo(() => {\n    return planet.infrastructures.filter((e) => !e.level);\n  }, [planet.infrastructures]);\n  const [choice, setChoice] = useState<Infrastructure | undefined>(choices[0]);\n  const { infrastructure, create } = useInfrastructure(choice || infrastructures[0], planet.id);\n\n  const handleSelect = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      setChoice(JSON.parse(e.target.value));\n    },\n    [setChoice]\n  );\n\n  const handleCreate = useCallback(async () => {\n    create(planet.id);\n  }, [planet, create]);\n\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\n      <Text fontSize=\"xl\" fontWeight=\"bold\">\n        Choose an infrastructure to build\n      </Text>\n      <Select onChange={handleSelect}>\n        {choices.map((e) => (\n          <option key={e.name} value={JSON.stringify(e)}>\n            {e.name}\n          </option>\n        ))}\n      </Select>\n      {choice && infrastructure && (\n        <>\n          <Text fontSize=\"lg\">{infrastructure.description}</Text>\n          {infrastructure.nextCosts && infrastructure.costsResources ? (\n            <Stack spacing={0}>\n              <Text>Costs:</Text>\n              <Wrap mt={0}>\n                {infrastructure.costsResources.map((e: Resource, i) => (\n                  <WrapItem key={e.name} mt={0}>\n                    <ResourceBadge resource={e} amount={infrastructure.nextCosts![i]} size=\"sm\" />\n                  </WrapItem>\n                ))}\n              </Wrap>\n            </Stack>\n          ) : (\n            <Text>This infrastructure is free to build</Text>\n          )}\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            onClick={handleCreate}\n          >\n            Create\n          </Button>\n        </>\n      )}\n    </Stack>\n  );\n};\n\nexport default CreateInfrastuctureCard;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { BigNumber, Contract, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport PowerPlantABI from '../constants/contracts/IPowerPlants.sol/IPowerPlants.json'\nimport { Infrastructure, Resource } from '../contexts/Sanctis/types'\nimport useApprovedObjects from './useApprovedObjects'\nimport useInfrastructure from './useInfrastructure'\n\nexport interface PowerPlantCharacteristics extends Infrastructure {\n  energy?: Resource;\n  currentProduction?: BigNumber;\n  nextProduction?: BigNumber;\n}\n\nconst usePowerPlant = (infrastructure: Infrastructure, planetId: string) => {\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { resources } = useApprovedObjects();\n  const { infrastructure: baseInfra, create, upgrade } = useInfrastructure(infrastructure, planetId);\n  const [loadedPlant, setLoadedPlant] = useState<PowerPlantCharacteristics>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n\n    const PowerPlantInterface = new utils.Interface(PowerPlantABI.abi);\n    return new Contract(infrastructure.address, PowerPlantInterface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n    try {\n      const currentProduction = await contract.currentProduction(planetId);\n      const nextProduction = await contract.nextProduction(planetId);\n      setLoadedPlant({\n        ...baseInfra,\n        energy: resources.find((e) => e.name === \"Energy\")!,\n        currentProduction: currentProduction,\n        nextProduction: nextProduction,\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching resource producer\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, baseInfra, planetId, resources, setLoadedPlant]);\n\n  useEffect(() => {\n    if (!loadedPlant.costsResources || !loadedPlant.nextCosts) fetch();\n  }, [loadedPlant, fetch]);\n\n  return {\n    powerPlant: loadedPlant,\n    fetch,\n    create,\n    upgrade,\n  };\n};\n\nexport default usePowerPlant;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Divider, Flex, Stack, Text, useColorModeValue, Wrap, WrapItem } from '@chakra-ui/react'\nimport ResourceBadge from 'components/ResourceBadge'\nimport { BigNumber } from 'ethers'\nimport usePowerPlant from 'hooks/usePowerPlant'\nimport React from 'react'\n\nimport { Infrastructure, Planet } from '../../contexts/Sanctis/types'\n\nconst PowerPlantCard: React.FC<{ infrastructure: Infrastructure; planet: Planet }> = ({ infrastructure, planet }) => {\n  const { getBlockNumber } = useWallet();\n  const { powerPlant, upgrade } = usePowerPlant(infrastructure, planet.id);\n\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\" shadow={\"xl\"}>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {powerPlant.name}\n      </Text>\n      <Text fontSize=\"md\">{powerPlant.description}</Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Level: {powerPlant.level}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Pending:\n      </Text>\n      {powerPlant.energy && powerPlant.currentProduction && (\n        <Flex direction={\"row\"}>\n          <ResourceBadge resource={powerPlant.energy} amount={BigNumber.from(powerPlant.currentProduction)} size=\"sm\" />\n        </Flex>\n      )}\n      <Divider />\n      <Stack spacing={2} justify={\"center\"}>\n        <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n          Upgrade costs:\n        </Text>\n        <Wrap>\n          {(powerPlant.nextCosts || []).map((cost, i) => (\n            <WrapItem key={powerPlant.costsResources![i].name}>\n              <ResourceBadge resource={powerPlant.costsResources![i]} amount={BigNumber.from(cost)} size=\"sm\" />\n            </WrapItem>\n          ))}\n        </Wrap>\n        <Button\n          rounded={\"full\"}\n          px={6}\n          colorScheme={\"blue\"}\n          bg={useColorModeValue(\"gray.300\", \"gray.500\")}\n          _hover={{ bg: useColorModeValue(\"gray.400\", \"gray.400\") }}\n          onClick={() => upgrade(planet.id)}\n          disabled={getBlockNumber() < powerPlant.nextUpgrade!}\n        >\n          {getBlockNumber() < powerPlant.nextUpgrade!\n            ? `Upgradable in ${powerPlant.nextUpgrade! - getBlockNumber()} blocks`\n            : \"Upgrade\"}\n        </Button>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default PowerPlantCard;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useToast } from '@chakra-ui/react'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { BigNumber, Contract, ethers, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport ResourceProducerABI from '../constants/contracts/IResourceProducer.sol/IResourceProducer.json'\nimport { Infrastructure, Resource } from '../contexts/Sanctis/types'\nimport useApprovedObjects from './useApprovedObjects'\nimport useConfirmationModal from './useConfirmationModal'\nimport useInfrastructure from './useInfrastructure'\nimport useSanctis from './useSanctis'\n\nexport interface ResourceProducerCharacteristics extends Infrastructure {\n  lastHarvest?: number;\n  producedResources?: Resource[];\n  productionPerBlock?: BigNumber[];\n  nextProduction?: BigNumber[];\n}\n\nconst useResourceProducer = (infrastructure: Infrastructure, planetId: string) => {\n  const toast = useToast();\n  const { open } = useConfirmationModal();\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { resources } = useApprovedObjects();\n  const { fetchPlanet } = useSanctis();\n  const { infrastructure: baseInfra, create, upgrade } = useInfrastructure(infrastructure, planetId);\n  const [loadedProducer, setLoadedProducer] = useState<ResourceProducerCharacteristics>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const ResourceProducerInterface = new utils.Interface(ResourceProducerABI.abi);\n    return new Contract(\n      infrastructure.address,\n      ResourceProducerInterface,\n      new providers.Web3Provider(ethereum).getSigner()\n    );\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n\n    try {\n      const lastHarvest = await contract.lastHarvest(planetId);\n      const [producedResources, currentProduction] = await contract.currentProduction(planetId);\n      const [, nextProduction] = await contract.nextProduction(planetId);\n      setLoadedProducer({\n        ...baseInfra,\n        lastHarvest: lastHarvest.toNumber(),\n        producedResources: producedResources.map((e: string) =>\n          resources.find((a) => ethers.utils.getAddress(e) === ethers.utils.getAddress(a.address))\n        ),\n        productionPerBlock: currentProduction.map((e: any) => BigNumber.from(e)),\n        nextProduction: nextProduction,\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching resource producer\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, baseInfra, planetId, resources, setLoadedProducer]);\n\n  useEffect(() => {\n    if (!loadedProducer.costsResources || !loadedProducer.nextCosts) fetch();\n  }, [loadedProducer, fetch]);\n\n  const harvest = useCallback(\n    async (planetId: string) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.harvest(planetId);\n          await result.wait();\n          await fetch();\n          await fetchPlanet(planetId);\n          toast({\n            status: \"success\",\n            title: \"Harvest\",\n            description: `An ${infrastructure.name} has been harvested on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({\n            status: \"error\",\n            title: \"Error\",\n            description: `Failed harvest: ${err.data?.message || err.message}`,\n          });\n        }\n      });\n    },\n    [contract, infrastructure, fetch, fetchPlanet, open, toast]\n  );\n\n  return {\n    producer: loadedProducer,\n    fetch,\n    create,\n    upgrade,\n    harvest,\n  };\n};\n\nexport default useResourceProducer;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Divider, Stack, Text, useColorModeValue, Wrap, WrapItem } from '@chakra-ui/react'\nimport ResourceBadge from 'components/ResourceBadge'\nimport { BigNumber } from 'ethers'\nimport useResourceProducer from 'hooks/useResourceProducer'\nimport React from 'react'\n\nimport { Infrastructure, Planet } from '../../contexts/Sanctis/types'\n\nconst ResourceProducerCard: React.FC<{ infrastructure: Infrastructure; planet: Planet }> = ({\n  infrastructure,\n  planet,\n}) => {\n  const { getBlockNumber } = useWallet();\n  const { producer, upgrade, harvest } = useResourceProducer(infrastructure, planet.id);\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\" shadow={\"xl\"}>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {producer.name}\n      </Text>\n      <Text fontSize=\"md\">{producer.description}</Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Level: {producer.level}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Pending:\n      </Text>\n      <Wrap>\n        {(producer.productionPerBlock || []).map((prod, i) => (\n          <WrapItem key={producer.producedResources![i].name}>\n            <ResourceBadge\n              resource={producer.producedResources![i]}\n              amount={BigNumber.from(prod).mul(Math.max(0, getBlockNumber() - producer.lastHarvest!))}\n              size=\"sm\"\n            />\n          </WrapItem>\n        ))}\n      </Wrap>\n      <Button\n        rounded={\"full\"}\n        px={6}\n        bg={\"blue.400\"}\n        _hover={{ bg: \"blue.500\" }}\n        colorScheme={\"blue\"}\n        onClick={() => harvest(planet.id)}\n        disabled={getBlockNumber() < producer.lastHarvest!}\n      >\n        {getBlockNumber() < producer.lastHarvest!\n          ? `Harvestable in ${producer.lastHarvest! - getBlockNumber()} blocks`\n          : \"Harvest\"}\n      </Button>\n      <Divider />\n      <Stack spacing={2} justify={\"center\"}>\n        <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n          Upgrade costs:\n        </Text>\n        <Wrap>\n          {(producer.nextCosts || []).map((cost, i) => (\n            <WrapItem key={producer.costsResources![i].name}>\n              <ResourceBadge resource={producer.costsResources![i]} amount={BigNumber.from(cost)} size=\"sm\" />\n            </WrapItem>\n          ))}\n        </Wrap>\n        <Button\n          rounded={\"full\"}\n          px={6}\n          colorScheme={\"blue\"}\n          bg={useColorModeValue(\"gray.300\", \"gray.500\")}\n          _hover={{ bg: useColorModeValue(\"gray.400\", \"gray.400\") }}\n          onClick={() => upgrade(planet.id)}\n          disabled={getBlockNumber() < producer.nextUpgrade!}\n        >\n          {getBlockNumber() < producer.nextUpgrade!\n            ? `Upgradable in ${producer.nextUpgrade! - getBlockNumber()} blocks`\n            : \"Upgrade\"}\n        </Button>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default ResourceProducerCard;\n","export default __webpack_public_path__ + \"static/media/chest.c488cb7e.svg\";","export default __webpack_public_path__ + \"static/media/gladius.48d1672b.svg\";","export default __webpack_public_path__ + \"static/media/shield.5ea7eb49.svg\";","export default __webpack_public_path__ + \"static/media/speedometer.a047b5a0.svg\";","import { Flex, Image, Text, Tooltip, useColorModeValue } from '@chakra-ui/react'\nimport React, { useMemo } from 'react'\n\nimport capacity from '../assets/chest.svg'\nimport offense from '../assets/gladius.svg'\nimport defense from '../assets/shield.svg'\nimport speed from '../assets/speedometer.svg'\n\nconst ShipStatBadge: React.FC<{\n  type: \"offense\" | \"defense\" | \"capacity\" | \"speed\";\n  amount?: number;\n}> = ({ type, amount }) => {\n  const name = useMemo(() => {\n    switch (type) {\n      case \"speed\":\n        return \"Speed\";\n      case \"offense\":\n        return \"Attack\";\n      case \"defense\":\n        return \"Defense\";\n      case \"capacity\":\n        return \"Capacity\";\n    }\n  }, [type]);\n\n  const icon = useMemo(() => {\n    switch (type) {\n      case \"speed\":\n        return speed;\n      case \"offense\":\n        return offense;\n      case \"defense\":\n        return defense;\n      case \"capacity\":\n        return capacity;\n      default:\n        return defense;\n    }\n  }, [type]);\n\n  return (\n    <Tooltip label={name}>\n      <Flex\n        w=\"100%\"\n        background={useColorModeValue(\"gray.400\", \"gray.600\")}\n        p=\"1.5\"\n        rounded=\"3xl\"\n        shadow={\"sm\"}\n        align=\"center\"\n      >\n        <Image\n          src={icon}\n          stroke={useColorModeValue(\"black\", \"white\")}\n          background=\"black\"\n          maxW={\"30px\"}\n          maxH={\"30px\"}\n          p={2}\n          rounded=\"full\"\n        />\n        <Flex ml=\"1\">\n          <Text fontWeight=\"bold\" fontSize={\"sm\"} mr={2} textAlign=\"center\" width={\"fit-content\"}>\n            {amount ? amount : \"0\"}\n          </Text>\n        </Flex>\n      </Flex>\n    </Tooltip>\n  );\n};\n\nexport default ShipStatBadge;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { BigNumber, Contract, ethers, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport ShipABI from '../constants/contracts/IShip.sol/IShip.json'\nimport { Infrastructure, Resource, Ship } from '../contexts/Sanctis/types'\nimport useApprovedObjects from './useApprovedObjects'\n\nexport interface PowerPlantCharacteristics extends Infrastructure {\n  energy?: Resource;\n  currentProduction?: BigNumber;\n  nextProduction?: BigNumber;\n}\n\nconst useShip = (ship: Ship) => {\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { resources } = useApprovedObjects();\n  const [loadedShip, setLoadedShip] = useState<Ship>(ship);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n\n    const ShipInterface = new utils.Interface(ShipABI.abi);\n    return new Contract(ship.address, ShipInterface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, ship]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n    try {\n      const [costsResources, costs] = await contract.unitCosts();\n      const speed = await contract.speed();\n      const offensivePower = await contract.offensivePower();\n      const defensivePower = await contract.defensivePower();\n      const capacity = await contract.capacity();\n      setLoadedShip({\n        ...ship,\n        costsResources: costsResources.map((e: string) =>\n          resources.find((a) => ethers.utils.getAddress(e) === ethers.utils.getAddress(a.address))\n        ),\n        costs,\n        speed: speed.toNumber(),\n        offensivePower: offensivePower.toNumber(),\n        defensivePower: defensivePower.toNumber(),\n        capacity: capacity,\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching ship\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, ship, resources, setLoadedShip]);\n\n  useEffect(() => {\n    if (!loadedShip.costsResources || loadedShip.address !== ship.address) fetch();\n  }, [loadedShip, ship, fetch]);\n\n  return {\n    ship: loadedShip,\n    fetch,\n  };\n};\n\nexport default useShip;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useToast } from '@chakra-ui/react'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { Contract, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport SpatioportABI from '../constants/contracts/ISpatioports.sol/ISpatioports.json'\nimport { Infrastructure, Ship } from '../contexts/Sanctis/types'\nimport useConfirmationModal from './useConfirmationModal'\nimport useInfrastructure from './useInfrastructure'\n\nexport interface SpatioportCharacteristics extends Infrastructure {\n  currentDiscount?: number;\n  nextDiscount?: number;\n  discountFactor?: number;\n}\n\nconst useSpatioport = (infrastructure: Infrastructure, planetId: string) => {\n  const toast = useToast();\n  const { open } = useConfirmationModal();\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { infrastructure: loadedInfrastructure, create, upgrade } = useInfrastructure(infrastructure, planetId);\n  const [spatioport, setSpatioport] = useState<SpatioportCharacteristics>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const SpatioportInterface = new utils.Interface(SpatioportABI.abi);\n    return new Contract(infrastructure.address, SpatioportInterface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n\n    try {\n      const currentDiscount = await contract.currentDiscount(planetId);\n      const nextDiscount = await contract.nextDiscount(planetId);\n      const discountFactor = await contract.discountFactor();\n      setSpatioport({\n        ...loadedInfrastructure,\n        currentDiscount: currentDiscount.toNumber(),\n        nextDiscount: nextDiscount.toNumber(),\n        discountFactor: discountFactor.toNumber(),\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching resource producer\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, loadedInfrastructure, planetId, setSpatioport]);\n\n  useEffect(() => {\n    if (!spatioport.costsResources) fetch();\n  }, [spatioport, fetch]);\n\n  const build: (planetId: string, ship: Ship, quantity: number) => Promise<void> = useCallback(\n    async (planetId, ship, quantity) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.build(planetId, ship.address, quantity);\n          await result.wait();\n          toast({\n            status: \"success\",\n            title: \"Build\",\n            description: `${quantity} ${ship.name} have been built on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({\n            status: \"error\",\n            title: \"Error\",\n            description: `Failed harvest: ${err.data?.message || err.message}`,\n          });\n        }\n      });\n    },\n    [contract, open, toast]\n  );\n\n  return {\n    spatioport,\n    fetch,\n    create,\n    upgrade,\n    build,\n  };\n};\n\nexport default useSpatioport;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Button, Divider, Flex, Input, Select, Stack, Text, useColorModeValue, Wrap, WrapItem } from '@chakra-ui/react'\nimport ResourceBadge from 'components/ResourceBadge'\nimport { BigNumber, ethers } from 'ethers'\nimport React, { useState } from 'react'\n\nimport ShipStatBadge from '../../components/ShipStatBadge'\nimport { Infrastructure, Planet, Ship } from '../../contexts/Sanctis/types'\nimport useApprovedObjects from '../../hooks/useApprovedObjects'\nimport useShip from '../../hooks/useShip'\nimport useSpatioport from '../../hooks/useSpatioport'\n\nconst SpatioportCard: React.FC<{ infrastructure: Infrastructure; planet: Planet }> = ({ infrastructure, planet }) => {\n  const { ships } = useApprovedObjects();\n  const { getBlockNumber } = useWallet();\n  const { spatioport, upgrade, build } = useSpatioport(infrastructure, planet.id);\n  const [choice, setChoice] = useState<Ship>(ships[0]);\n  const { ship } = useShip(choice);\n  const [quantity, setQuantity] = useState<number>(0);\n  console.log(spatioport);\n\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\" shadow={\"xl\"}>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {infrastructure.name}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {infrastructure.description}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n        Level: {infrastructure.level}\n      </Text>\n      <Select onChange={(e) => setChoice(JSON.parse(e.target.value))}>\n        {ships.map((e) => (\n          <option key={e.address} value={JSON.stringify(e)}>\n            {e.name}\n          </option>\n        ))}\n      </Select>\n      <Input\n        type=\"number\"\n        placeholder=\"Number of ships to build...\"\n        onChange={(e) => setQuantity(Number(e.target.value))}\n      />\n      <Text fontSize=\"md\" textAlign=\"start\">\n        Ship statistics:\n      </Text>\n      <Flex>\n        <ShipStatBadge type=\"speed\" amount={ship.speed} />\n        <ShipStatBadge type=\"offense\" amount={ship.offensivePower} />\n        <ShipStatBadge type=\"defense\" amount={ship.defensivePower} />\n        <ShipStatBadge type=\"capacity\" amount={Number(ethers.utils.formatEther(ship.capacity || 0))} />\n      </Flex>\n      <Text fontSize=\"md\" textAlign=\"start\">\n        Costs per ship:\n      </Text>\n      <Wrap>\n        {ship.costsResources?.map((resource, i) => (\n          <WrapItem key={resource.name}>\n            <ResourceBadge resource={resource} amount={ship.costs![i]} size=\"sm\" />\n          </WrapItem>\n        ))}\n      </Wrap>\n      <Button\n        rounded={\"full\"}\n        px={6}\n        colorScheme={\"blue\"}\n        bg={useColorModeValue(\"gray.300\", \"gray.500\")}\n        _hover={{ bg: useColorModeValue(\"gray.400\", \"gray.400\") }}\n        onClick={() => build(planet.id, choice, quantity)}\n        disabled={!quantity}\n      >\n        Build\n      </Button>\n      <Divider />\n      <Stack spacing={2} justify={\"center\"}>\n        <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n          Upgrade costs:\n        </Text>\n        <Wrap>\n          {(spatioport.nextCosts || []).map((cost, i) => (\n            <WrapItem key={spatioport.costsResources![i].name}>\n              <ResourceBadge resource={spatioport.costsResources![i]} amount={BigNumber.from(cost)} size=\"sm\" />\n            </WrapItem>\n          ))}\n        </Wrap>\n        <Button\n          rounded={\"full\"}\n          px={6}\n          colorScheme={\"blue\"}\n          bg={useColorModeValue(\"gray.300\", \"gray.500\")}\n          _hover={{ bg: useColorModeValue(\"gray.400\", \"gray.400\") }}\n          onClick={() => upgrade(planet.id)}\n          disabled={getBlockNumber() < spatioport.nextUpgrade!}\n        >\n          {getBlockNumber() < spatioport.nextUpgrade!\n            ? `Upgradable in ${spatioport.nextUpgrade! - getBlockNumber()} blocks`\n            : \"Upgrade\"}\n        </Button>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default SpatioportCard;\n","import { Button, Container, Flex, Link, Text, useColorModeValue, Wrap, WrapItem } from '@chakra-ui/react'\nimport usePlanet from 'hooks/usePlanet'\nimport React, { ReactChild, useMemo } from 'react'\nimport { BiArrowBack } from 'react-icons/bi'\nimport { useParams } from 'react-router-dom'\n\nimport ResourceBadge from '../../components/ResourceBadge'\nimport deployedAddresses from '../../constants'\nimport useChainPicker from '../../hooks/useChainPicker'\nimport CreateInfrastuctureCard from './CreateInfrastructureCard'\nimport PowerPlantCard from './PowerPlantCard'\nimport ResourceProducerCard from './ResourceProducerCard'\nimport SpatioportCard from './SpatioportCard'\n\nconst Planet: React.FC = () => {\n  const { chainId } = useChainPicker();\n  const { id } = useParams();\n  const planet = usePlanet(id);\n\n  const infrastructureCards = useMemo(() => {\n    return (\n      planet &&\n      planet.infrastructures &&\n      Object.values(planet.infrastructures)\n        .filter((e: any) => e.level !== 0)\n        .map((e) => {\n          let card: ReactChild;\n\n          const resourceProducers = [\n            deployedAddresses[chainId].ironMines,\n            deployedAddresses[chainId].siliconFurnaces,\n            deployedAddresses[chainId].heavyWaterPlants,\n          ];\n          const powerPlants = [deployedAddresses[chainId].solarPanels, deployedAddresses[chainId].fusionReactors];\n\n          if (resourceProducers.includes(e.address)) {\n            card = <ResourceProducerCard planet={planet} infrastructure={e} />;\n          } else if (powerPlants.includes(e.address)) {\n            card = <PowerPlantCard planet={planet} infrastructure={e} />;\n          } else if (e.address === deployedAddresses[chainId].spatioports) {\n            card = <SpatioportCard planet={planet} infrastructure={e} />;\n          } else {\n            card = <Text>Unknown infrastructure</Text>;\n          }\n          return <WrapItem key={e.name}>{card}</WrapItem>;\n        })\n    );\n  }, [chainId, planet]);\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Button\n        rightIcon={<BiArrowBack />}\n        as={Link}\n        href={planet ? `#/commander/` + planet?.ruler : \"#/commanders\"}\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\n        mb={3}\n      >\n        Back\n      </Button>\n      <Flex\n        direction=\"column\"\n        align={\"center\"}\n        m={2}\n        p={3}\n        background={useColorModeValue(\"gray.300\", \"gray.700\")}\n        rounded=\"lg\"\n      >\n        <Text mb=\"3\" fontSize=\"xl\" fontWeight=\"bold\">\n          Planet's reserves\n        </Text>\n        <Wrap>\n          {planet?.reserves &&\n            planet.reserves.map((e) => (\n              <WrapItem key={e.resource.name}>\n                <ResourceBadge resource={e.resource} amount={e.amount} size=\"lg\" />\n              </WrapItem>\n            ))}\n        </Wrap>\n      </Flex>\n      <Flex\n        direction={\"column\"}\n        textAlign={\"center\"}\n        align={\"center\"}\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\n        m={2}\n        p={3}\n        rounded=\"lg\"\n        shadow=\"2xl\"\n        boxShadow=\"inner\"\n      >\n        <Text fontSize=\"xl\" fontWeight=\"bold\" mb=\"3\">\n          Planet's infrastructures\n        </Text>\n        <Wrap justify={\"center\"} m={2}>\n          {infrastructureCards}\n        </Wrap>\n      </Flex>\n      {planet && (\n        <Flex justify={\"center\"} m={5}>\n          <CreateInfrastuctureCard planet={planet} />\n        </Flex>\n      )}\n    </Container>\n  );\n};\n\nexport default Planet;\n","import { Commander } from \"contexts/Sanctis/types\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport useSanctis from \"./useSanctis\";\n\nexport default function useCommander(id: number) {\n  const { commanders, fetchCommander } = useSanctis();\n  const [commander, setCommander] = useState<Commander | null>();\n\n  const fetch = useCallback(async () => {\n    if (!commanders[id]) {\n      setCommander(await fetchCommander(id));\n    } else {\n      setCommander(commanders[id]);\n    }\n  }, [commanders, id, fetchCommander]);\n\n  useEffect(() => {\n    fetch();\n  }, [fetch]);\n\n  return commander;\n}\n","import React from \"react\";\nimport {\n  Box,\n  Button,\n  Container,\n  Link,\n  List,\n  ListItem,\n  Spinner,\n  Stack,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\nimport useCommander from \"hooks/useCommander\";\nimport { planetIdToCoordinate } from \"utils\";\nimport useSanctis from \"../../hooks/useSanctis\";\n\nconst CommanderCard: React.FC<{ id: number }> = ({ id }) => {\n  const commander = useCommander(id);\n  const { currentCommander, setCurrentCommander } = useSanctis();\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Stack spacing={6} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\n        {commander ? (\n          <Box alignContent={\"flex-start\"}>\n            <Text fontWeight=\"bold\" fontSize=\"2xl\">\n              {commander.name}\n            </Text>\n            <Text fontWeight=\"bold\" fontSize=\"lg\">\n              {commander.race?.name}\n            </Text>\n            <Box textAlign={\"start\"}>\n              {!commander.planets || commander.planets.length === 0 ? (\n                <Text my=\"3\">This commander has no planet</Text>\n              ) : (\n                [\n                  <Text fontSize=\"xl\">Planets:</Text>,\n                  <List>\n                    {commander.planets.map((planet) => (\n                      <ListItem key={planet}>\n                        <Link href={`/planet/${planet}`}>{planetIdToCoordinate(planet)}</Link>\n                      </ListItem>\n                    ))}\n                  </List>,\n                ]\n              )}\n            </Box>\n            <Button\n              rounded={\"full\"}\n              m={4}\n              px={6}\n              colorScheme={\"blue\"}\n              bg={\"blue.400\"}\n              _hover={{ bg: \"blue.500\" }}\n              as={Link}\n              href={`#/commander/${commander.id}`}\n              onClick={() => setCurrentCommander(commander)}\n              disabled={currentCommander?.name === commander.name}\n            >\n              {currentCommander?.name !== commander.name\n                ? `Play as ${commander.name}`\n                : `Already playing ${commander.name}`}\n            </Button>\n          </Box>\n        ) : (\n          <Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"xl\" />\n        )}\n      </Stack>\n    </Container>\n  );\n};\n\nexport default CommanderCard;\n","import React, { ChangeEvent, useCallback, useState } from \"react\";\nimport { Button, Input, Select, Stack, Text, useColorModeValue } from \"@chakra-ui/react\";\n\nimport { Race } from \"../../contexts/Sanctis/types\";\nimport useCommanders from \"../../hooks/useSanctis\";\nimport useApprovedObjects from \"hooks/useApprovedObjects\";\n\nconst CreateCommanderCard: React.FC = () => {\n  const { races } = useApprovedObjects()\n  const { createCommander } = useCommanders()\n  const [name, setName] = useState<string>()\n  const [race, setRace] = useState<Race>(races[0])\n\n  const handleSelect = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\n    setRace(JSON.parse(e.target.value))\n  }, [setRace])\n\n  const handleName = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  }, [setName])\n\n  const handleCreate = useCallback(async () => {\n    if (!race || !name) return\n\n    await createCommander(name, race)\n  }, [race, name, createCommander])\n\n  return (\n    <Stack spacing={6} background={useColorModeValue('white', 'gray.800')} p=\"5\" rounded=\"xl\">\n      <Text fontWeight=\"bold\" fontSize=\"xl\">Create a Commander</Text>\n      <Input placeholder=\"Commander's name\" onChange={handleName} />\n      <Select onChange={handleSelect}>\n        {races.map((race) => <option key={race.name} value={JSON.stringify(race)}>{race.name}</option>)}\n      </Select>\n      <Button\n        rounded={\"full\"}\n        px={6}\n        colorScheme={\"blue\"}\n        bg={\"blue.400\"}\n        _hover={{ bg: \"blue.500\" }}\n        disabled={!name || !!name.match(/[^A-Za-z0-9 ]/) }\n        onClick={handleCreate}\n      >\n        Create commander\n      </Button>\n    </Stack>\n  );\n};\n\nexport default CreateCommanderCard;\n","import { Box, Container, Stack, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport useCommanders from \"../../hooks/useSanctis\";\nimport CommanderCard from \"./CommanderCard\";\nimport CreateCommanderCard from \"./CreateCommanderCard\";\n\nconst Commanders: React.FC = () => {\n  const { ownedCommanders } = useCommanders();\n\n  console.log(ownedCommanders);\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Stack textAlign={\"center\"} align={\"center\"} spacing={{ base: 8, md: 10 }}>\n        {ownedCommanders && ownedCommanders.length > 0 && (\n          <Wrap>\n            {ownedCommanders.map((commander, i) => (\n              <WrapItem key={`${commander.id}-${i}`}>\n                <CommanderCard id={commander.id} />\n              </WrapItem>\n            ))}\n          </Wrap>\n        )}\n        <Box background={useColorModeValue(\"white\", \"gray.800\")} p=\"3\" rounded=\"xl\">\n          A commander is free to create and you can have as many as you want. However, the game is designed to encourage\n          players to have few commanders with a big empire rather than many commanders with smaller empires.\n        </Box>\n        <CreateCommanderCard />\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Commanders;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { BigNumber, Contract, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport ERC20ABI from '../constants/contracts/IERC20.sol/IERC20.json'\nimport useConfirmationModal from './useConfirmationModal'\n\nconst useApproval = (tokenAddress: string, spenderAddress?: string) => {\n  const { open } = useConfirmationModal();\n  const { account, ethereum } = useWallet<ExternalProvider>();\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const ERC20Interface = new utils.Interface(ERC20ABI.abi);\n    return new Contract(tokenAddress, ERC20Interface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, tokenAddress]);\n\n  const [allowance, setAllowance] = useState<BigNumber>();\n  const [isApproving, setIsApproving] = useState(false);\n  const [isApproved, setIsApproved] = useState(false);\n\n  const handleApprove = useCallback(() => {\n    if (!ethereum || !account || !spenderAddress || !contract) return;\n    open(async () => {\n      try {\n        setIsApproving(true);\n        const result = await contract.approve(spenderAddress, BigNumber.from(2).pow(256).sub(1));\n        await result.wait();\n        setIsApproved(true);\n        setIsApproving(false);\n      } catch (e) {\n        console.log(e);\n        setIsApproving(false);\n      }\n    });\n  }, [account, contract, ethereum, open, setIsApproved, setIsApproving, spenderAddress]);\n\n  const fetchAllowance = useCallback(async () => {\n    if (!contract || !spenderAddress || !account) return;\n    setAllowance(await contract.allowance(account, spenderAddress));\n  }, [contract, account, spenderAddress]);\n\n  useEffect(() => {\n    fetchAllowance();\n  }, [fetchAllowance]);\n\n  useEffect(() => {\n    if (allowance && allowance.gt(0)) {\n      setIsApproved(true);\n    }\n  }, [allowance, setIsApproved]);\n\n  return {\n    allowance,\n    isApproved,\n    isApproving,\n    onApprove: handleApprove,\n  };\n};\n\nexport default useApproval;\n","import { Button, Input, Stack, Text, useColorModeValue } from '@chakra-ui/react'\nimport useChainPicker from 'hooks/useChainPicker'\nimport React, { useState } from 'react'\n\nimport deployedAddresses from '../../constants'\nimport useApproval from '../../hooks/useApproval'\nimport useSanctis from '../../hooks/useSanctis'\n\nconst ColonizeCard: React.FC<{ colonizer: number }> = ({ colonizer }) => {\n  const { chainId } = useChainPicker();\n  const { colonizationCost, colonizePlanet } = useSanctis();\n  const { isApproved, isApproving, onApprove } = useApproval(\n    deployedAddresses[chainId].credits,\n    deployedAddresses[chainId].planets\n  );\n  const [x, setX] = useState<number>();\n  const [y, setY] = useState<number>();\n  const [z, setZ] = useState<number>();\n\n  return (\n    <Stack textAlign={\"center\"} align={\"center\"} m={5} spacing={{ base: 8, md: 10 }}>\n      <Stack spacing={6} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\n        <Text fontWeight=\"bold\" fontSize=\"xl\">\n          Colonize a planet\n        </Text>\n        <Input type=\"number\" placeholder=\"X coordinate...\" onChange={(e) => setX(Number(e.target.value))} />\n        <Input type=\"number\" placeholder=\"Y coordinate...\" onChange={(e) => setY(Number(e.target.value))} />\n        <Input type=\"number\" placeholder=\"Z coordinate...\" onChange={(e) => setZ(Number(e.target.value))} />\n        {isApproved ? (\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            disabled={x === undefined || y === undefined || z === undefined}\n            onClick={() => colonizePlanet(colonizer, x || 0, y || 0, z || 0)}\n          >\n            Colonize for {colonizationCost ? colonizationCost.div(10 ** 12).toNumber() / 10 ** 6 : \"??\"} $CREDS\n          </Button>\n        ) : (\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            isLoading={isApproving}\n            onClick={() => onApprove()}\n          >\n            Approve\n          </Button>\n        )}\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default ColonizeCard;\n","import { Button, Link, Spinner, Stack, Text, useColorModeValue } from '@chakra-ui/react'\nimport usePlanet from 'hooks/usePlanet'\nimport React from 'react'\n\nconst PlanetCard: React.FC<{ planetId: string }> = ({ planetId }) => {\n  const planet = usePlanet(planetId);\n  return (\n    <Stack spacing={6} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\n      {planet ? (\n        <>\n          <Text fontWeight=\"bold\" fontSize=\"xl\">{`Coordinate: (X=${planet.x}; Y=${planet.y}; Z=${planet.z})`}</Text>\n          <Text fontWeight=\"bold\" fontSize=\"xl\">\n            Humidity: {planet.humidity}\n          </Text>\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            as={Link}\n            href={`#/planet/${planet.id}`}\n          >\n            Details\n          </Button>\n        </>\n      ) : (\n        <Spinner />\n      )}\n    </Stack>\n  );\n};\n\nexport default PlanetCard;\n","import { Button, Container, Flex, Link, Text, useColorModeValue, Wrap, WrapItem } from '@chakra-ui/react'\nimport useCommander from 'hooks/useCommander'\nimport React from 'react'\nimport { BiArrowBack } from 'react-icons/bi'\nimport { useParams } from 'react-router-dom'\n\nimport ColonizeCard from './ColonizeCard'\nimport PlanetCard from './PlanetCard'\n\nconst Commander: React.FC = () => {\n  const { id } = useParams();\n  const commander = useCommander(Number(id));\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Button rightIcon={<BiArrowBack />} as={Link} href={\"#/commanders\"}>\n        Back\n      </Button>\n      <Flex\n        direction={\"column\"}\n        textAlign={\"center\"}\n        align={\"center\"}\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\n        mt={2}\n        p={3}\n        rounded=\"lg\"\n        shadow=\"2xl\"\n        boxShadow=\"inner\"\n      >\n        <Text fontSize=\"lg\" fontWeight=\"bold\">\n          {commander?.name}'s planets\n        </Text>\n        <Wrap spacing={5} mt=\"2\">\n          {commander?.planets?.map((e) => (\n            <WrapItem key={e} shadow=\"xl\">\n              <PlanetCard planetId={e} />\n            </WrapItem>\n          ))}\n        </Wrap>\n      </Flex>\n      {commander && <ColonizeCard colonizer={commander?.id} />}\n    </Container>\n  );\n};\n\nexport default Commander;\n","import React from \"react\";\nimport { Route, HashRouter as Router, Routes } from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\n\nimport Sidebar from \"./components/Sidebar\";\nimport Home from \"./views/Home\";\nimport Planet from \"./views/Planet\";\nimport useChainPicker from \"./hooks/useChainPicker\";\nimport ChainPickerProvider from \"./contexts/ChainPicker\";\nimport ConfirmationModalProvider from \"./contexts/ConfirmationModal\";\nimport SanctisProvider from \"./contexts/Sanctis\";\nimport Commanders from \"views/Commanders\";\nimport Commander from \"views/Commander\";\n\nconst WalletProvider: React.FC = ({ children }) => {\n  const { chainId } = useChainPicker()\n\n  return <UseWalletProvider chainId={chainId}>{children}</UseWalletProvider>\n}\n\nconst Providers: React.FC = ({ children }) => {\n\n  return (\n    <ChakraProvider>\n      <ChainPickerProvider>\n        <WalletProvider>\n          <ConfirmationModalProvider>\n            <SanctisProvider>\n              {children}\n            </SanctisProvider>\n          </ConfirmationModalProvider>\n        </WalletProvider>\n      </ChainPickerProvider>\n    </ChakraProvider>\n  );\n};\n\nfunction App() {\n  return (\n    <Providers>\n      <Sidebar>\n        <Router>\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/commanders\" element={<Commanders />} />\n            <Route path=\"/commander/:id\" element={<Commander />} />\n            <Route path=\"/planet/:id\" element={<Planet />} />\n          </Routes>\n        </Router>\n      </Sidebar>\n    </Providers>\n  );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}