{"version":3,"sources":["components/Sidebar/Item.tsx","components/Sidebar/items.ts","assets/black-hole-space-svgrepo-com.png","components/Sidebar/Content.tsx","utils/index.ts","components/ConfirmationModal/index.tsx","contexts/ConfirmationModal.tsx","hooks/useConfirmationModal.tsx","constants/index.ts","assets/electric.svg","assets/metal-bar.svg","assets/ore.svg","assets/topaz.svg","hooks/useLocalStorage.ts","contexts/ChainPicker.tsx","hooks/useChainPicker.tsx","hooks/useApprovedObjects.tsx","contexts/Sanctis/index.tsx","hooks/useSanctis.tsx","assets/character.svg","components/Sidebar/CommanderBadge.tsx","components/Sidebar/ColorModeSwitcher.tsx","components/Sidebar/NetworkPicker.tsx","components/Sidebar/Mobile.tsx","components/Sidebar/index.ts","components/Sidebar/Sidebar.tsx","views/Home/Home.tsx","hooks/usePlanet.ts","contexts/Sanctis/types.ts","components/ResourceBadge.tsx","contexts/DocumentationButton.tsx","views/Planet/ReservesSection.tsx","hooks/useInfrastructure.tsx","views/Planet/infrastructures/CreateInfrastructureCard.tsx","hooks/usePowerPlant.tsx","views/Planet/infrastructures/PowerPlantCard.tsx","hooks/useResourceProducer.tsx","views/Planet/infrastructures/ResourceProducerCard.tsx","assets/chest.svg","assets/gladius.svg","assets/shield.svg","assets/speedometer.svg","components/ShipStatBadge.tsx","hooks/useShip.tsx","hooks/useSpatioport.tsx","views/Planet/infrastructures/SpatioportCard.tsx","views/Planet/InfrastructuresSection.tsx","hooks/useFleets.tsx","components/FleetsList/AddToFleetItem.tsx","components/FleetsList/LoadResourceItem.tsx","components/FleetsList/RemoveFromFleetItem.tsx","components/FleetsList/UnloadResourceItem.tsx","components/FleetsList/FleetCard.tsx","components/FleetsList/index.ts","components/FleetsList/FleetsList.tsx","views/Planet/FleetsSection.tsx","views/Planet/Planet.tsx","views/Commanders/CommanderCard.tsx","views/Commanders/CreateCommanderCard.tsx","views/Commanders/Commanders.tsx","hooks/usePlanets.ts","hooks/useApproval.ts","views/Commander/ColonizeCard.tsx","views/Commander/PlanetCard.tsx","views/Commander/Commander.tsx","hooks/useCommander.ts","views/Documentation.tsx","views/Planets.tsx","views/Fleets.tsx","views/Explore.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NavItem","icon","url","children","rest","href","style","textDecoration","_focus","boxShadow","align","p","mx","borderRadius","role","cursor","_hover","bg","color","mr","fontSize","_groupHover","as","LinkItems","name","FiHome","BsFillPersonFill","BiPlanet","SiStarship","FiCompass","FiBook","SidebarContent","onClose","transition","useColorModeValue","borderRight","borderRightColor","w","base","md","pos","h","alignItems","justifyContent","src","logo","rounded","maxW","fontFamily","fontWeight","display","onClick","map","link","planetIdToCoordinate","planetId","num","BigNumber","from","bits80","x","and","y","shr","z","ConfirmationModal","isOpen","spacing","my","size","thickness","ConfirmationModalContext","createContext","confirming","open","Promise","ChainPickerProvider","useDisclosure","onOpen","onCloseModal","useCallback","action","a","Provider","value","useConfirmationModal","useContext","supportedNetworks","rpcUrl","chainId","deployedAddresses","sanctis","credits","parliament","commanders","planets","fleets","humans","energy","iron","deuterium","silicon","ironMines","siliconFurnaces","heavyWaterPlants","solarPanels","fusionReactors","spatioports","transporters","scouts","destroyers","plundering","resourceWrapper","colonize","useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","setValue","valueToStore","Function","setItem","stringify","useEffect","ChainPickerContext","setNetwork","network","useChainPicker","useApprovedObjects","races","address","resources","metalBar","ore","infrastructures","description","ships","SanctisContext","setCurrentCommander","commander","fetchCommander","fetchPlanet","createCommander","colonizePlanet","SanctisProvider","toast","useToast","approvedObjects","useWallet","ethereum","account","contracts","useMemo","SanctisInterface","utils","Interface","SanctisABI","abi","CommandersInterface","CommandersABI","CreditsInterface","CreditsABI","PlanetsInterface","PlanetsABI","ResourceInterface","ResourceABI","PowerPlantsInterface","PowerPlantsABI","ResourceProducerInterface","ResourceProducerABI","ShipInterface","ShipABI","ColonizeInterface","ColonizeABI","signer","providers","Web3Provider","getSigner","Contract","ownedCredits","setOwnedCredits","ownedCommanders","setOwnedCommanders","setCommanders","undefined","memorizedCommander","setMemorizedCommander","owner","setOwner","currentCommander","setCurrentCommanderState","setPlanets","colonizationCost","setColonizationCost","find","e","id","fetchColonizationCost","fetchOwnedCredits","Number","ethers","balanceOf","formatEther","commanderId","race","old","fetchOwnedCommanders","commandersBalance","toNumber","length","all","Array","fill","_","i","tokenOfOwnerByIndex","toString","filter","Boolean","planet","status","ruler","humidity","resource","contract","reserve","amount","reserves","infrastructure","InfrastructureInterface","InfrastructureABI","level","create","result","wait","title","message","toTwos","shl","add","useSanctis","CommanderBadge","setAutoconnect","reset","handleReset","Date","now","py","commanderIcon","ml","substring","numeral","format","borderColor","ColorModeSwitcher","props","toggleColorMode","useColorMode","text","SwitchIcon","FaMoon","FaSun","variant","marginLeft","NetworkPicker","MenuButton","validConnectors","startAutoconnect","MobileNav","connect","openModal","autoconnect","connector","setConnector","handleChooseWallet","handleConnect","px","height","borderBottomWidth","borderBottomColor","leftIcon","Object","values","isFullWidth","Sidebar","minH","autoFocus","placement","returnFocusOnClose","onOverlayClick","Commanders","useCommanders","background","textAlign","Link","usePlanet","setPlanet","fetch","FleetStatus","PlanetStatus","ResourceBadge","bgColor","iconSize","width","content","shadow","direction","maxH","minW","label","DocumentationButton","target","m","ReservesSection","margin","mb","useInfrastructure","loadedInfrastructure","setLoadedInfrastructure","isFetching","setIsFetching","costs","costsResources","nextCosts","nextUpgrade","getAddress","upgrade","setTimeout","CreateInfrastuctureCard","choices","choice","setChoice","handleSelect","handleCreate","onChange","mt","colorScheme","usePowerPlant","baseInfra","loadedPlant","setLoadedPlant","PowerPlantInterface","PowerPlantABI","currentProduction","nextProduction","powerPlant","PowerPlantCard","getBlockNumber","justify","cost","disabled","useResourceProducer","loadedProducer","setLoadedProducer","lastHarvest","producedResources","productionPerBlock","harvest","data","producer","ResourceProducerCard","prod","mul","Math","max","ShipStatBadge","type","speed","offense","defense","capacity","stroke","useShip","ship","loadedShip","setLoadedShip","unitCosts","offensivePower","defensivePower","useSpatioport","spatioport","setSpatioport","SpatioportInterface","SpatioportABI","currentDiscount","nextDiscount","discountFactor","build","quantity","SpatioportCard","setQuantity","placeholder","InfrastructuresSection","infrastructureCards","card","resourceProducers","powerPlants","includes","APIURL","tokensQuery","useFleets","approvedShips","approvedResources","setFleets","FleetInterface","FleetsABI","client","ApolloClient","uri","cache","InMemoryCache","fetchFleets","query","gql","shipsInFleet","fetchFleet","fleetId","fleet","fromPlanetId","toPlanetId","totalSpeed","totalOffensivePower","totalDefensivePower","arrivalBlock","fromPlanet","toPlanet","fleetStatus","Preparing","Orbitting","Travelling","resourcesInFleet","push","fetchPlanetFleets","fleetsOnPlanet","fleetOnPlanetByIndex","createFleet","move","to","moveFleet","addToFleet","removeFromFleet","putInOrbit","land","loadResource","load","unloadResource","unload","AddToFleetItem","min","LoadResourceItem","gt","RemoveFromFleetItem","UnloadResourceItem","FleetCard","allowMultiple","allowToggle","border","FleetsList","FleetsSection","Planet","useParams","sections","rightIcon","CommanderCard","alignContent","emptyColor","CreateCommanderCard","setName","setRace","handleName","match","usePlanets","center","radius","lowerX","sub","pow","upperX","lowerY","upperY","lowerZ","upperZ","useApproval","tokenAddress","spenderAddress","ERC20Interface","ERC20ABI","allowance","setAllowance","isApproving","setIsApproving","isApproved","setIsApproved","handleApprove","approve","fetchAllowance","onApprove","ColonizeCard","colonizer","setX","setY","setZ","div","isLoading","PlanetCard","Commander","setCommander","useCommander","Documentation","Planets","Fleets","Explore","WalletProvider","Providers","ChainPicker","App","path","element","Home","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae86ddba.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Flex,\n  Icon,\n  Link,\n  FlexProps,\n} from '@chakra-ui/react'\nimport { IconType } from 'react-icons';\nimport { ReactText } from 'react';\n\ninterface NavItemProps extends FlexProps {\n  icon: IconType;\n  url: string;\n  children: ReactText;\n}\nexport const NavItem = ({ icon, url, children, ...rest }: NavItemProps) => {\n  return (\n    <Link href={`#${url}`} style={{ textDecoration: 'none' }} _focus={{ boxShadow: 'none' }}>\n      <Flex\n        align=\"center\"\n        p=\"4\"\n        mx=\"4\"\n        borderRadius=\"lg\"\n        role=\"group\"\n        cursor=\"pointer\"\n        _hover={{\n          bg: 'cyan.400',\n          color: 'white',\n        }}\n        {...rest}>\n        {icon && (\n          <Icon\n            mr=\"4\"\n            fontSize=\"16\"\n            _groupHover={{\n              color: 'white',\n            }}\n            as={icon}\n          />\n        )}\n        {children}\n      </Flex>\n    </Link>\n  );\n};","import { IconType } from \"react-icons\";\nimport { BiPlanet } from \"react-icons/bi\";\nimport { FiCompass, FiHome, FiBook } from \"react-icons/fi\";\nimport { SiStarship } from \"react-icons/si\";\nimport { BsFillPersonFill } from \"react-icons/bs\";\n\ninterface LinkItemProps {\n  name: string;\n  icon: IconType;\n  url: string;\n}\nexport const LinkItems: Array<LinkItemProps> = [\n  { name: \"Home\", icon: FiHome, url: \"/\" },\n  { name: \"Commanders\", icon: BsFillPersonFill, url: \"/commanders\" },\n  { name: \"Planets\", icon: BiPlanet, url: \"/planets\" },\n  { name: \"Fleets\", icon: SiStarship, url: \"/fleets\" },\n  { name: \"Explore\", icon: FiCompass, url: \"/explore\" },\n  { name: \"Documentation\", icon: FiBook, url: \"/documentation\" },\n];\n","export default __webpack_public_path__ + \"static/media/black-hole-space-svgrepo-com.e831c469.png\";","import React from \"react\";\nimport { Box, CloseButton, Flex, useColorModeValue, Text, BoxProps, Image } from \"@chakra-ui/react\";\nimport { NavItem } from \"./Item\";\nimport { LinkItems } from \"./items\";\nimport logo from \"../../assets/black-hole-space-svgrepo-com.png\";\n\nexport interface SidebarProps extends BoxProps {\n  onClose: () => void;\n}\nexport const SidebarContent = ({ onClose, ...rest }: SidebarProps) => {\n  return (\n    <Box\n      transition=\"3s ease\"\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      borderRight=\"1px\"\n      borderRightColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n      w={{ base: \"full\", md: 60 }}\n      pos=\"fixed\"\n      h=\"full\"\n      {...rest}\n    >\n      <Flex h=\"20\" alignItems=\"center\" mx=\"8\" justifyContent=\"space-between\">\n        <Image src={logo} rounded=\"full\" maxW=\"48px\" />\n        <Text fontSize=\"2xl\" fontFamily=\"monospace\" fontWeight=\"bold\">\n          Sanctis\n        </Text>\n        <CloseButton display={{ base: \"flex\", md: \"none\" }} onClick={onClose} />\n      </Flex>\n      {LinkItems.map((link) => (\n        <NavItem key={link.name} icon={link.icon} url={link.url}>\n          {link.name}\n        </NavItem>\n      ))}\n    </Box>\n  );\n};\n","import { BigNumber } from \"ethers\";\n\nexport const shortAddress = (address: string | undefined): string => {\n  if (!address) return \"???\";\n  return (\n    address.substring(0, 4) +\n    \"...\" +\n    address.substring(address.length - 4, address.length)\n  );\n};\n\nexport const planetIdToCoordinate = (planetId: string) => {\n  const num = BigNumber.from(planetId)\n  const bits80 = BigNumber.from(\"0xFFFFF\")\n  const x = num.and(bits80)\n  const y = num.shr(80).and(bits80)\n  const z = num.shr(160).and(bits80)\n  return `(X=${x}; Y=${y}; Z=${z})`\n}","import {\n  VStack,\n  Image,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Spinner,\n} from \"@chakra-ui/react\";\n\ninterface ConfirmationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst ConfirmationModal: React.FC<ConfirmationModalProps> = ({\n  isOpen,\n  onClose\n}) => {\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent maxW=\"350px\">\n        <ModalHeader>Confirming transaction...</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <VStack spacing=\"8px\" my={2}>\n            <Image src={\"ojiji\"} w=\"100%\" h=\"100%\" />\n            <Spinner size=\"xl\" thickness={\"8px\"} />\n          </VStack>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default ConfirmationModal;\n","import { useDisclosure } from \"@chakra-ui/react\";\nimport ConfirmationModal from \"components/ConfirmationModal\";\nimport React, { createContext, useCallback } from \"react\";\n\nexport interface ConfirmationModalContextValues {\n  confirming: boolean\n  open: (action: () => Promise<void>, onClose?: () => Promise<void>) => Promise<void>\n}\n\nexport const ConfirmationModalContext = createContext<ConfirmationModalContextValues>({\n  confirming: false,\n  open: () => new Promise(() => {})\n})\n\nexport const ChainPickerProvider: React.FC = ({ children }) => {\n  const { isOpen: confirming, onOpen, onClose: onCloseModal } = useDisclosure();\n\n  const open = useCallback(async (action: () => Promise<void>, onClose?: () => Promise<void>) => {\n    onOpen()\n    await action()\n    if (onClose) await onClose()\n    onCloseModal()\n  }, [onOpen, onCloseModal])\n\n  return (\n    <ConfirmationModalContext.Provider\n      value={{ confirming, open }}\n    >\n      {children}\n      <ConfirmationModal isOpen={confirming} onClose={onCloseModal} />\n    </ConfirmationModalContext.Provider>\n  );\n};\n\nexport default ChainPickerProvider;\n","import { useContext } from \"react\";\n\nimport { ConfirmationModalContext } from \"../contexts/ConfirmationModal\";\n\nconst useConfirmationModal = () => {\n  return {\n    ...useContext(ConfirmationModalContext),\n  };\n};\n\nexport default useConfirmationModal;\n","export interface Network {\n  name: string;\n  rpcUrl: string;\n  chainId: number;\n}\n\nexport const supportedNetworks: Network[] = [\n  // {\n  //   name: \"Fantom Testnet\",\n  //   rpcUrl: \"https://xapi.testnet.fantom.network/lachesis\",\n  //   chainId: 4002,\n  // },\n  {\n    name: \"Polygon Testnet (Mumbai)\",\n    rpcUrl: \"https://matic-mumbai.chainstacklabs.com\",\n    chainId: 80001,\n  },\n  // {\n  //   name: \"Fantom Mainnet\",\n  //   rpcUrl: \"https://rpc.fantom.network/\",\n  //   chainId: 250,\n  // },\n];\n\nexport const deployedAddresses: { [id: number]: { [contract: string]: string } } = {\n  4002: {\n    sanctis: \"0x82796af064346a29d5a27057d16a28be0c4b3316\",\n    credits: \"0x9abbbddbd5e6bf2697c4eb8109e7bd4335e40bb1\",\n    parliament: \"0xacec97ae37b3fd23d699251a341e902689e1c238\",\n    commanders: \"0x3032804c781d518f554b4e5e0e179103b15eab34\",\n    planets: \"0x2620ae485267a456d5fe872bef584b4a52c243e2\",\n    fleets: \"0x08fd27f8dd1e2b28b2ce99572e0699c0364f0d29\",\n    humans: \"0x989c5d11a3607cd3d5663dd2c89f9d70e63bbf9c\",\n    energy: \"0x9023550b35e8438734d6f541648ea036a46033d4\",\n    iron: \"0x84b288f20389aa710b7ff0232e48c4608b731fb8\",\n    deuterium: \"0xdd7e06e51a748acacd6574d26bb73d027667f08c\",\n    silicon: \"0x7a19b32208ceaa7567fe412af85e05403021cef8\",\n    ironMines: \"0x5571c77a08c57548eca2f619e192a2eeebdbde9b\",\n    siliconFurnaces: \"0xefdfe52bd8b7d30a1a8bd969f64e635b1fc82897\",\n    heavyWaterPlants: \"0x5c40018bdc649998029b549ee93e05bf82b9cfce\",\n    solarPanels: \"0x0d911b301015e69754e1dea19255e65890f362df\",\n    fusionReactors: \"0x8c36ccff8265a3e8a5fe4623903fa1284ef26beb\",\n    spatioports: \"0xa569f91ab1038416239635ce84917e8a2c2b1f68\",\n    transporters: \"0x911361700250b3a17b56fd0b874ba3799b1f4bc3\",\n    scouts: \"0xfdb621612cae882d3de41f46de3da9e9c8f81da6\",\n    destroyers: \"0xceacea7a31c308f082cf7cb0273d6b22948bfa22\",\n    plundering: \"0x8febd06842530cbc196178630a6d3708f886b075\",\n    resourceWrapper: \"0x43d37eb9f543bc45dab093ecae13f899e637ceec\",\n  },\n  80001: {\n    sanctis: \"0x7e473a878608ca239173f5ae0e36673ca986f57e\",\n    credits: \"0x0867903f73ea5b2f0a435980ee405b7018ed073b\",\n    parliament: \"0x005ceb63ecf96ca25c718e0ecad307869604810b\",\n    commanders: \"0x837d5deff7431596842b76f67ea740bf0eb8e43e\",\n    planets: \"0xec1887f54398474a6eb8f655a1d80c15adb5d4cc\",\n    fleets: \"0x2f66d04bd487a01419dec464197fd5efb3728442\",\n    humans: \"0xa1da4b58792754c2b080e79fa44af7fb93d7a61b\",\n    energy: \"0x509ea76b6b03fe1a7d59f432dbe4592dba47c322\",\n    iron: \"0x3c506fb196d7e64222f4aec753a80b81fe2d7cb2\",\n    deuterium: \"0xd1b0c426c267b138ffffd5b765de36da8b561a16\",\n    silicon: \"0x82d0770cde70fc414010ef23d4039304912bed77\",\n    ironMines: \"0xfa945e1e4e6a9820b87ae39a73afe4eb22477f41\",\n    siliconFurnaces: \"0xb1c30f4d9e987ae574d6bfdbebf02f013cfc1dbc\",\n    heavyWaterPlants: \"0x26c861ad93accc9a4274d062fa905b6e17eabab8\",\n    solarPanels: \"0x08f44399465cf3362cb55915a8f7fe37315c33c7\",\n    fusionReactors: \"0xb5866cd7522c36882209d9de1c3db37659c5b1dd\",\n    spatioports: \"0x55b2aaacf1e79852930790448f79f4cb28acbb10\",\n    transporters: \"0x6415af0dc052f70c65606aed8375a39f1f5b4daa\",\n    scouts: \"0xbbfdbfadcad882ccd8702eb5adb8f7a04cbcfbb4\",\n    destroyers: \"0x2f1ba24d68e3fdd6909f00a415694dd1a59f8cda\",\n    plundering: \"0x2c5cfa80741af895d68cc72e28adb7520fa94628\",\n    colonize: \"0xd4232b5c6b8a3c539086ce9b3ff9aa5e4b214868\",\n    resourceWrapper: \"0xdef8906f3f7e6b37695233ff5aa7bca14c1bd10c\",\n  },\n};\n\nexport default deployedAddresses;\n","export default __webpack_public_path__ + \"static/media/electric.711b3b48.svg\";","export default __webpack_public_path__ + \"static/media/metal-bar.7f83f5c0.svg\";","export default __webpack_public_path__ + \"static/media/ore.4eebbfb5.svg\";","export default __webpack_public_path__ + \"static/media/topaz.a9cfb39d.svg\";","import { useCallback, useEffect, useState } from \"react\";\n\nexport default function useLocalStorage<T>(key: string, initialValue: T) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = useCallback(\n    (value: T | ((value: T) => T)) => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore = value instanceof Function ? value(storedValue) : value;\n        // Save state\n        setStoredValue(valueToStore);\n        // Save to local storage\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // A more advanced implementation would handle the error case\n        console.log(error);\n      }\n    },\n    [key, storedValue]\n  );\n\n  // Update the stored value if the key is updated\n  useEffect(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      setStoredValue(item ? JSON.parse(item) : initialValue);\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error, initialValue);\n      setStoredValue(initialValue);\n    }\n  }, [key, initialValue]);\n\n  return [storedValue, setValue] as [T, (value: T | ((value: T) => T)) => void];\n}\n","import React, { createContext } from \"react\";\n\nimport { supportedNetworks, Network } from \"../constants\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nexport interface ChainPickerContextValues extends Network {\n  setNetwork: (network: Network) => void\n}\n\nexport const ChainPickerContext = createContext<ChainPickerContextValues>({\n  ...supportedNetworks[0],\n  setNetwork: () => {}\n})\n\nexport const ChainPickerProvider: React.FC = ({ children }) => {\n  const [network, setNetwork] = useLocalStorage<Network>(\"network\", supportedNetworks[0])\n\n  return (\n    <ChainPickerContext.Provider\n      value={{ ...network, setNetwork }}\n    >\n      {children}\n    </ChainPickerContext.Provider>\n  );\n};\n\nexport default ChainPickerProvider;\n","import { useContext } from \"react\";\n\nimport { ChainPickerContext } from \"../contexts/ChainPicker\";\n\nconst useChainPicker = () => {\n  return {\n    ...useContext(ChainPickerContext),\n  };\n};\n\nexport default useChainPicker;\n","import energy from '../assets/electric.svg'\nimport metalBar from '../assets/metal-bar.svg'\nimport ore from '../assets/ore.svg'\nimport deuterium from '../assets/topaz.svg'\nimport deployedAddresses from '../constants'\nimport { Infrastructure, Race, Resource, Ship } from '../contexts/Sanctis/types'\nimport useChainPicker from './useChainPicker'\n\nconst useApprovedObjects = () => {\n  const { chainId } = useChainPicker();\n\n  const races: Race[] = [{ name: \"Human\", address: deployedAddresses[chainId].humans }];\n  const resources: Resource[] = [\n    { name: \"Energy\", address: deployedAddresses[chainId].energy, icon: energy },\n    { name: \"Iron\", address: deployedAddresses[chainId].iron, icon: metalBar },\n    { name: \"Silicon\", address: deployedAddresses[chainId].silicon, icon: ore },\n    { name: \"Deuterium\", address: deployedAddresses[chainId].deuterium, icon: deuterium },\n  ];\n  const infrastructures: Infrastructure[] = [\n    {\n      name: \"Iron mines\",\n      description: \"It extracts a constant rate of iron.\",\n      address: deployedAddresses[chainId].ironMines,\n    },\n    {\n      name: \"Silicon Furnaces\",\n      description: \"It produces silicon at a constant rate.\",\n      address: deployedAddresses[chainId].siliconFurnaces,\n    },\n    {\n      name: \"Heavy Water Plants\",\n      description: \"Used to concentrate deuterium.\",\n      address: deployedAddresses[chainId].heavyWaterPlants,\n    },\n    {\n      name: \"Solar Panels\",\n      description: \"Harvests the energy of the nearby star\",\n      address: deployedAddresses[chainId].solarPanels,\n    },\n    {\n      name: \"Fusion Reactors\",\n      description: \"Fuses deuterium isotopes to create energy.\",\n      address: deployedAddresses[chainId].fusionReactors,\n    },\n    {\n      name: \"Spatioports\",\n      description: \"A building necessary to build ships\",\n      address: deployedAddresses[chainId].spatioports,\n    },\n  ];\n  const ships: Ship[] = [\n    {\n      name: \"Transporters\",\n      description: \"Small ships used to transports resources around.\",\n      address: deployedAddresses[chainId].transporters,\n    },\n    { name: \"Scouts\", description: \"Fast reconnaissance units.\", address: deployedAddresses[chainId].scouts },\n    {\n      name: \"Destroyers\",\n      description: \"Heavily armed ships used to take down ennemy's fleets\",\n      address: deployedAddresses[chainId].destroyers,\n    },\n  ];\n\n  return {\n    races,\n    resources,\n    infrastructures,\n    ships,\n  };\n};\n\nexport default useApprovedObjects;\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { ExternalProvider } from \"@ethersproject/providers\";\r\nimport { BigNumber, Contract, ethers, providers, utils } from \"ethers\";\r\nimport useConfirmationModal from \"hooks/useConfirmationModal\";\r\nimport React, { createContext, useCallback, useEffect, useMemo, useState } from \"react\";\r\n\r\nimport { deployedAddresses } from \"../../constants\";\r\nimport CommandersABI from \"../../constants/contracts/Commanders.sol/Commanders.json\";\r\nimport InfrastructureABI from \"../../constants/contracts/IInfrastructure.sol/IInfrastructure.json\";\r\nimport PowerPlantsABI from \"../../constants/contracts/IPowerPlants.sol/IPowerPlants.json\";\r\nimport ResourceABI from \"../../constants/contracts/IResource.sol/IResource.json\";\r\nimport ResourceProducerABI from \"../../constants/contracts/IResourceProducer.sol/IResourceProducer.json\";\r\nimport ShipABI from \"../../constants/contracts/IShip.sol/IShip.json\";\r\nimport PlanetsABI from \"../../constants/contracts/Planets.sol/Planets.json\";\r\nimport SanctisABI from \"../../constants/contracts/Sanctis.sol/Sanctis.json\";\r\nimport CreditsABI from \"../../constants/contracts/SpaceCredits.sol/SpaceCredits.json\";\r\nimport ColonizeABI from \"../../constants/contracts/Colonize.sol/Colonize.json\";\r\nimport useApprovedObjects from \"../../hooks/useApprovedObjects\";\r\nimport useChainPicker from \"../../hooks/useChainPicker\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport { Commander, Planet, Race, Reserve } from \"./types\";\r\n\r\nexport interface SanctisContextValues {\r\n  colonizationCost?: BigNumber;\r\n  ownedCredits?: number;\r\n  ownedCommanders?: Commander[];\r\n  currentCommander?: Commander;\r\n  commanders: { [commanderId: string]: Commander };\r\n  planets: { [planetId: string]: Planet };\r\n  setCurrentCommander: (commander?: Commander) => void;\r\n  fetchCommander: (commanderId: string) => Promise<Commander | undefined | null>;\r\n  fetchPlanet: (planetId: string) => Promise<Planet | undefined | null>;\r\n  createCommander: (name: string, race: Race) => Promise<void>;\r\n  colonizePlanet: (commander: Commander, x: number, y: number, z: number) => Promise<void>;\r\n}\r\n\r\nexport const SanctisContext = createContext<SanctisContextValues>({\r\n  commanders: {},\r\n  planets: {},\r\n  setCurrentCommander: (commander?: Commander) => {},\r\n  fetchCommander: () => new Promise(() => {}),\r\n  fetchPlanet: () => new Promise(() => {}),\r\n  createCommander: () => new Promise(() => {}),\r\n  colonizePlanet: () => new Promise(() => {}),\r\n});\r\n\r\nexport const SanctisProvider: React.FC = ({ children }) => {\r\n  const toast = useToast();\r\n  const { open } = useConfirmationModal();\r\n  const { chainId } = useChainPicker();\r\n  const approvedObjects = useApprovedObjects();\r\n  const { ethereum, account } = useWallet<ExternalProvider>();\r\n\r\n  const contracts = useMemo(() => {\r\n    if (!ethereum) return;\r\n    const SanctisInterface = new utils.Interface(SanctisABI.abi);\r\n    const CommandersInterface = new utils.Interface(CommandersABI.abi);\r\n    const CreditsInterface = new utils.Interface(CreditsABI.abi);\r\n    const PlanetsInterface = new utils.Interface(PlanetsABI.abi);\r\n    const ResourceInterface = new utils.Interface(ResourceABI.abi);\r\n    const PowerPlantsInterface = new utils.Interface(PowerPlantsABI.abi);\r\n    const ResourceProducerInterface = new utils.Interface(ResourceProducerABI.abi);\r\n    const ShipInterface = new utils.Interface(ShipABI.abi);\r\n    const ColonizeInterface = new utils.Interface(ColonizeABI.abi);\r\n    const signer = new providers.Web3Provider(ethereum).getSigner();\r\n    return {\r\n      sanctis: new Contract(deployedAddresses[chainId].sanctis, SanctisInterface, signer),\r\n      commanders: new Contract(deployedAddresses[chainId].commanders, CommandersInterface, signer),\r\n      credits: new Contract(deployedAddresses[chainId].credits, CreditsInterface, signer),\r\n      planets: new Contract(deployedAddresses[chainId].planets, PlanetsInterface, signer),\r\n      energy: new Contract(deployedAddresses[chainId].energy, ResourceInterface, signer),\r\n      iron: new Contract(deployedAddresses[chainId].iron, ResourceInterface, signer),\r\n      silicon: new Contract(deployedAddresses[chainId].silicon, ResourceInterface, signer),\r\n      deuterium: new Contract(deployedAddresses[chainId].deuterium, ResourceInterface, signer),\r\n      solarPanels: new Contract(deployedAddresses[chainId].solarPanels, PowerPlantsInterface, signer),\r\n      fusionReactors: new Contract(deployedAddresses[chainId].fusionReactors, PowerPlantsInterface, signer),\r\n      ironMines: new Contract(deployedAddresses[chainId].ironMines, ResourceProducerInterface, signer),\r\n      siliconFurnaces: new Contract(deployedAddresses[chainId].siliconFurnaces, ResourceProducerInterface, signer),\r\n      heavyWaterPlants: new Contract(deployedAddresses[chainId].heavyWaterPlants, ResourceProducerInterface, signer),\r\n      transporters: new Contract(deployedAddresses[chainId].transporters, ShipInterface, signer),\r\n      scouts: new Contract(deployedAddresses[chainId].scouts, ShipInterface, signer),\r\n      destroyers: new Contract(deployedAddresses[chainId].destroyers, ShipInterface, signer),\r\n      colonize: new Contract(deployedAddresses[chainId].colonize, ColonizeInterface, signer),\r\n    };\r\n  }, [chainId, ethereum]);\r\n\r\n  const [ownedCredits, setOwnedCredits] = useState<number>();\r\n  const [ownedCommanders, setOwnedCommanders] = useState<Commander[]>();\r\n  const [commanders, setCommanders] = useState<{ [commanderId: string]: Commander }>({});\r\n  const [memorizedCommander, setMemorizedCommander] = useLocalStorage<Commander | undefined>(\r\n    \"memorized_commander\",\r\n    undefined\r\n  );\r\n  const [owner, setOwner] = useLocalStorage<string | null>(\"memorized_owner\", null);\r\n  const [currentCommander, setCurrentCommanderState] = useState<Commander | undefined>();\r\n  const [planets, setPlanets] = useState<{ [planetId: string]: Planet }>({});\r\n  const [colonizationCost, setColonizationCost] = useState<BigNumber>();\r\n\r\n  const setCurrentCommander = useCallback(\r\n    (commander?: Commander) => {\r\n      setMemorizedCommander(commander);\r\n      setOwner(account);\r\n      setCurrentCommanderState(commander);\r\n    },\r\n    [account, setOwner, setMemorizedCommander, setCurrentCommanderState]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (\r\n      account &&\r\n      memorizedCommander &&\r\n      ownedCommanders &&\r\n      ownedCommanders.find((e) => e.id === memorizedCommander.id) &&\r\n      owner === account\r\n    ) {\r\n      setCurrentCommander(memorizedCommander);\r\n    } else if (account && account !== owner) {\r\n      setCurrentCommander(undefined);\r\n    }\r\n  }, [memorizedCommander, owner, account, ownedCommanders, setCurrentCommander]);\r\n\r\n  const fetchColonizationCost = useCallback(async () => {\r\n    if (!contracts) return;\r\n    setColonizationCost(await contracts.colonize.colonizationCost());\r\n  }, [contracts]);\r\n\r\n  useEffect(() => {\r\n    fetchColonizationCost();\r\n  }, [fetchColonizationCost]);\r\n\r\n  const fetchOwnedCredits = useCallback(async () => {\r\n    if (!contracts || !account) return;\r\n    setOwnedCredits(Number(ethers.utils.formatEther(await contracts.credits.balanceOf(account))));\r\n  }, [contracts, account]);\r\n\r\n  useEffect(() => {\r\n    fetchOwnedCredits();\r\n  }, [fetchOwnedCredits]);\r\n\r\n  const fetchCommander = useCallback(\r\n    async (commanderId: string) => {\r\n      if (!contracts) return;\r\n\r\n      try {\r\n        const [name, race] = await contracts.commanders.commander(commanderId);\r\n        // TODO: Fetch planets using The Graph\r\n        const commander: Commander = {\r\n          id: commanderId,\r\n          name,\r\n          race: approvedObjects.races.find((e) => e.address === race),\r\n          planets: [],\r\n        };\r\n        setCommanders((old) => {\r\n          old[commanderId] = commander;\r\n          return old;\r\n        });\r\n        return commander;\r\n      } catch (err) {\r\n        console.log(\"Error fetching commander:\", err);\r\n        return null;\r\n      }\r\n    },\r\n    [approvedObjects, contracts]\r\n  );\r\n\r\n  const fetchOwnedCommanders = useCallback(async () => {\r\n    if (!contracts || !account) return;\r\n\r\n    const commandersBalance = (await contracts.commanders.balanceOf(account)).toNumber();\r\n\r\n    if (ownedCommanders?.length === commandersBalance) return;\r\n\r\n    const commanders = (\r\n      await Promise.all(\r\n        Array(commandersBalance)\r\n          .fill(0)\r\n          .map(\r\n            async (_, i) =>\r\n              (await fetchCommander((await contracts.commanders.tokenOfOwnerByIndex(account, i)).toString()))!\r\n          )\r\n      )\r\n    ).filter(Boolean);\r\n\r\n    setOwnedCommanders(commanders);\r\n  }, [account, contracts, ownedCommanders, fetchCommander]);\r\n\r\n  useEffect(() => {\r\n    fetchOwnedCommanders();\r\n  }, [fetchOwnedCommanders]);\r\n\r\n  const fetchPlanet = useCallback(\r\n    async (planetId: string) => {\r\n      if (!contracts) return;\r\n      try {\r\n        const { status, ruler, x, y, z, humidity } = await contracts.planets.planet(planetId);\r\n        const reserves: Reserve[] = await Promise.all(\r\n          approvedObjects.resources.map(async (resource) => {\r\n            const ResourceInterface = new utils.Interface(ResourceABI.abi);\r\n            const contract = new Contract(\r\n              resource.address,\r\n              ResourceInterface,\r\n              new providers.Web3Provider(ethereum).getSigner()\r\n            );\r\n            return {\r\n              resource,\r\n              amount: await contract.reserve(planetId),\r\n            };\r\n          })\r\n        );\r\n        const infrastructures = await Promise.all(\r\n          approvedObjects.infrastructures.map(async (infrastructure) => {\r\n            const InfrastructureInterface = new utils.Interface(InfrastructureABI.abi);\r\n            const contract = new Contract(\r\n              infrastructure.address,\r\n              InfrastructureInterface,\r\n              new providers.Web3Provider(ethereum).getSigner()\r\n            );\r\n            return {\r\n              ...infrastructure,\r\n              level: (await contract.level(planetId)).toNumber(),\r\n            };\r\n          })\r\n        );\r\n        const planet = {\r\n          id: planetId,\r\n          status: status,\r\n          ruler: ruler.toString(),\r\n          x: x.toNumber(),\r\n          y: y.toNumber(),\r\n          z: z.toNumber(),\r\n          humidity: humidity,\r\n          infrastructures: infrastructures,\r\n          reserves: reserves,\r\n        };\r\n        setPlanets((old) => {\r\n          old[planetId] = planet;\r\n          return old;\r\n        });\r\n        return planet;\r\n      } catch (err) {\r\n        console.log(\"Error fetching planet:\", err);\r\n        return null;\r\n      }\r\n    },\r\n    [approvedObjects, contracts, ethereum]\r\n  );\r\n\r\n  const createCommander = useCallback(\r\n    async (name: string, race: Race) => {\r\n      if (!contracts) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contracts.commanders.create(name, race.address);\r\n          await result.wait();\r\n          await fetchOwnedCommanders();\r\n          toast({ status: \"success\", title: \"Created\", description: `The world awaits your order, Commander ${name}` });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed creation: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contracts, open, toast, fetchOwnedCommanders]\r\n  );\r\n\r\n  const colonizePlanet = useCallback(\r\n    async (commander: Commander, x: number, y: number, z: number) => {\r\n      if (!contracts) return;\r\n\r\n      open(async () => {\r\n        try {\r\n          const planetId = BigNumber.from(z).toTwos(80).shl(80).add(y).shl(80).add(x);\r\n          const result = await contracts.colonize.colonize(commander.id, planetId);\r\n          await result.wait();\r\n          await fetchPlanet(planetId.toString());\r\n          await fetchOwnedCredits();\r\n          await fetchCommander(commander.id);\r\n          toast({ status: \"success\", title: \"Created\", description: `A new planet has been colonized` });\r\n        } catch (err: any) {\r\n          console.log(err);\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed colonization: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contracts, open, toast, fetchCommander, fetchPlanet, fetchOwnedCredits]\r\n  );\r\n\r\n  return (\r\n    <SanctisContext.Provider\r\n      value={{\r\n        colonizationCost,\r\n        ownedCredits,\r\n        ownedCommanders,\r\n        commanders,\r\n        planets,\r\n        currentCommander,\r\n        setCurrentCommander,\r\n        fetchCommander,\r\n        fetchPlanet,\r\n        createCommander,\r\n        colonizePlanet,\r\n      }}\r\n    >\r\n      {children}\r\n    </SanctisContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SanctisProvider;\r\n","import { useContext } from \"react\";\n\nimport { SanctisContext } from \"../contexts/Sanctis\";\n\nconst useSanctis = () => {\n  return {\n    ...useContext(SanctisContext),\n  };\n};\n\nexport default useSanctis;\n","export default __webpack_public_path__ + \"static/media/character.977d0c9e.svg\";","import React, { useCallback } from \"react\";\nimport {\n  Avatar,\n  Box,\n  Flex,\n  HStack,\n  VStack,\n  useColorModeValue,\n  Text,\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n  MenuGroup,\n} from \"@chakra-ui/react\";\nimport { FiChevronDown } from \"react-icons/fi\";\nimport { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { shortAddress } from \"utils\";\nimport numeral from \"numeral\";\nimport useSanctis from \"hooks/useSanctis\";\n\nimport commanderIcon from \"../../assets/character.svg\";\n\nexport const CommanderBadge: React.FC<{ setAutoconnect: (date: number) => void }> = ({ setAutoconnect }) => {\n  const { reset, account } = useWallet();\n  const { ownedCredits, ownedCommanders, currentCommander, setCurrentCommander } = useSanctis();\n\n  const handleReset = useCallback(() => {\n    setAutoconnect(Date.now());\n    setCurrentCommander(undefined);\n    reset();\n  }, [setAutoconnect, reset, setCurrentCommander]);\n\n  return (\n    <Flex alignItems={\"center\"}>\n      <Menu>\n        <MenuButton py={2} transition=\"all 0.3s\" _focus={{ boxShadow: \"none\" }}>\n          <HStack>\n            <Avatar size={\"sm\"} src={commanderIcon} />\n            <VStack display={{ base: \"none\", md: \"flex\" }} alignItems=\"flex-start\" spacing=\"1px\" ml=\"2\">\n              <Text fontSize=\"sm\">{currentCommander ? currentCommander.name : shortAddress(account || \"\")}</Text>\n              <Text fontSize=\"xs\" color=\"gray.600\">\n                {ownedCredits ? numeral(ownedCredits).format(\"0.00aa\") : \"???\"} $CREDS\n              </Text>\n            </VStack>\n            <Box display={{ base: \"none\", md: \"flex\" }}>\n              <FiChevronDown />\n            </Box>\n          </HStack>\n        </MenuButton>\n        <MenuList bg={useColorModeValue(\"white\", \"gray.900\")} borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}>\n          <MenuGroup title=\"Commanders\">\n            {[\n              ownedCommanders &&\n                ownedCommanders.map((e) => (\n                  <MenuItem key={e.name || \"\" + e.id} onClick={() => setCurrentCommander(e)}>\n                    {e.name}\n                  </MenuItem>\n                )),\n              <MenuItem key={\"create\"}>Create a commander</MenuItem>,\n            ]}\n          </MenuGroup>\n          <MenuDivider />\n          <MenuGroup title=\"Wallet\">\n            <MenuItem onClick={handleReset}>Disconnect</MenuItem>\n          </MenuGroup>\n        </MenuList>\n      </Menu>\n    </Flex>\n  );\n};\n","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import React from \"react\";\nimport {\n  useColorModeValue,\n  Menu,\n  MenuButton,\n  MenuItem,\n  MenuList,\n  MenuGroup,\n  IconButton,\n  Badge,\n  MenuDivider,\n} from \"@chakra-ui/react\";\nimport { BiNetworkChart } from \"react-icons/bi\";\n\nimport useChainPicker from \"../../hooks/useChainPicker\";\nimport { supportedNetworks } from \"../../constants\";\n\nexport const NetworkPicker: React.FC = () => {\n  const { chainId, setNetwork } = useChainPicker();\n\n  return (\n    <Menu>\n      <IconButton\n        as={MenuButton}\n        p={3}\n        transition=\"all 0.3s\"\n        size=\"md\"\n        fontSize=\"lg\"\n        variant=\"ghost\"\n        color=\"current\"\n        icon={<BiNetworkChart />}\n        aria-label={`Switch network`}\n      />\n      <MenuList bg={useColorModeValue(\"white\", \"gray.900\")} borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}>\n        <MenuGroup title=\"Networks\">\n          <MenuDivider />\n          {supportedNetworks.map((e) => (\n            <MenuItem key={e.name || \"\" + e.chainId} onClick={() => setNetwork(e)}>\n              {e.chainId === chainId && <Badge>Selected</Badge>} {e.name}\n            </MenuItem>\n          ))}\n        </MenuGroup>\n      </MenuList>\n    </Menu>\n  );\n};\n","import {\n  IconButton,\n  Flex,\n  HStack,\n  useColorModeValue,\n  Text,\n  FlexProps,\n  Button,\n  useDisclosure,\n  Modal,\n  ModalCloseButton,\n  ModalHeader,\n  ModalContent,\n  ModalBody,\n  Box,\n  ModalOverlay,\n} from \"@chakra-ui/react\";\nimport { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { FiMenu } from \"react-icons/fi\";\nimport { GrConnect } from \"react-icons/gr\";\nimport { CommanderBadge } from \"./CommanderBadge\";\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\nimport { useCallback, useEffect } from \"react\";\nimport useLocalStorage from \"hooks/useLocalStorage\";\nimport { NetworkPicker } from \"./NetworkPicker\";\n\ninterface MobileProps extends FlexProps {\n  onOpen: () => void;\n}\n\nconst validConnectors = [{ name: \"MetaMask\", id: \"injected\" }];\n\nconst autoconnectPeriod = 86400000;\nconst startAutoconnect = Date.now();\n\nexport const MobileNav = ({ onOpen, ...rest }: MobileProps) => {\n  const { account, connect } = useWallet();\n  const { isOpen, onOpen: openModal, onClose } = useDisclosure();\n  const [autoconnect, setAutoconnect] = useLocalStorage(\"autoconnectExpirationDate\", startAutoconnect);\n  const [connector, setConnector] = useLocalStorage<string | undefined>(\"connector\", undefined);\n\n  const handleChooseWallet = useCallback(async () => {\n    openModal();\n  }, [openModal]);\n\n  const handleConnect = useCallback(\n    async (id: string) => {\n      await connect(id as any);\n      setAutoconnect(Date.now() + autoconnectPeriod);\n      setConnector(id);\n      onClose();\n    },\n    [connect, onClose, setAutoconnect, setConnector]\n  );\n\n  useEffect(() => {\n    if (!connector) return;\n    if (autoconnect > Date.now() && !account) {\n      connect(connector as any);\n    }\n  }, [account, autoconnect, connector, connect, handleConnect]);\n\n  return (\n    <Flex\n      ml={{ base: 0, md: 60 }}\n      px={{ base: 4, md: 4 }}\n      height=\"20\"\n      alignItems=\"center\"\n      bg={useColorModeValue(\"white\", \"gray.900\")}\n      borderBottomWidth=\"1px\"\n      borderBottomColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n      justifyContent={{ base: \"space-between\", md: \"flex-end\" }}\n      {...rest}\n    >\n      <IconButton\n        display={{ base: \"flex\", md: \"none\" }}\n        onClick={onOpen}\n        variant=\"outline\"\n        aria-label=\"open menu\"\n        icon={<FiMenu />}\n      />\n      <Text display={{ base: \"flex\", md: \"none\" }} fontSize=\"2xl\" fontFamily=\"monospace\" fontWeight=\"bold\">\n        Logo\n      </Text>\n\n      <HStack spacing={{ base: \"0\", md: \"6\" }}>\n        <ColorModeSwitcher />\n        <NetworkPicker />\n        {account ? (\n          <CommanderBadge setAutoconnect={setAutoconnect} />\n        ) : (\n          <Button\n            size=\"lg\"\n            variant=\"ghost\"\n            aria-label=\"open menu\"\n            leftIcon={<GrConnect />}\n            onClick={handleChooseWallet}\n          >\n            Connect\n          </Button>\n        )}\n      </HStack>\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalCloseButton />\n          <ModalHeader>Choose a wallet</ModalHeader>\n          <ModalBody>\n            {Object.values(validConnectors).map((connector) => (\n              <Button key={connector.id} isFullWidth onClick={() => handleConnect(connector.id)}>\n                <Box>{connector.name}</Box>\n              </Button>\n            ))}\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </Flex>\n  );\n};\n","import Sidebar from \"./Sidebar\"\n\nexport default Sidebar","import { ReactNode } from 'react';\nimport {\n  Box,\n  useColorModeValue,\n  Drawer,\n  DrawerContent,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { SidebarContent } from './Content';\nimport { MobileNav } from './Mobile';\n\nexport default function SidebarWithHeader({\n  children,\n}: {\n  children: ReactNode;\n}) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  return (\n    <Box minH=\"100vh\" bg={useColorModeValue('gray.100', 'gray.900')}>\n      <SidebarContent\n        onClose={() => onClose}\n        display={{ base: 'none', md: 'block' }}\n      />\n      <Drawer\n        autoFocus={false}\n        isOpen={isOpen}\n        placement=\"left\"\n        onClose={onClose}\n        returnFocusOnClose={false}\n        onOverlayClick={onClose}\n        size=\"full\">\n        <DrawerContent>\n          <SidebarContent onClose={onClose} />\n        </DrawerContent>\n      </Drawer>\n      {/* mobilenav */}\n      <MobileNav onOpen={onOpen} />\n      <Box ml={{ base: 0, md: 60 }} p=\"4\">\n        {children}\n      </Box>\n    </Box>\n  );\n}","import React from \"react\";\nimport { Box, Button, Container, Heading, Link, Stack, useColorModeValue } from \"@chakra-ui/react\";\n\nimport useCommanders from \"../../hooks/useSanctis\";\n\nconst Commanders: React.FC = () => {\n  const { ownedCommanders } = useCommanders();\n\n  console.log(ownedCommanders);\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Stack\n        background={useColorModeValue(\"white\", \"gray.800\")}\n        textAlign={\"center\"}\n        align={\"center\"}\n        spacing={{ base: 8, md: 10 }}\n        p=\"3\"\n        rounded=\"xl\"\n      >\n        <Heading>Sanctis</Heading>\n        <Box>\n          A commander is free to create and you can have as many as you want. However, the game is designed to encourage\n          players to have few commanders with a big empire rather than many commanders with smaller empires.\n        </Box>\n        <Button as={Link} href={\"#/commanders\"}>\n          Choose a commander\n        </Button>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Commanders;\n","import { Planet } from \"contexts/Sanctis/types\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport useSanctis from \"./useSanctis\";\n\nexport default function usePlanet(planetId?: string) {\n  const { planets, fetchPlanet } = useSanctis()\n  const [planet, setPlanet] = useState<Planet | null>()\n\n  const fetch = useCallback(async () => {\n    if(!planetId) return\n    else if(!planets[planetId]) {\n      setPlanet(await fetchPlanet(planetId))\n    } else {\n      setPlanet(planets[planetId])\n    }\n  }, [planets, planetId, fetchPlanet])\n\n  useEffect(() =>  {\n    fetch()\n  }, [fetch])\n\n  return planet\n}","import { BigNumber } from \"ethers\";\r\n\r\nexport interface Race {\r\n  address: string;\r\n  name: string;\r\n}\r\n\r\nexport interface Resource {\r\n  address: string;\r\n  name: string;\r\n  icon: string;\r\n}\r\n\r\nexport interface Reserve {\r\n  resource: Resource;\r\n  amount: BigNumber;\r\n}\r\n\r\nexport interface Infrastructure {\r\n  address: string;\r\n  name: string;\r\n  description: string;\r\n  level?: number;\r\n  nextUpgrade?: number;\r\n  costsResources?: Resource[];\r\n  nextCosts?: BigNumber[];\r\n}\r\n\r\nexport interface ResourceProducer extends Infrastructure {\r\n  level?: number;\r\n  producedResources?: Resource[];\r\n  productionPerBlock?: number[];\r\n  lastHarvest?: number;\r\n  nextUpgrade?: number;\r\n}\r\n\r\nexport interface Ship {\r\n  address: string;\r\n  name: string;\r\n  description: string;\r\n  costsResources?: Resource[];\r\n  costs?: BigNumber[];\r\n  speed?: number;\r\n  offensivePower?: number;\r\n  defensivePower?: number;\r\n  capacity?: BigNumber;\r\n  reserve?: number;\r\n}\r\n\r\nexport enum FleetStatus {\r\n  Preparing = \"Preparing\",\r\n  Orbitting = \"Orbitting\",\r\n  Travelling = \"Travelling\",\r\n}\r\n\r\nexport interface Fleet {\r\n  id: string;\r\n  commander?: BigNumber;\r\n  fromPlanet?: Planet;\r\n  toPlanet?: Planet;\r\n  totalSpeed?: BigNumber;\r\n  totalOffensivePower?: BigNumber;\r\n  totalDefensivePower?: BigNumber;\r\n  capacity?: BigNumber;\r\n  ships?: BigNumber;\r\n  arrivalBlock?: number;\r\n  status?: FleetStatus;\r\n  shipsInFleet: { [address: string]: number };\r\n  resources: Reserve[];\r\n}\r\n\r\nexport enum PlanetStatus {\r\n  Unknown,\r\n  Uncharted,\r\n  Colonized,\r\n  Federated,\r\n  Occupied,\r\n}\r\n\r\nexport interface Planet {\r\n  id: string;\r\n  status: PlanetStatus;\r\n  ruler: string;\r\n  x: BigNumber;\r\n  y: BigNumber;\r\n  z: BigNumber;\r\n  humidity: number;\r\n  infrastructures: Infrastructure[];\r\n  reserves: Reserve[];\r\n}\r\n\r\nexport interface Commander {\r\n  id: string;\r\n  name?: string;\r\n  race?: Race;\r\n  onboarding?: Date;\r\n  planets?: string[];\r\n}\r\n","import { Box, Flex, Image, Text, Tooltip, useColorModeValue } from \"@chakra-ui/react\";\nimport { BigNumber, ethers } from \"ethers\";\nimport numeral from \"numeral\";\nimport React, { useMemo } from \"react\";\n\nimport { Resource } from \"../contexts/Sanctis/types\";\n\nconst ResourceBadge: React.FC<{ resource: Resource; amount?: BigNumber; size?: \"sm\" | \"md\" | \"lg\" }> = ({\n  resource,\n  amount,\n  size = \"md\",\n}) => {\n  const bgColor = useColorModeValue(\"gray.400\", \"gray.600\");\n  const iconSize = ((size: string) => {\n    switch (size) {\n      case \"sm\":\n        return \"30px\";\n      case \"md\":\n        return \"40px\";\n      case \"lg\":\n        return \"50px\";\n      default:\n        return \"40px\";\n    }\n  })(size);\n  const width = useMemo(() => {\n    switch (size) {\n      case \"sm\":\n        return \"3em\";\n      case \"md\":\n        return \"2em\";\n      case \"lg\":\n        return \"2em\";\n    }\n  }, [size]);\n  const content = useMemo(() => {\n    return (\n      <Flex\n        background={bgColor}\n        p=\"2\"\n        rounded=\"3xl\"\n        w=\"calc(120%)\"\n        shadow={size}\n        align=\"center\"\n        direction={size !== \"sm\" ? \"column\" : \"row\"}\n      >\n        <Image src={resource.icon} background=\"black\" maxW={iconSize} maxH={iconSize} p={2} rounded=\"full\" />\n        <Box ml=\"1\" minW={width} justifyContent={size !== \"sm\" ? \"center\" : \"start\"}>\n          <Text fontWeight=\"bold\" fontSize={size} width=\"fit-content\">\n            {amount ? numeral(ethers.utils.formatEther(amount)).format(\"0.0a\") : \"???\"}\n          </Text>\n          {size !== \"sm\" && (\n            <Text fontSize={size} width=\"fit-content\">\n              {resource.name}\n            </Text>\n          )}\n        </Box>\n      </Flex>\n    );\n  }, [amount, iconSize, resource, bgColor, size, width]);\n\n  return size !== \"sm\" ? content : <Tooltip label={resource.name}>{content}</Tooltip>;\n};\n\nexport default ResourceBadge;\n","import { IconButton, Link } from \"@chakra-ui/react\";\r\nimport { BiHelpCircle } from \"react-icons/bi\";\r\n\r\nconst DocumentationButton: React.FC<{ href: string }> = ({ href }) => {\r\n  return (\r\n    <IconButton\r\n      as={Link}\r\n      href={href}\r\n      target=\"_blank\"\r\n      icon={<BiHelpCircle />}\r\n      aria-label=\"See the docs\"\r\n      w=\"48px\"\r\n      m=\"1\"\r\n      rounded=\"full\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default DocumentationButton;\r\n","import {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Flex,\r\n  Text,\r\n  useColorModeValue,\r\n  Wrap,\r\n  WrapItem,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\n\r\nimport ResourceBadge from \"../../components/ResourceBadge\";\r\nimport DocumentationButton from \"../../contexts/DocumentationButton\";\r\nimport { Planet } from \"../../contexts/Sanctis/types\";\r\n\r\nconst ReservesSection: React.FC<{ planet: Planet }> = ({ planet }) => {\r\n  return (\r\n    <AccordionItem>\r\n      <Flex\r\n        direction=\"column\"\r\n        align={\"center\"}\r\n        m={2}\r\n        p={3}\r\n        background={useColorModeValue(\"gray.300\", \"gray.700\")}\r\n        rounded=\"lg\"\r\n      >\r\n        <AccordionButton justifyContent=\"center\">\r\n          <DocumentationButton href=\"https://docs.sanctis.xyz/sections/game/resources\" />\r\n          <Text margin=\"auto\" mb=\"3\" fontSize=\"xl\" fontWeight=\"bold\">\r\n            Planet's reserves\r\n          </Text>\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n        <AccordionPanel>\r\n          <Wrap>\r\n            {planet.reserves.map((e) => (\r\n              <WrapItem key={e.resource.name + e.amount.toString()}>\r\n                <ResourceBadge resource={e.resource} amount={e.amount} size=\"lg\" />\r\n              </WrapItem>\r\n            ))}\r\n          </Wrap>\r\n        </AccordionPanel>\r\n      </Flex>\r\n    </AccordionItem>\r\n  );\r\n};\r\n\r\nexport default ReservesSection;\r\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { ExternalProvider } from \"@ethersproject/providers\";\nimport { Contract, ethers, providers, utils } from \"ethers\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport ResourceProducerABI from \"../constants/contracts/IResourceProducer.sol/IResourceProducer.json\";\nimport { Infrastructure } from \"../contexts/Sanctis/types\";\nimport useApprovedObjects from \"./useApprovedObjects\";\nimport useConfirmationModal from \"./useConfirmationModal\";\nimport useSanctis from \"./useSanctis\";\n\nconst useInfrastructure = (infrastructure: Infrastructure, planetId: string) => {\n  const toast = useToast();\n  const { open } = useConfirmationModal();\n  const { resources } = useApprovedObjects();\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { fetchPlanet } = useSanctis();\n  const [loadedInfrastructure, setLoadedInfrastructure] = useState<Infrastructure>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const ResourceProducerInterface = new utils.Interface(ResourceProducerABI.abi);\n    return new Contract(\n      infrastructure.address,\n      ResourceProducerInterface,\n      new providers.Web3Provider(ethereum).getSigner()\n    );\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n\n    const level = await contract.level(planetId);\n    const [costsResources, nextCosts] = await contract.costs(planetId);\n    const nextUpgrade = await contract.nextUpgrade(planetId);\n    setLoadedInfrastructure({\n      ...infrastructure,\n      level: level.toNumber(),\n      nextUpgrade: nextUpgrade.toNumber(),\n      costsResources: costsResources.map((e: string) =>\n        resources.find((a) => ethers.utils.getAddress(e) === ethers.utils.getAddress(a.address))\n      ),\n      nextCosts,\n    });\n\n    setIsFetching(false);\n  }, [isFetching, infrastructure, planetId, resources, contract, setLoadedInfrastructure]);\n\n  useEffect(() => {\n    if (!loadedInfrastructure.nextCosts || loadedInfrastructure.address !== infrastructure.address) fetch();\n  }, [loadedInfrastructure, infrastructure, fetch]);\n\n  const create = useCallback(\n    async (planetId: string) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.create(planetId);\n          await result.wait();\n          await fetch();\n          await fetchPlanet(planetId);\n          toast({\n            status: \"success\",\n            title: \"Created\",\n            description: `${infrastructure.name} has been built on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({ status: \"error\", title: \"Error\", description: `Failed creation: ${err.message}` });\n        }\n      });\n    },\n    [contract, infrastructure, fetch, fetchPlanet, open, toast]\n  );\n\n  const upgrade = useCallback(\n    async (planetId: string) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.upgrade(planetId);\n          await result.wait();\n          setTimeout(() => {\n            fetch();\n            fetchPlanet(planetId);\n          }, 3000);\n          toast({\n            status: \"success\",\n            title: \"Upgraded\",\n            description: `${infrastructure.name} has been upgraded on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({ status: \"error\", title: \"Error\", description: `Failed upgrade: ${err.message}` });\n        }\n      });\n    },\n    [contract, infrastructure, fetch, fetchPlanet, open, toast]\n  );\n\n  return {\n    infrastructure: loadedInfrastructure,\n    create,\n    upgrade,\n  };\n};\n\nexport default useInfrastructure;\n","import { Button, Select, Stack, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport ResourceBadge from \"components/ResourceBadge\";\nimport React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\n\nimport { Infrastructure, Planet, Resource } from \"../../../contexts/Sanctis/types\";\nimport useApprovedObjects from \"../../../hooks/useApprovedObjects\";\nimport useInfrastructure from \"../../../hooks/useInfrastructure\";\n\nconst CreateInfrastuctureCard: React.FC<{ planet: Planet }> = ({ planet }) => {\n  const { infrastructures } = useApprovedObjects();\n  const choices = useMemo(() => {\n    return planet.infrastructures.filter((e) => !e.level);\n  }, [planet.infrastructures]);\n  const [choice, setChoice] = useState<Infrastructure | undefined>(choices[0]);\n  const { infrastructure, create } = useInfrastructure(choice || infrastructures[0], planet.id);\n\n  const handleSelect = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      setChoice(JSON.parse(e.target.value));\n    },\n    [setChoice]\n  );\n\n  const handleCreate = useCallback(async () => {\n    create(planet.id);\n  }, [planet, create]);\n\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\n      <Text fontSize=\"xl\" fontWeight=\"bold\">\n        Choose an infrastructure to build\n      </Text>\n      <Select onChange={handleSelect}>\n        {choices.map((e) => (\n          <option key={e.name} value={JSON.stringify(e)}>\n            {e.name}\n          </option>\n        ))}\n      </Select>\n      {choice && infrastructure && (\n        <>\n          <Text fontSize=\"lg\">{infrastructure.description}</Text>\n          {infrastructure.nextCosts && infrastructure.costsResources ? (\n            <Stack spacing={0}>\n              <Text>Costs:</Text>\n              <Wrap mt={0}>\n                {infrastructure.costsResources.map((e: Resource, i) => (\n                  <WrapItem key={e.name} mt={0}>\n                    <ResourceBadge resource={e} amount={infrastructure.nextCosts![i]} size=\"sm\" />\n                  </WrapItem>\n                ))}\n              </Wrap>\n            </Stack>\n          ) : (\n            <Text>This infrastructure is free to build</Text>\n          )}\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            onClick={handleCreate}\n          >\n            Create\n          </Button>\n        </>\n      )}\n    </Stack>\n  );\n};\n\nexport default CreateInfrastuctureCard;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { BigNumber, Contract, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport PowerPlantABI from '../constants/contracts/IPowerPlants.sol/IPowerPlants.json'\nimport { Infrastructure, Resource } from '../contexts/Sanctis/types'\nimport useApprovedObjects from './useApprovedObjects'\nimport useInfrastructure from './useInfrastructure'\n\nexport interface PowerPlantCharacteristics extends Infrastructure {\n  energy?: Resource;\n  currentProduction?: BigNumber;\n  nextProduction?: BigNumber;\n}\n\nconst usePowerPlant = (infrastructure: Infrastructure, planetId: string) => {\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { resources } = useApprovedObjects();\n  const { infrastructure: baseInfra, create, upgrade } = useInfrastructure(infrastructure, planetId);\n  const [loadedPlant, setLoadedPlant] = useState<PowerPlantCharacteristics>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n\n    const PowerPlantInterface = new utils.Interface(PowerPlantABI.abi);\n    return new Contract(infrastructure.address, PowerPlantInterface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n    try {\n      const currentProduction = await contract.currentProduction(planetId);\n      const nextProduction = await contract.nextProduction(planetId);\n      setLoadedPlant({\n        ...baseInfra,\n        energy: resources.find((e) => e.name === \"Energy\")!,\n        currentProduction: currentProduction,\n        nextProduction: nextProduction,\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching resource producer\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, baseInfra, planetId, resources, setLoadedPlant]);\n\n  useEffect(() => {\n    if (!loadedPlant.costsResources || !loadedPlant.nextCosts) fetch();\n  }, [loadedPlant, fetch]);\n\n  return {\n    powerPlant: loadedPlant,\n    fetch,\n    create,\n    upgrade,\n  };\n};\n\nexport default usePowerPlant;\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { Button, Divider, Flex, Stack, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport ResourceBadge from \"components/ResourceBadge\";\nimport { BigNumber } from \"ethers\";\nimport usePowerPlant from \"hooks/usePowerPlant\";\nimport React from \"react\";\n\nimport { Infrastructure, Planet } from \"../../../contexts/Sanctis/types\";\n\nconst PowerPlantCard: React.FC<{ infrastructure: Infrastructure; planet: Planet }> = ({ infrastructure, planet }) => {\n  const { getBlockNumber } = useWallet();\n  const { powerPlant, upgrade } = usePowerPlant(infrastructure, planet.id);\n\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\" shadow={\"xl\"}>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {powerPlant.name}\n      </Text>\n      <Text fontSize=\"md\">{powerPlant.description}</Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Level: {powerPlant.level}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Pending:\n      </Text>\n      {powerPlant.energy && powerPlant.currentProduction && (\n        <Flex direction={\"row\"}>\n          <ResourceBadge resource={powerPlant.energy} amount={BigNumber.from(powerPlant.currentProduction)} size=\"sm\" />\n        </Flex>\n      )}\n      <Divider />\n      <Stack spacing={2} justify={\"center\"}>\n        <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n          Upgrade costs:\n        </Text>\n        <Wrap>\n          {(powerPlant.nextCosts || []).map((cost, i) => (\n            <WrapItem key={powerPlant.costsResources![i].name}>\n              <ResourceBadge resource={powerPlant.costsResources![i]} amount={BigNumber.from(cost)} size=\"sm\" />\n            </WrapItem>\n          ))}\n        </Wrap>\n        <Button\n          rounded={\"full\"}\n          px={6}\n          colorScheme={\"blue\"}\n          onClick={() => upgrade(planet.id)}\n          disabled={getBlockNumber() < powerPlant.nextUpgrade!}\n        >\n          {getBlockNumber() < powerPlant.nextUpgrade!\n            ? `Upgradable in ${powerPlant.nextUpgrade! - getBlockNumber()} blocks`\n            : \"Upgrade\"}\n        </Button>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default PowerPlantCard;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useToast } from '@chakra-ui/react'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { BigNumber, Contract, ethers, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport ResourceProducerABI from '../constants/contracts/IResourceProducer.sol/IResourceProducer.json'\nimport { Infrastructure, Resource } from '../contexts/Sanctis/types'\nimport useApprovedObjects from './useApprovedObjects'\nimport useConfirmationModal from './useConfirmationModal'\nimport useInfrastructure from './useInfrastructure'\nimport useSanctis from './useSanctis'\n\nexport interface ResourceProducerCharacteristics extends Infrastructure {\n  lastHarvest?: number;\n  producedResources?: Resource[];\n  productionPerBlock?: BigNumber[];\n  nextProduction?: BigNumber[];\n}\n\nconst useResourceProducer = (infrastructure: Infrastructure, planetId: string) => {\n  const toast = useToast();\n  const { open } = useConfirmationModal();\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { resources } = useApprovedObjects();\n  const { fetchPlanet } = useSanctis();\n  const { infrastructure: baseInfra, create, upgrade } = useInfrastructure(infrastructure, planetId);\n  const [loadedProducer, setLoadedProducer] = useState<ResourceProducerCharacteristics>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const ResourceProducerInterface = new utils.Interface(ResourceProducerABI.abi);\n    return new Contract(\n      infrastructure.address,\n      ResourceProducerInterface,\n      new providers.Web3Provider(ethereum).getSigner()\n    );\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n\n    try {\n      const lastHarvest = await contract.lastHarvest(planetId);\n      const [producedResources, currentProduction] = await contract.currentProduction(planetId);\n      const [, nextProduction] = await contract.nextProduction(planetId);\n      setLoadedProducer({\n        ...baseInfra,\n        lastHarvest: lastHarvest.toNumber(),\n        producedResources: producedResources.map((e: string) =>\n          resources.find((a) => ethers.utils.getAddress(e) === ethers.utils.getAddress(a.address))\n        ),\n        productionPerBlock: currentProduction.map((e: any) => BigNumber.from(e)),\n        nextProduction: nextProduction,\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching resource producer\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, baseInfra, planetId, resources, setLoadedProducer]);\n\n  useEffect(() => {\n    if (!loadedProducer.costsResources || !loadedProducer.nextCosts) fetch();\n  }, [loadedProducer, fetch]);\n\n  const harvest = useCallback(\n    async (planetId: string) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.harvest(planetId);\n          await result.wait();\n          await fetch();\n          await fetchPlanet(planetId);\n          toast({\n            status: \"success\",\n            title: \"Harvest\",\n            description: `An ${infrastructure.name} has been harvested on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({\n            status: \"error\",\n            title: \"Error\",\n            description: `Failed harvest: ${err.data?.message || err.message}`,\n          });\n        }\n      });\n    },\n    [contract, infrastructure, fetch, fetchPlanet, open, toast]\n  );\n\n  return {\n    producer: loadedProducer,\n    fetch,\n    create,\n    upgrade,\n    harvest,\n  };\n};\n\nexport default useResourceProducer;\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { Button, Divider, Stack, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport ResourceBadge from \"components/ResourceBadge\";\nimport { BigNumber } from \"ethers\";\nimport useResourceProducer from \"hooks/useResourceProducer\";\nimport React from \"react\";\n\nimport { Infrastructure, Planet } from \"../../../contexts/Sanctis/types\";\n\nconst ResourceProducerCard: React.FC<{ infrastructure: Infrastructure; planet: Planet }> = ({\n  infrastructure,\n  planet,\n}) => {\n  const { getBlockNumber } = useWallet();\n  const { producer, upgrade, harvest } = useResourceProducer(infrastructure, planet.id);\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\" shadow={\"xl\"}>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {producer.name}\n      </Text>\n      <Text fontSize=\"md\">{producer.description}</Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Level: {producer.level}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\">\n        Pending:\n      </Text>\n      <Wrap>\n        {(producer.productionPerBlock || []).map((prod, i) => (\n          <WrapItem key={producer.producedResources![i].name}>\n            <ResourceBadge\n              resource={producer.producedResources![i]}\n              amount={BigNumber.from(prod).mul(Math.max(0, getBlockNumber() - producer.lastHarvest!))}\n              size=\"sm\"\n            />\n          </WrapItem>\n        ))}\n      </Wrap>\n      <Button\n        rounded={\"full\"}\n        px={6}\n        bg={\"blue.400\"}\n        _hover={{ bg: \"blue.500\" }}\n        colorScheme={\"blue\"}\n        onClick={() => harvest(planet.id)}\n        disabled={getBlockNumber() < producer.lastHarvest!}\n      >\n        {getBlockNumber() < producer.lastHarvest!\n          ? `Harvestable in ${producer.lastHarvest! - getBlockNumber()} blocks`\n          : \"Harvest\"}\n      </Button>\n      <Divider />\n      <Stack spacing={2} justify={\"center\"}>\n        <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n          Upgrade costs:\n        </Text>\n        <Wrap>\n          {(producer.nextCosts || []).map((cost, i) => (\n            <WrapItem key={producer.costsResources![i].name}>\n              <ResourceBadge resource={producer.costsResources![i]} amount={BigNumber.from(cost)} size=\"sm\" />\n            </WrapItem>\n          ))}\n        </Wrap>\n        <Button\n          rounded={\"full\"}\n          px={6}\n          colorScheme={\"blue\"}\n          onClick={() => upgrade(planet.id)}\n          disabled={getBlockNumber() < producer.nextUpgrade!}\n        >\n          {getBlockNumber() < producer.nextUpgrade!\n            ? `Upgradable in ${producer.nextUpgrade! - getBlockNumber()} blocks`\n            : \"Upgrade\"}\n        </Button>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default ResourceProducerCard;\n","export default __webpack_public_path__ + \"static/media/chest.c488cb7e.svg\";","export default __webpack_public_path__ + \"static/media/gladius.48d1672b.svg\";","export default __webpack_public_path__ + \"static/media/shield.5ea7eb49.svg\";","export default __webpack_public_path__ + \"static/media/speedometer.a047b5a0.svg\";","import { Flex, Image, Text, Tooltip, useColorModeValue } from '@chakra-ui/react'\nimport React, { useMemo } from 'react'\n\nimport capacity from '../assets/chest.svg'\nimport offense from '../assets/gladius.svg'\nimport defense from '../assets/shield.svg'\nimport speed from '../assets/speedometer.svg'\n\nconst ShipStatBadge: React.FC<{\n  type: \"offense\" | \"defense\" | \"capacity\" | \"speed\";\n  amount?: number;\n}> = ({ type, amount }) => {\n  const name = useMemo(() => {\n    switch (type) {\n      case \"speed\":\n        return \"Speed\";\n      case \"offense\":\n        return \"Attack\";\n      case \"defense\":\n        return \"Defense\";\n      case \"capacity\":\n        return \"Capacity\";\n    }\n  }, [type]);\n\n  const icon = useMemo(() => {\n    switch (type) {\n      case \"speed\":\n        return speed;\n      case \"offense\":\n        return offense;\n      case \"defense\":\n        return defense;\n      case \"capacity\":\n        return capacity;\n      default:\n        return defense;\n    }\n  }, [type]);\n\n  return (\n    <Tooltip label={name}>\n      <Flex\n        w=\"100%\"\n        background={useColorModeValue(\"gray.400\", \"gray.600\")}\n        p=\"1.5\"\n        rounded=\"3xl\"\n        shadow={\"sm\"}\n        align=\"center\"\n      >\n        <Image\n          src={icon}\n          stroke={useColorModeValue(\"black\", \"white\")}\n          background=\"black\"\n          maxW={\"30px\"}\n          maxH={\"30px\"}\n          p={2}\n          rounded=\"full\"\n        />\n        <Flex ml=\"1\">\n          <Text fontWeight=\"bold\" fontSize={\"sm\"} mr={2} textAlign=\"center\" width={\"fit-content\"}>\n            {amount ? amount : \"0\"}\n          </Text>\n        </Flex>\n      </Flex>\n    </Tooltip>\n  );\n};\n\nexport default ShipStatBadge;\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { ExternalProvider } from \"@ethersproject/providers\";\nimport { BigNumber, Contract, ethers, providers, utils } from \"ethers\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport ShipABI from \"../constants/contracts/IShip.sol/IShip.json\";\nimport { Infrastructure, Planet, Resource, Ship } from \"../contexts/Sanctis/types\";\nimport useApprovedObjects from \"./useApprovedObjects\";\n\nexport interface PowerPlantCharacteristics extends Infrastructure {\n  energy?: Resource;\n  currentProduction?: BigNumber;\n  nextProduction?: BigNumber;\n}\n\nconst useShip = (ship: Ship, planet?: Planet) => {\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { resources } = useApprovedObjects();\n  const [loadedShip, setLoadedShip] = useState<Ship>(ship);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n\n    const ShipInterface = new utils.Interface(ShipABI.abi);\n    return new Contract(ship.address, ShipInterface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, ship]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n    try {\n      const [costsResources, costs] = await contract.unitCosts();\n      const speed = await contract.speed();\n      const offensivePower = await contract.offensivePower();\n      const defensivePower = await contract.defensivePower();\n      const capacity = await contract.capacity();\n      const reserve = planet ? (await contract.reserve(planet.id)).toNumber() : 0;\n      setLoadedShip({\n        ...ship,\n        costsResources: costsResources.map((e: string) =>\n          resources.find((a) => ethers.utils.getAddress(e) === ethers.utils.getAddress(a.address))\n        ),\n        costs,\n        speed: speed.toNumber(),\n        offensivePower: offensivePower.toNumber(),\n        defensivePower: defensivePower.toNumber(),\n        capacity: capacity,\n        reserve,\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching ship\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, ship, planet, resources, setLoadedShip]);\n\n  useEffect(() => {\n    if (!loadedShip.costsResources || loadedShip.address !== ship.address) fetch();\n  }, [loadedShip, ship, fetch]);\n\n  return {\n    ship: loadedShip,\n    fetch,\n  };\n};\n\nexport default useShip;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useToast } from '@chakra-ui/react'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { Contract, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport SpatioportABI from '../constants/contracts/ISpatioports.sol/ISpatioports.json'\nimport { Infrastructure, Ship } from '../contexts/Sanctis/types'\nimport useConfirmationModal from './useConfirmationModal'\nimport useInfrastructure from './useInfrastructure'\n\nexport interface SpatioportCharacteristics extends Infrastructure {\n  currentDiscount?: number;\n  nextDiscount?: number;\n  discountFactor?: number;\n}\n\nconst useSpatioport = (infrastructure: Infrastructure, planetId: string) => {\n  const toast = useToast();\n  const { open } = useConfirmationModal();\n  const { ethereum } = useWallet<ExternalProvider>();\n  const { infrastructure: loadedInfrastructure, create, upgrade } = useInfrastructure(infrastructure, planetId);\n  const [spatioport, setSpatioport] = useState<SpatioportCharacteristics>(infrastructure);\n  const [isFetching, setIsFetching] = useState<boolean>(false);\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const SpatioportInterface = new utils.Interface(SpatioportABI.abi);\n    return new Contract(infrastructure.address, SpatioportInterface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, infrastructure]);\n\n  const fetch = useCallback(async () => {\n    if (!contract || isFetching) return;\n    setIsFetching(true);\n\n    try {\n      const currentDiscount = await contract.currentDiscount(planetId);\n      const nextDiscount = await contract.nextDiscount(planetId);\n      const discountFactor = await contract.discountFactor();\n      setSpatioport({\n        ...loadedInfrastructure,\n        currentDiscount: currentDiscount.toNumber(),\n        nextDiscount: nextDiscount.toNumber(),\n        discountFactor: discountFactor.toNumber(),\n      });\n    } catch (err: any) {\n      console.log(\"Failed fetching resource producer\", err);\n    }\n    setIsFetching(false);\n  }, [contract, isFetching, loadedInfrastructure, planetId, setSpatioport]);\n\n  useEffect(() => {\n    if (!spatioport.costsResources) fetch();\n  }, [spatioport, fetch]);\n\n  const build: (planetId: string, ship: Ship, quantity: number) => Promise<void> = useCallback(\n    async (planetId, ship, quantity) => {\n      if (!contract) return;\n      open(async () => {\n        try {\n          const result = await contract.build(planetId, ship.address, quantity);\n          await result.wait();\n          toast({\n            status: \"success\",\n            title: \"Build\",\n            description: `${quantity} ${ship.name} have been built on Planet ${planetId}`,\n          });\n        } catch (err: any) {\n          toast({\n            status: \"error\",\n            title: \"Error\",\n            description: `Failed harvest: ${err.data?.message || err.message}`,\n          });\n        }\n      });\n    },\n    [contract, open, toast]\n  );\n\n  return {\n    spatioport,\n    fetch,\n    create,\n    upgrade,\n    build,\n  };\n};\n\nexport default useSpatioport;\n","import { useWallet } from \"@binance-chain/bsc-use-wallet\";\nimport { Button, Divider, Flex, Input, Select, Stack, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport ResourceBadge from \"components/ResourceBadge\";\nimport { BigNumber, ethers } from \"ethers\";\nimport React, { useState } from \"react\";\n\nimport ShipStatBadge from \"../../../components/ShipStatBadge\";\nimport { Infrastructure, Planet, Ship } from \"../../../contexts/Sanctis/types\";\nimport useApprovedObjects from \"../../../hooks/useApprovedObjects\";\nimport useShip from \"../../../hooks/useShip\";\nimport useSpatioport from \"../../../hooks/useSpatioport\";\n\nconst SpatioportCard: React.FC<{ infrastructure: Infrastructure; planet: Planet }> = ({ infrastructure, planet }) => {\n  const { ships } = useApprovedObjects();\n  const { getBlockNumber } = useWallet();\n  const { spatioport, upgrade, build } = useSpatioport(infrastructure, planet.id);\n  const [choice, setChoice] = useState<Ship>(ships[0]);\n  const { ship } = useShip(choice);\n  const [quantity, setQuantity] = useState<number>(0);\n\n  return (\n    <Stack spacing={3} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\" shadow={\"xl\"}>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {infrastructure.name}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"xl\">\n        {infrastructure.description}\n      </Text>\n      <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n        Level: {infrastructure.level}\n      </Text>\n      <Select onChange={(e) => setChoice(JSON.parse(e.target.value))}>\n        {ships.map((e) => (\n          <option key={e.address} value={JSON.stringify(e)}>\n            {e.name}\n          </option>\n        ))}\n      </Select>\n      <Input\n        type=\"number\"\n        placeholder=\"Number of ships to build...\"\n        onChange={(e) => setQuantity(Number(e.target.value))}\n      />\n      <Text fontSize=\"md\" textAlign=\"start\">\n        Ship statistics:\n      </Text>\n      <Flex>\n        <ShipStatBadge type=\"speed\" amount={ship.speed} />\n        <ShipStatBadge type=\"offense\" amount={ship.offensivePower} />\n        <ShipStatBadge type=\"defense\" amount={ship.defensivePower} />\n        <ShipStatBadge type=\"capacity\" amount={Number(ethers.utils.formatEther(ship.capacity || 0))} />\n      </Flex>\n      <Text fontSize=\"md\" textAlign=\"start\">\n        Costs per ship:\n      </Text>\n      <Wrap>\n        {ship.costsResources?.map((resource, i) => (\n          <WrapItem key={resource.name}>\n            <ResourceBadge resource={resource} amount={ship.costs![i]} size=\"sm\" />\n          </WrapItem>\n        ))}\n      </Wrap>\n      <Button\n        rounded={\"full\"}\n        px={6}\n        colorScheme={\"blue\"}\n        bg={useColorModeValue(\"gray.300\", \"gray.500\")}\n        _hover={{ bg: useColorModeValue(\"gray.400\", \"gray.400\") }}\n        onClick={() => build(planet.id, choice, quantity)}\n        disabled={!quantity}\n      >\n        Build\n      </Button>\n      <Divider />\n      <Stack spacing={2} justify={\"center\"}>\n        <Text fontWeight=\"bold\" fontSize=\"xl\" textAlign=\"start\">\n          Upgrade costs:\n        </Text>\n        <Wrap>\n          {(spatioport.nextCosts || []).map((cost, i) => (\n            <WrapItem key={spatioport.costsResources![i].name}>\n              <ResourceBadge resource={spatioport.costsResources![i]} amount={BigNumber.from(cost)} size=\"sm\" />\n            </WrapItem>\n          ))}\n        </Wrap>\n        <Button\n          rounded={\"full\"}\n          px={6}\n          colorScheme={\"blue\"}\n          onClick={() => upgrade(planet.id)}\n          disabled={getBlockNumber() < spatioport.nextUpgrade!}\n        >\n          {getBlockNumber() < spatioport.nextUpgrade!\n            ? `Upgradable in ${spatioport.nextUpgrade! - getBlockNumber()} blocks`\n            : \"Upgrade\"}\n        </Button>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default SpatioportCard;\n","import {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Divider,\r\n  Flex,\r\n  Text,\r\n  useColorModeValue,\r\n  Wrap,\r\n  WrapItem,\r\n} from \"@chakra-ui/react\";\r\nimport React, { ReactChild, useMemo } from \"react\";\r\n\r\nimport deployedAddresses from \"../../constants\";\r\nimport DocumentationButton from \"../../contexts/DocumentationButton\";\r\nimport { Planet } from \"../../contexts/Sanctis/types\";\r\nimport useChainPicker from \"../../hooks/useChainPicker\";\r\nimport CreateInfrastuctureCard from \"./infrastructures/CreateInfrastructureCard\";\r\nimport PowerPlantCard from \"./infrastructures/PowerPlantCard\";\r\nimport ResourceProducerCard from \"./infrastructures/ResourceProducerCard\";\r\nimport SpatioportCard from \"./infrastructures/SpatioportCard\";\r\n\r\nconst InfrastructuresSection: React.FC<{ planet: Planet }> = ({ planet }) => {\r\n  const { chainId } = useChainPicker();\r\n\r\n  const infrastructureCards = useMemo(() => {\r\n    return (\r\n      planet &&\r\n      planet.infrastructures &&\r\n      Object.values(planet.infrastructures)\r\n        .filter((e: any) => e.level !== 0)\r\n        .map((e) => {\r\n          let card: ReactChild;\r\n\r\n          const resourceProducers = [\r\n            deployedAddresses[chainId].ironMines,\r\n            deployedAddresses[chainId].siliconFurnaces,\r\n            deployedAddresses[chainId].heavyWaterPlants,\r\n          ];\r\n          const powerPlants = [deployedAddresses[chainId].solarPanels, deployedAddresses[chainId].fusionReactors];\r\n\r\n          if (resourceProducers.includes(e.address)) {\r\n            card = <ResourceProducerCard planet={planet} infrastructure={e} />;\r\n          } else if (powerPlants.includes(e.address)) {\r\n            card = <PowerPlantCard planet={planet} infrastructure={e} />;\r\n          } else if (e.address === deployedAddresses[chainId].spatioports) {\r\n            card = <SpatioportCard planet={planet} infrastructure={e} />;\r\n          } else {\r\n            card = <Text>Unknown infrastructure</Text>;\r\n          }\r\n          return <WrapItem key={e.name}>{card}</WrapItem>;\r\n        })\r\n    );\r\n  }, [chainId, planet]);\r\n\r\n  return (\r\n    <AccordionItem>\r\n      <Flex\r\n        direction={\"column\"}\r\n        textAlign={\"center\"}\r\n        align={\"center\"}\r\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\r\n        m={2}\r\n        p={3}\r\n        rounded=\"lg\"\r\n        shadow=\"2xl\"\r\n        boxShadow=\"inner\"\r\n      >\r\n        <AccordionButton justifyContent=\"center\">\r\n          <DocumentationButton href=\"https://docs.sanctis.xyz/sections/game/infrastructures\" />\r\n          <Text margin=\"auto\" fontSize=\"xl\" fontWeight=\"bold\" mb=\"3\">\r\n            Planet's infrastructures\r\n          </Text>\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n        <AccordionPanel>\r\n          <Wrap justify={\"center\"} m={2}>\r\n            {infrastructureCards}\r\n          </Wrap>\r\n          <Divider mt={7} />\r\n          <Flex justify={\"center\"} m={5}>\r\n            <CreateInfrastuctureCard planet={planet} />\r\n          </Flex>\r\n        </AccordionPanel>\r\n      </Flex>\r\n    </AccordionItem>\r\n  );\r\n};\r\n\r\nexport default InfrastructuresSection;\r\n","import { ApolloClient, gql, InMemoryCache } from \"@apollo/client\";\r\nimport { useWallet } from \"@binance-chain/bsc-use-wallet\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { ExternalProvider } from \"@ethersproject/providers\";\r\nimport { BigNumber, Contract, ethers, providers, utils } from \"ethers\";\r\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\r\nimport deployedAddresses from \"../constants\";\r\n\r\nimport FleetsABI from \"../constants/contracts/IFleets.sol/IFleets.json\";\r\nimport { Commander, Fleet, FleetStatus, Planet, Reserve, Resource, Ship } from \"../contexts/Sanctis/types\";\r\nimport useApprovedObjects from \"./useApprovedObjects\";\r\nimport useChainPicker from \"./useChainPicker\";\r\nimport useConfirmationModal from \"./useConfirmationModal\";\r\nimport useSanctis from \"./useSanctis\";\r\n\r\nconst APIURL = \"https://api.thegraph.com/subgraphs/name/sanctis-game/fleets\";\r\n\r\nconst tokensQuery = `\r\n  query {\r\n    fleets(first: 5) {\r\n      id\r\n      status\r\n      to\r\n      from\r\n    }\r\n  }\r\n`;\r\n\r\nconst useFleets = ({ planet }: { planet?: Planet } = {}) => {\r\n  const toast = useToast();\r\n  const { open } = useConfirmationModal();\r\n  const { chainId } = useChainPicker();\r\n  const { ethereum } = useWallet<ExternalProvider>();\r\n  const { fetchPlanet } = useSanctis();\r\n  const { ships: approvedShips, resources: approvedResources } = useApprovedObjects();\r\n  const [fleets, setFleets] = useState<Fleet[]>();\r\n  const [isFetching, setIsFetching] = useState<boolean>(false);\r\n\r\n  const contract = useMemo(() => {\r\n    if (!ethereum) return;\r\n    const FleetInterface = new utils.Interface(FleetsABI.abi);\r\n    return new Contract(\r\n      deployedAddresses[chainId].fleets,\r\n      FleetInterface,\r\n      new providers.Web3Provider(ethereum).getSigner()\r\n    );\r\n  }, [ethereum, chainId]);\r\n\r\n  const client = useMemo(\r\n    () =>\r\n      new ApolloClient({\r\n        uri: APIURL,\r\n        cache: new InMemoryCache(),\r\n      }),\r\n    []\r\n  );\r\n\r\n  const fetchFleets = useCallback(async () => {\r\n    const result = await client.query({\r\n      query: gql(tokensQuery),\r\n    });\r\n\r\n    console.log(\"Subgraph fleets: \", result);\r\n    setFleets(result.data.fleets.map((e: any) => ({ id: e.id, shipsInFleet: {}, resources: [] })));\r\n  }, [client]);\r\n\r\n  useEffect(() => {\r\n    fetchFleets();\r\n  }, [fetchFleets]);\r\n\r\n  const fetchFleet = useCallback(\r\n    async (fleetId: BigNumber) => {\r\n      if (!contract) return;\r\n\r\n      const {\r\n        commander,\r\n        fromPlanetId,\r\n        toPlanetId,\r\n        totalSpeed,\r\n        totalOffensivePower,\r\n        totalDefensivePower,\r\n        capacity,\r\n        ships,\r\n        arrivalBlock,\r\n        status,\r\n      } = await contract.fleet(fleetId);\r\n      const fromPlanet = await fetchPlanet(fromPlanetId);\r\n      const toPlanet = await fetchPlanet(toPlanetId);\r\n\r\n      const fleetStatus = (id: number) => {\r\n        switch (id) {\r\n          default:\r\n            return FleetStatus.Preparing;\r\n          case 0:\r\n            return FleetStatus.Preparing;\r\n          case 1:\r\n            return FleetStatus.Orbitting;\r\n          case 2:\r\n            return FleetStatus.Travelling;\r\n        }\r\n      };\r\n\r\n      const shipsInFleet: { [address: string]: number } = {};\r\n      await Promise.all(\r\n        approvedShips.map(async (ship) => {\r\n          shipsInFleet[ship.address] = (await contract.shipsInFleet(ship.address, fleetId)).toNumber();\r\n        })\r\n      );\r\n\r\n      const resourcesInFleet: Reserve[] = [];\r\n      await Promise.all(\r\n        approvedResources.map(async (resource) => {\r\n          resourcesInFleet.push({ resource: resource, amount: await contract.shipsInFleet(resource.address, fleetId) });\r\n        })\r\n      );\r\n\r\n      return {\r\n        id: fleetId.toString(),\r\n        commander,\r\n        fromPlanet: fromPlanet || undefined,\r\n        toPlanet: toPlanet || undefined,\r\n        totalSpeed,\r\n        totalOffensivePower,\r\n        totalDefensivePower,\r\n        capacity,\r\n        ships,\r\n        arrivalBlock: arrivalBlock.toNumber(),\r\n        status: fleetStatus(status.toNumber()),\r\n        shipsInFleet: shipsInFleet,\r\n        resources: resourcesInFleet,\r\n      };\r\n    },\r\n    [approvedResources, approvedShips, contract, fetchPlanet]\r\n  );\r\n\r\n  const fetchPlanetFleets = useCallback(\r\n    async (planetId?: string) => {\r\n      if (!contract || isFetching) return;\r\n      setIsFetching(true);\r\n\r\n      const fleetsOnPlanet = await contract.fleetsOnPlanet(planetId);\r\n\r\n      const fleets: Fleet[] = await Promise.all(\r\n        Array(fleetsOnPlanet.toNumber())\r\n          .fill(0)\r\n          .map(async (_, i) => (await fetchFleet(await contract.fleetOnPlanetByIndex(planetId, i)))!)\r\n      );\r\n\r\n      // Assign it to the planets fleets\r\n      setFleets(fleets.filter(Boolean));\r\n      setIsFetching(false);\r\n    },\r\n    [isFetching, contract, fetchFleet]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (!fleets && planet) fetchPlanetFleets(planet.id);\r\n  }, [fleets, planet, fetchPlanetFleets]);\r\n\r\n  const create = useCallback(\r\n    async (commander: Commander, planetId: string) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.createFleet(commander.id, planetId);\r\n          await result.wait();\r\n          await fetchPlanetFleets(planetId);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Creation\",\r\n            description: `A fleet has been created on Planet ${planetId}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed creation: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const move = useCallback(\r\n    async (fleet: Fleet, to: Planet) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.moveFleet(fleet.id, to.id);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Creation\",\r\n            description: `A fleet has been created on Planet ${fleet.fromPlanet?.id}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed creation: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const addToFleet = useCallback(\r\n    async (fleet: Fleet, ship: Ship, quantity: number) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.addToFleet(fleet.id, ship.address, quantity);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Add to fleet\",\r\n            description: `${quantity} ${ship.name} have been added to fleet ${fleet.id}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed adding: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const removeFromFleet = useCallback(\r\n    async (fleet: Fleet, ship: Ship, quantity: number) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.removeFromFleet(fleet.id, ship.address, quantity);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Remove from fleet\",\r\n            description: `${quantity} ${ship.name} have been removed from fleet ${fleet.id}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed removing: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const putInOrbit = useCallback(\r\n    async (fleet: Fleet) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.putInOrbit(fleet.id);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Put in orbit\",\r\n            description: `Fleet ${fleet.id} has been put in orbit`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed putting in orbit: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const land = useCallback(\r\n    async (fleet: Fleet) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.land(fleet.id);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Landing\",\r\n            description: `Fleet ${fleet.id} has landed`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed landing: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, open, toast]\r\n  );\r\n\r\n  const loadResource = useCallback(\r\n    async (fleet: Fleet, resource: Resource, quantity: BigNumber) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.load(fleet.id, resource.address, quantity);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          await fetchPlanet(fleet.fromPlanet!.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Loaded\",\r\n            description: `Fleet ${fleet.id} loaded ${ethers.utils.formatEther(quantity)} ${resource.name}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed loading: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, fetchPlanet, open, toast]\r\n  );\r\n\r\n  const unloadResource = useCallback(\r\n    async (fleet: Fleet, resource: Resource, quantity: BigNumber) => {\r\n      if (!contract) return;\r\n      open(async () => {\r\n        try {\r\n          const result = await contract.unload(fleet.id, resource.address, quantity);\r\n          await result.wait();\r\n          await fetchPlanetFleets(fleet.fromPlanet?.id);\r\n          await fetchPlanet(fleet.fromPlanet!.id);\r\n          toast({\r\n            status: \"success\",\r\n            title: \"Unloaded\",\r\n            description: `Fleet ${fleet.id} unloaded ${ethers.utils.formatEther(quantity)} ${resource.name}`,\r\n          });\r\n        } catch (err: any) {\r\n          toast({ status: \"error\", title: \"Error\", description: `Failed unloading: ${err.message}` });\r\n        }\r\n      });\r\n    },\r\n    [contract, fetchPlanetFleets, fetchPlanet, open, toast]\r\n  );\r\n\r\n  return {\r\n    fleets,\r\n    create,\r\n    move,\r\n    addToFleet,\r\n    removeFromFleet,\r\n    putInOrbit,\r\n    land,\r\n    loadResource,\r\n    unloadResource,\r\n  };\r\n};\r\n\r\nexport default useFleets;\r\n","import {\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Button,\n  Input,\n  Select,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nimport { Fleet, Ship } from \"../../contexts/Sanctis/types\";\nimport useApprovedObjects from \"../../hooks/useApprovedObjects\";\nimport useFleets from \"../../hooks/useFleets\";\nimport useShip from \"../../hooks/useShip\";\n\nconst AddToFleetItem: React.FC<{ fleet: Fleet }> = ({ fleet }) => {\n  const { ships } = useApprovedObjects();\n  const { addToFleet } = useFleets();\n  const [choice, setChoice] = useState<Ship>(ships[0]);\n  const [quantity, setQuantity] = useState<number>();\n  const { ship } = useShip(choice, fleet.fromPlanet);\n\n  return (\n    <AccordionItem>\n      <AccordionButton justifyContent=\"center\">\n        <Text margin=\"auto\" fontSize=\"lg\">\n          Add ships to the fleet\n        </Text>\n        <AccordionIcon />\n      </AccordionButton>\n      <AccordionPanel>\n        <Stack spacing={1}>\n          <Select onChange={(e) => setChoice(JSON.parse(e.target.value))}>\n            {ships\n              .filter((e) => (e.reserve || 0) > 0)\n              .map((ship) => (\n                <option key={ship.name} value={JSON.stringify(ship)}>\n                  {ship.name}\n                </option>\n              ))}\n          </Select>\n          <Input\n            type=\"number\"\n            max={ship.reserve}\n            value={quantity || 0}\n            onChange={(e) => setQuantity(Math.min(Number(e.target.value), ship.reserve || 0))}\n          />\n          <Button disabled={!quantity} onClick={() => addToFleet(fleet, choice, quantity!)}>\n            Add to fleet\n          </Button>\n        </Stack>\n      </AccordionPanel>\n    </AccordionItem>\n  );\n};\n\nexport default AddToFleetItem;\n","import {\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Button,\n  Input,\n  Select,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\nimport { BigNumber } from \"ethers\";\nimport React, { useMemo, useState } from \"react\";\nimport { BiArrowFromLeft, BiPlanet } from \"react-icons/bi\";\nimport { FaSpaceShuttle } from \"react-icons/fa\";\n\nimport { Fleet, Resource } from \"../../contexts/Sanctis/types\";\nimport useFleets from \"../../hooks/useFleets\";\n\nconst LoadResourceItem: React.FC<{ fleet: Fleet }> = ({ fleet }) => {\n  const { loadResource } = useFleets();\n  const choices = useMemo(() => {\n    return fleet.fromPlanet?.reserves.filter((e) => e.amount.gt(0) && e.resource.name !== \"Energy\") || [];\n  }, [fleet.fromPlanet]);\n  const [choice, setChoice] = useState<Resource | undefined>(choices.length > 0 ? choices[0].resource : undefined);\n  const [quantity, setQuantity] = useState<number>();\n\n  console.log(\n    fleet.fromPlanet?.reserves,\n    fleet.fromPlanet?.reserves.filter((e) => e.amount.gt(0) && e.resource.name !== \"Energy\")\n  );\n\n  return (\n    <AccordionItem>\n      <AccordionButton justifyContent=\"center\">\n        <Text margin=\"auto\" fontSize=\"lg\">\n          Load resources\n        </Text>\n        <BiPlanet /> <BiArrowFromLeft /> <FaSpaceShuttle />\n        <AccordionIcon />\n      </AccordionButton>\n      <AccordionPanel>\n        <Stack spacing={2}>\n          <Select onChange={(e) => setChoice(JSON.parse(e.target.value))}>\n            {choices.map((e) => (\n              <option key={e.resource.name} value={JSON.stringify(e)}>\n                {e.resource.name}\n              </option>\n            ))}\n          </Select>\n          <Input placeholder=\"Quantity\" type=\"number\" onChange={(e) => setQuantity(Number(e.target.value))} />\n          <Button\n            px={6}\n            disabled={!choice}\n            onClick={() => loadResource(fleet, choice!, BigNumber.from(quantity).mul(10 ** 18))}\n          >\n            Load\n          </Button>\n        </Stack>\n      </AccordionPanel>\n    </AccordionItem>\n  );\n};\n\nexport default LoadResourceItem;\n","import {\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Button,\n  Input,\n  Select,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\n\nimport { Fleet, Ship } from \"../../contexts/Sanctis/types\";\nimport useApprovedObjects from \"../../hooks/useApprovedObjects\";\nimport useFleets from \"../../hooks/useFleets\";\nimport useShip from \"../../hooks/useShip\";\n\nconst RemoveFromFleetItem: React.FC<{ fleet: Fleet }> = ({ fleet }) => {\n  const { ships } = useApprovedObjects();\n  const { ships: approvedShips } = useApprovedObjects();\n  const { removeFromFleet } = useFleets();\n  const [choice, setChoice] = useState<Ship>(ships[0]);\n  const [quantity, setQuantity] = useState<number>();\n  const { ship } = useShip(choice, fleet.fromPlanet);\n\n  return (\n    <AccordionItem>\n      <AccordionButton justifyContent=\"center\">\n        <Text margin=\"auto\" fontSize=\"lg\">\n          Remove ships from the fleet\n        </Text>\n        <AccordionIcon />\n      </AccordionButton>\n      <AccordionPanel>\n        <Stack spacing={1}>\n          <Select onChange={(e) => setChoice(JSON.parse(e.target.value))}>\n            {approvedShips\n              .filter((e) => fleet.shipsInFleet[e.address] > 0)\n              .map((ship) => (\n                <option key={ship.name} value={JSON.stringify(ship)}>\n                  {ship.name}\n                </option>\n              ))}\n          </Select>\n          <Input\n            type=\"number\"\n            max={ship.reserve}\n            value={quantity || 0}\n            onChange={(e) => setQuantity(Math.min(Number(e.target.value), fleet.shipsInFleet[choice.address] || 0))}\n          />\n          <Button disabled={!quantity} onClick={() => removeFromFleet(fleet, choice, quantity!)}>\n            Remove from fleet\n          </Button>\n        </Stack>\n      </AccordionPanel>\n    </AccordionItem>\n  );\n};\n\nexport default RemoveFromFleetItem;\n","import {\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Button,\n  Input,\n  Select,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\nimport { BigNumber } from \"ethers\";\nimport React, { useState } from \"react\";\nimport { BiArrowFromLeft, BiPlanet } from \"react-icons/bi\";\nimport { FaSpaceShuttle } from \"react-icons/fa\";\n\nimport { Fleet, Resource } from \"../../contexts/Sanctis/types\";\nimport useFleets from \"../../hooks/useFleets\";\n\nconst UnloadResourceItem: React.FC<{ fleet: Fleet }> = ({ fleet }) => {\n  const { unloadResource } = useFleets();\n  const [choice, setChoice] = useState<Resource>();\n  const [quantity, setQuantity] = useState<number>();\n\n  return (\n    <AccordionItem>\n      <AccordionButton justifyContent=\"center\">\n        <Text margin=\"auto\" fontSize=\"lg\">\n          Unload resources\n        </Text>\n        <FaSpaceShuttle /> <BiArrowFromLeft /> <BiPlanet />\n        <AccordionIcon />\n      </AccordionButton>\n      <AccordionPanel>\n        <Stack spacing={2}>\n          <Select onChange={(e) => setChoice(JSON.parse(e.target.value))}>\n            {fleet.resources\n              .filter((e) => e.amount.gt(0))\n              .map((e) => (\n                <option key={e.resource.name} value={JSON.stringify(e)}>\n                  {e.resource.name}\n                </option>\n              ))}\n          </Select>\n          <Input placeholder=\"Quantity\" type=\"number\" onChange={(e) => setQuantity(Number(e.target.value))} />\n          <Button\n            disabled={!choice}\n            onClick={() => unloadResource(fleet, choice!, BigNumber.from(quantity).mul(10 ** 18))}\n          >\n            Unload\n          </Button>\n        </Stack>\n      </AccordionPanel>\n    </AccordionItem>\n  );\n};\n\nexport default UnloadResourceItem;\n","import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Button,\n  Divider,\n  Flex,\n  HStack,\n  Input,\n  Link,\n  Stack,\n  Text,\n} from \"@chakra-ui/react\";\nimport { ethers } from \"ethers\";\nimport React from \"react\";\nimport ResourceBadge from \"../ResourceBadge\";\nimport ShipStatBadge from \"../ShipStatBadge\";\n\nimport { Fleet, FleetStatus } from \"../../contexts/Sanctis/types\";\nimport useFleets from \"../../hooks/useFleets\";\nimport useSanctis from \"../../hooks/useSanctis\";\nimport AddToFleetItem from \"./AddToFleetItem\";\nimport LoadResourceItem from \"./LoadResourceItem\";\nimport RemoveFromFleetItem from \"./RemoveFromFleetItem\";\nimport UnloadResourceItem from \"./UnloadResourceItem\";\n\nconst FleetCard: React.FC<{ fleet: Fleet }> = ({ fleet }) => {\n  const { currentCommander } = useSanctis();\n  const { move, putInOrbit, land } = useFleets();\n\n  return (\n    <AccordionItem w=\"100%\">\n      <AccordionButton>\n        <Flex justify=\"space-between\" w=\"100%\">\n          <Box minW=\"20\">\n            <Text fontWeight=\"bold\" fontSize=\"md\" textAlign=\"start\" px=\"1\">\n              ID: {fleet.id}\n            </Text>\n          </Box>\n          <Box minW=\"20\">\n            <Text fontWeight=\"bold\" textAlign=\"start\" px=\"1\">\n              {fleet.commander?.toString() === currentCommander?.id ? (\n                currentCommander?.name\n              ) : (\n                <Link href={`#/commander/${fleet.commander?.toString()}`}>{fleet.commander?.toString()}</Link>\n              )}\n            </Text>\n          </Box>\n          <Box minW=\"20\">\n            <Text fontWeight=\"bold\" textAlign=\"start\" px=\"1\">\n              {fleet.status}\n            </Text>\n          </Box>\n          <Flex minW=\"60\" px=\"1\">\n            <ShipStatBadge type=\"speed\" amount={fleet.totalSpeed?.toNumber()} />\n            <ShipStatBadge type=\"offense\" amount={fleet.totalOffensivePower?.toNumber()} />\n            <ShipStatBadge type=\"defense\" amount={fleet.totalDefensivePower?.toNumber()} />\n            <ShipStatBadge type=\"capacity\" amount={Number(ethers.utils.formatEther(fleet.capacity || 0))} />\n          </Flex>\n        </Flex>\n      </AccordionButton>\n      <AccordionPanel width=\"100%\">\n        {Object.values(fleet.resources).filter((e) => e.amount.gt(0)).length > 0 && (\n          <Stack>\n            <Text textAlign=\"start\">Fleet's resources:</Text>\n            <Flex w=\"100%\">\n              {fleet.resources\n                .filter((e) => e.amount.gt(0))\n                .map((e) => (\n                  <ResourceBadge resource={e.resource} amount={e.amount} />\n                ))}\n            </Flex>\n          </Stack>\n        )}\n        {fleet.commander?.toString() === currentCommander?.id && (\n          <>\n            <Divider />\n            <Text fontWeight=\"bold\" fontSize=\"xl\">\n              Actions\n            </Text>\n            <Accordion allowMultiple allowToggle>\n              {fleet.status === FleetStatus.Preparing && (\n                <>\n                  <AddToFleetItem fleet={fleet} />\n                  <RemoveFromFleetItem fleet={fleet} />\n                  <LoadResourceItem fleet={fleet} />\n                  <UnloadResourceItem fleet={fleet} />\n                  <AccordionItem>\n                    <AccordionButton justifyContent=\"center\">\n                      <Text margin=\"auto\" fontSize=\"lg\">\n                        Move\n                      </Text>\n                      <AccordionIcon />\n                    </AccordionButton>\n                    <AccordionPanel>\n                      <Button rounded={\"full\"} px={6} colorScheme={\"blue\"} onClick={() => putInOrbit(fleet)}>\n                        Put in orbit\n                      </Button>\n                    </AccordionPanel>\n                  </AccordionItem>\n                </>\n              )}\n              {fleet.status === FleetStatus.Orbitting && (\n                <>\n                  <LoadResourceItem fleet={fleet} />\n                  <UnloadResourceItem fleet={fleet} />\n                  <AccordionItem>\n                    <AccordionButton justifyContent=\"center\">\n                      <Text margin=\"auto\" fontSize=\"lg\">\n                        Move\n                      </Text>\n                      <AccordionIcon />\n                    </AccordionButton>\n                    <AccordionPanel>\n                      <Button rounded={\"full\"} px={6} colorScheme={\"blue\"} onClick={() => land(fleet)}>\n                        Land\n                      </Button>\n                      <Stack p={3} border=\"solid\" rounded=\"xl\">\n                        <Text>Send the fleet to another planet</Text>\n                        <HStack spacing={1} justify=\"center\">\n                          <Input placeholder=\"X...\" maxW={20} />\n                          <Input placeholder=\"Y...\" maxW={20} />\n                          <Input placeholder=\"Z...\" maxW={20} />\n                        </HStack>\n                        <Button\n                          rounded={\"full\"}\n                          px={6}\n                          colorScheme={\"blue\"}\n                          onClick={() => move(fleet, fleet.toPlanet!)}\n                        >\n                          Move\n                        </Button>\n                      </Stack>\n                    </AccordionPanel>\n                  </AccordionItem>\n                </>\n              )}\n            </Accordion>\n          </>\n        )}\n      </AccordionPanel>\n    </AccordionItem>\n  );\n};\n\nexport default FleetCard;\n","import FleetsList from \"./FleetsList\";\n\nexport default FleetsList ","import { Accordion, Box, Flex, Text, useColorModeValue } from \"@chakra-ui/react\";\nimport { Fleet } from \"../../contexts/Sanctis/types\";\nimport FleetCard from \"./FleetCard\";\n\nconst FleetsList: React.FC<{ fleets: Fleet[] }> = ({ fleets }) => {\n  return (\n    <Accordion\n      w=\"100%\"\n      background={useColorModeValue(\"white\", \"gray.800\")}\n      p=\"2\"\n      rounded=\"xl\"\n      shadow={\"xl\"}\n      allowMultiple\n      allowToggle\n    >\n      <Flex justify=\"space-between\" p=\"5\">\n        <Box fontWeight=\"bold\">ID</Box> <Box fontWeight=\"bold\">Commander</Box> <Box fontWeight=\"bold\">Status</Box>{\" \"}\n        <Box fontWeight=\"bold\">Chracteristics</Box>\n      </Flex>\n      {fleets && fleets.length > 0 ? (\n        fleets.map((fleet) => <FleetCard key={fleet.id} fleet={fleet} />)\n      ) : (\n        <Text>There are no fleets on this planet</Text>\n      )}\n    </Accordion>\n  );\n};\n\nexport default FleetsList;\n","import {\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionItem,\r\n  AccordionPanel,\r\n  Button,\r\n  Divider,\r\n  Flex,\r\n  Text,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport FleetsList from \"../../components/FleetsList\";\r\nimport DocumentationButton from \"../../contexts/DocumentationButton\";\r\nimport { Planet } from \"../../contexts/Sanctis/types\";\r\n\r\nimport useFleets from \"../../hooks/useFleets\";\r\nimport useSanctis from \"../../hooks/useSanctis\";\r\n\r\nconst FleetsSection: React.FC<{ planet: Planet }> = ({ planet }) => {\r\n  const { currentCommander } = useSanctis();\r\n  const { fleets, create } = useFleets({ planet });\r\n  console.log(planet, currentCommander, fleets);\r\n\r\n  return (\r\n    <AccordionItem w=\"100%\" bg={useColorModeValue(\"gray.300\", \"gray.700\")} rounded=\"lg\">\r\n      <Flex textAlign={\"center\"} align={\"center\"} rounded=\"lg\">\r\n        <DocumentationButton href=\"https://docs.sanctis.xyz/sections/game/fleets\" />\r\n        <AccordionButton justifyContent=\"center\" w=\"100%\">\r\n          <Text margin=\"auto\" fontSize=\"xl\" fontWeight=\"bold\" mb=\"3\">\r\n            Planet's fleets\r\n          </Text>\r\n          <AccordionIcon />\r\n        </AccordionButton>\r\n      </Flex>\r\n      <AccordionPanel w=\"100%\">\r\n        {fleets && <FleetsList fleets={fleets} />}\r\n\r\n        {currentCommander && currentCommander?.id === planet.ruler && (\r\n          <>\r\n            <Divider mt={7} w=\"100%\" />\r\n            <Flex justify={\"center\"} mt={5}>\r\n              <Button onClick={() => create(currentCommander, planet.id)}>Create a new fleet</Button>\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </AccordionPanel>\r\n    </AccordionItem>\r\n  );\r\n};\r\n\r\nexport default FleetsSection;\r\n","import { Accordion, Box, Button, Link, useColorModeValue } from \"@chakra-ui/react\";\r\nimport usePlanet from \"hooks/usePlanet\";\r\nimport React from \"react\";\r\nimport { BiArrowBack } from \"react-icons/bi\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport ReservesSection from \"./ReservesSection\";\r\nimport InfrastructuresSection from \"./InfrastructuresSection\";\r\nimport FleetsSection from \"./FleetsSection\";\r\n\r\nconst Planet: React.FC = () => {\r\n  const { id } = useParams();\r\n  const planet = usePlanet(id);\r\n\r\n  const sections = planet ? (\r\n    <>\r\n      <ReservesSection planet={planet} />\r\n      <InfrastructuresSection planet={planet} />\r\n      <FleetsSection planet={planet} />\r\n    </>\r\n  ) : null;\r\n\r\n  return (\r\n    <Box w=\"100%\">\r\n      <Button\r\n        rightIcon={<BiArrowBack />}\r\n        as={Link}\r\n        href={planet ? `#/commander/` + planet?.ruler : \"#/commanders\"}\r\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\r\n        mb={3}\r\n      >\r\n        Back\r\n      </Button>\r\n      <Accordion allowMultiple allowToggle>\r\n        {sections}\r\n      </Accordion>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Planet;\r\n","import React from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Container,\r\n  Link,\r\n  List,\r\n  ListIcon,\r\n  ListItem,\r\n  Spinner,\r\n  Stack,\r\n  Text,\r\n  useColorModeValue,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { planetIdToCoordinate } from \"utils\";\r\nimport useSanctis from \"../../hooks/useSanctis\";\r\nimport { Commander } from \"../../contexts/Sanctis/types\";\r\nimport { BiPlanet } from \"react-icons/bi\";\r\n\r\nconst CommanderCard: React.FC<{ commander: Commander }> = ({ commander }) => {\r\n  const { currentCommander, setCurrentCommander } = useSanctis();\r\n\r\n  return (\r\n    <Container maxW={\"5xl\"}>\r\n      <Stack spacing={6} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\r\n        {commander ? (\r\n          <Box alignContent={\"flex-start\"}>\r\n            <Text fontWeight=\"bold\" fontSize=\"2xl\">\r\n              {commander.name}\r\n            </Text>\r\n            <Text fontWeight=\"bold\" fontSize=\"lg\">\r\n              {commander.race?.name}\r\n            </Text>\r\n            <Box textAlign={\"start\"}>\r\n              {!commander.planets || commander.planets.length === 0 ? (\r\n                <Text my=\"3\">This commander has no planet</Text>\r\n              ) : (\r\n                <>\r\n                  <Text fontSize=\"xl\">Planets:</Text>\r\n                  <List>\r\n                    {commander.planets.map((planet, i) => (\r\n                      <ListItem key={planet + i}>\r\n                        <ListIcon as={BiPlanet} fontSize=\"2xl\" />\r\n                        <Link href={`/planet/${planet}`}>{planetIdToCoordinate(planet)}</Link>\r\n                      </ListItem>\r\n                    ))}\r\n                  </List>\r\n                </>\r\n              )}\r\n            </Box>\r\n            <Button\r\n              rounded={\"full\"}\r\n              m={4}\r\n              px={6}\r\n              colorScheme={\"blue\"}\r\n              bg={\"blue.400\"}\r\n              _hover={{ bg: \"blue.500\" }}\r\n              as={Link}\r\n              href={`#/commander/${commander.id}`}\r\n              onClick={() => setCurrentCommander(commander)}\r\n            >\r\n              {currentCommander?.name !== commander.name\r\n                ? `Play as ${commander.name}`\r\n                : `Already playing ${commander.name}`}\r\n            </Button>\r\n          </Box>\r\n        ) : (\r\n          <Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"xl\" />\r\n        )}\r\n      </Stack>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default CommanderCard;\r\n","import React, { ChangeEvent, useCallback, useState } from \"react\";\nimport { Button, Input, Select, Stack, Text, useColorModeValue } from \"@chakra-ui/react\";\n\nimport { Race } from \"../../contexts/Sanctis/types\";\nimport useCommanders from \"../../hooks/useSanctis\";\nimport useApprovedObjects from \"hooks/useApprovedObjects\";\n\nconst CreateCommanderCard: React.FC = () => {\n  const { races } = useApprovedObjects()\n  const { createCommander } = useCommanders()\n  const [name, setName] = useState<string>()\n  const [race, setRace] = useState<Race>(races[0])\n\n  const handleSelect = useCallback((e: ChangeEvent<HTMLSelectElement>) => {\n    setRace(JSON.parse(e.target.value))\n  }, [setRace])\n\n  const handleName = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  }, [setName])\n\n  const handleCreate = useCallback(async () => {\n    if (!race || !name) return\n\n    await createCommander(name, race)\n  }, [race, name, createCommander])\n\n  return (\n    <Stack spacing={6} background={useColorModeValue('white', 'gray.800')} p=\"5\" rounded=\"xl\">\n      <Text fontWeight=\"bold\" fontSize=\"xl\">Create a Commander</Text>\n      <Input placeholder=\"Commander's name\" onChange={handleName} />\n      <Select onChange={handleSelect}>\n        {races.map((race) => <option key={race.name} value={JSON.stringify(race)}>{race.name}</option>)}\n      </Select>\n      <Button\n        rounded={\"full\"}\n        px={6}\n        colorScheme={\"blue\"}\n        bg={\"blue.400\"}\n        _hover={{ bg: \"blue.500\" }}\n        disabled={!name || !!name.match(/[^A-Za-z0-9 ]/) }\n        onClick={handleCreate}\n      >\n        Create commander\n      </Button>\n    </Stack>\n  );\n};\n\nexport default CreateCommanderCard;\n","import { Box, Container, Stack, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport useCommanders from \"../../hooks/useSanctis\";\nimport CommanderCard from \"./CommanderCard\";\nimport CreateCommanderCard from \"./CreateCommanderCard\";\n\nconst Commanders: React.FC = () => {\n  const { ownedCommanders } = useCommanders();\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Stack textAlign={\"center\"} align={\"center\"} spacing={{ base: 8, md: 10 }}>\n        {ownedCommanders && ownedCommanders.length > 0 && (\n          <Wrap>\n            {ownedCommanders.map((commander, i) => (\n              <WrapItem key={`${commander.id}-${i}`}>\n                <CommanderCard commander={commander} />\n              </WrapItem>\n            ))}\n          </Wrap>\n        )}\n        <Box background={useColorModeValue(\"white\", \"gray.800\")} p=\"3\" rounded=\"xl\">\n          A commander is free to create and you can have as many as you want. However, the game is designed to encourage\n          players to have few commanders with a big empire rather than many commanders with smaller empires.\n        </Box>\n        <CreateCommanderCard />\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Commanders;\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { ApolloClient, InMemoryCache, gql } from \"@apollo/client\";\nimport { Planet } from \"../contexts/Sanctis/types\";\nimport { BigNumber } from \"ethers\";\n\nconst APIURL = \"https://api.thegraph.com/subgraphs/name/sanctis-game/planets\";\n\nconst usePlanets = ({ center, radius, ruler }: { center?: Planet, radius?: BigNumber, ruler?: string } = {}) => {\n  const [planets, setPlanets] = useState<Planet[]>();\n  const client = useMemo(\n    () =>\n      new ApolloClient({\n        uri: APIURL,\n        cache: new InMemoryCache(),\n      }),\n    []\n  );\n  const tokensQuery = useMemo(() => {\n    const lowerX = (center?.x || BigNumber.from(0)).sub(radius || BigNumber.from(2).pow(79))\n    const upperX = (center?.x || BigNumber.from(0)).add(radius || BigNumber.from(2).pow(79))\n    const lowerY = (center?.y || BigNumber.from(0)).sub(radius || BigNumber.from(2).pow(79))\n    const upperY = (center?.y || BigNumber.from(0)).add(radius || BigNumber.from(2).pow(79))\n    const lowerZ = (center?.z || BigNumber.from(0)).sub(radius || BigNumber.from(2).pow(79))\n    const upperZ = (center?.z || BigNumber.from(0)).add(radius || BigNumber.from(2).pow(79))\n\n    return `\n    query {\n      planets(where: {\n          ${ruler ? ` ruler: \"${ruler}\",` : \"\"}\n          x_lte: \"${upperX.toString()}\",\n          x_gte: \"${lowerX.toString()}\",\n          y_lte: \"${upperY.toString()}\",\n          y_gte: \"${lowerY.toString()}\",\n          z_lte: \"${upperZ.toString()}\",\n          z_gte: \"${lowerZ.toString()}\"\n      }) {\n        id\n        ruler\n        x\n        y\n        z\n        status\n      }\n    }`\n  }, [center, radius, ruler]);\n\n  const fetch = useCallback(async () => {\n    const result = await client.query({\n      query: gql(tokensQuery),\n    });\n\n    setPlanets(result.data.planets.map((e: any) => {\n      const { id, ruler, status, x, y, z } = e\n      return { id, ruler, status, x, y, z }\n    }));\n\n    console.log(\"Subgraph data planets: \", result);\n  }, [client, tokensQuery]);\n\n  useEffect(() => {\n    fetch();\n  }, [fetch]);\n\n  return planets;\n};\n\nexport default usePlanets;\n","import { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ExternalProvider } from '@ethersproject/providers'\nimport { BigNumber, Contract, providers, utils } from 'ethers'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\n\nimport ERC20ABI from '../constants/contracts/IERC20.sol/IERC20.json'\nimport useConfirmationModal from './useConfirmationModal'\n\nconst useApproval = (tokenAddress: string, spenderAddress?: string) => {\n  const { open } = useConfirmationModal();\n  const { account, ethereum } = useWallet<ExternalProvider>();\n\n  const contract = useMemo(() => {\n    if (!ethereum) return;\n    const ERC20Interface = new utils.Interface(ERC20ABI.abi);\n    return new Contract(tokenAddress, ERC20Interface, new providers.Web3Provider(ethereum).getSigner());\n  }, [ethereum, tokenAddress]);\n\n  const [allowance, setAllowance] = useState<BigNumber>();\n  const [isApproving, setIsApproving] = useState(false);\n  const [isApproved, setIsApproved] = useState(false);\n\n  const handleApprove = useCallback(() => {\n    if (!ethereum || !account || !spenderAddress || !contract) return;\n    open(async () => {\n      try {\n        setIsApproving(true);\n        const result = await contract.approve(spenderAddress, BigNumber.from(2).pow(256).sub(1));\n        await result.wait();\n        setIsApproved(true);\n        setIsApproving(false);\n      } catch (e) {\n        console.log(e);\n        setIsApproving(false);\n      }\n    });\n  }, [account, contract, ethereum, open, setIsApproved, setIsApproving, spenderAddress]);\n\n  const fetchAllowance = useCallback(async () => {\n    if (!contract || !spenderAddress || !account) return;\n    setAllowance(await contract.allowance(account, spenderAddress));\n  }, [contract, account, spenderAddress]);\n\n  useEffect(() => {\n    fetchAllowance();\n  }, [fetchAllowance]);\n\n  useEffect(() => {\n    if (allowance && allowance.gt(0)) {\n      setIsApproved(true);\n    }\n  }, [allowance, setIsApproved]);\n\n  return {\n    allowance,\n    isApproved,\n    isApproving,\n    onApprove: handleApprove,\n  };\n};\n\nexport default useApproval;\n","import { Button, Input, Stack, Text, useColorModeValue } from \"@chakra-ui/react\";\nimport useChainPicker from \"hooks/useChainPicker\";\nimport React, { useState } from \"react\";\n\nimport deployedAddresses from \"../../constants\";\nimport { Commander } from \"../../contexts/Sanctis/types\";\nimport useApproval from \"../../hooks/useApproval\";\nimport useSanctis from \"../../hooks/useSanctis\";\n\nconst ColonizeCard: React.FC<{ colonizer: Commander }> = ({ colonizer }) => {\n  const { chainId } = useChainPicker();\n  const { colonizationCost, colonizePlanet } = useSanctis();\n  const { isApproved, isApproving, onApprove } = useApproval(\n    deployedAddresses[chainId].credits,\n    deployedAddresses[chainId].planets\n  );\n  const [x, setX] = useState<number>();\n  const [y, setY] = useState<number>();\n  const [z, setZ] = useState<number>();\n\n  return (\n    <Stack textAlign={\"center\"} align={\"center\"} m={5} spacing={{ base: 8, md: 10 }}>\n      <Stack spacing={6} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\n        <Text fontWeight=\"bold\" fontSize=\"xl\">\n          Colonize a planet\n        </Text>\n        <Input type=\"number\" placeholder=\"X coordinate...\" onChange={(e) => setX(Number(e.target.value))} />\n        <Input type=\"number\" placeholder=\"Y coordinate...\" onChange={(e) => setY(Number(e.target.value))} />\n        <Input type=\"number\" placeholder=\"Z coordinate...\" onChange={(e) => setZ(Number(e.target.value))} />\n        {isApproved ? (\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            disabled={x === undefined || y === undefined || z === undefined}\n            onClick={() => colonizePlanet(colonizer, x || 0, y || 0, z || 0)}\n          >\n            Colonize for {colonizationCost ? colonizationCost.div(10 ** 12).toNumber() / 10 ** 6 : \"??\"} $CREDS\n          </Button>\n        ) : (\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            isLoading={isApproving}\n            onClick={() => onApprove()}\n          >\n            Approve\n          </Button>\n        )}\n      </Stack>\n    </Stack>\n  );\n};\n\nexport default ColonizeCard;\n","import { Button, Link, Spinner, Stack, Text, useColorModeValue } from \"@chakra-ui/react\";\nimport usePlanet from \"hooks/usePlanet\";\nimport React from \"react\";\n\nconst PlanetCard: React.FC<{ planetId: string }> = ({ planetId }) => {\n  const planet = usePlanet(planetId);\n  return (\n    <Stack spacing={6} background={useColorModeValue(\"white\", \"gray.800\")} p=\"5\" rounded=\"xl\">\n      {planet ? (\n        <>\n          <Text fontWeight=\"bold\" fontSize=\"xl\">{`Coordinate: (X=${planet.x}; Y=${planet.y}; Z=${planet.z})`}</Text>\n          <Text fontSize=\"md\">Humidity: {planet.humidity}</Text>\n          <Button\n            rounded={\"full\"}\n            px={6}\n            colorScheme={\"blue\"}\n            bg={\"blue.400\"}\n            _hover={{ bg: \"blue.500\" }}\n            as={Link}\n            href={`#/planet/${planet.id}`}\n          >\n            Details\n          </Button>\n        </>\n      ) : (\n        <Spinner />\n      )}\n    </Stack>\n  );\n};\n\nexport default PlanetCard;\n","import { Button, Container, Flex, Link, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport useCommander from \"hooks/useCommander\";\nimport React from \"react\";\nimport { BiArrowBack } from \"react-icons/bi\";\nimport { useParams } from \"react-router-dom\";\nimport usePlanets from \"../../hooks/usePlanets\";\n\nimport ColonizeCard from \"./ColonizeCard\";\nimport PlanetCard from \"./PlanetCard\";\n\nconst Commander: React.FC = () => {\n  const { id } = useParams();\n  const commander = useCommander(id);\n  const planets = usePlanets({ ruler: commander?.id });\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Button rightIcon={<BiArrowBack />} as={Link} href={\"#/commanders\"}>\n        Back\n      </Button>\n      <Flex\n        direction={\"column\"}\n        textAlign={\"center\"}\n        align={\"center\"}\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\n        mt={2}\n        p={3}\n        rounded=\"lg\"\n        shadow=\"2xl\"\n        boxShadow=\"inner\"\n      >\n        <Text fontSize=\"lg\" fontWeight=\"bold\">\n          {commander?.name}'s planets\n        </Text>\n        <Wrap spacing={5} mt=\"2\">\n          {planets &&\n            planets.map((e) => (\n              <WrapItem key={e.id} shadow=\"xl\">\n                <PlanetCard planetId={e.id} />\n              </WrapItem>\n            ))}\n        </Wrap>\n      </Flex>\n      {commander && <ColonizeCard colonizer={commander} />}\n    </Container>\n  );\n};\n\nexport default Commander;\n","import { Commander } from \"contexts/Sanctis/types\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport useSanctis from \"./useSanctis\";\n\nexport default function useCommander(id?: string) {\n  const { commanders, fetchCommander } = useSanctis();\n  const [commander, setCommander] = useState<Commander | null>();\n\n  const fetch = useCallback(async () => {\n    if (!id) {\n      return;\n    } else if (!commanders[id]) {\n      setCommander(await fetchCommander(id));\n    } else {\n      setCommander(commanders[id]);\n    }\n  }, [commanders, id, fetchCommander]);\n\n  useEffect(() => {\n    fetch();\n  }, [fetch]);\n\n  return commander;\n}\n","import React from \"react\";\nimport { Container, Heading, Link, List, ListItem, Stack, useColorModeValue } from \"@chakra-ui/react\";\n\nconst Documentation: React.FC = () => {\n  return (\n    <Container maxW={\"5xl\"}>\n      <Stack\n        background={useColorModeValue(\"white\", \"gray.800\")}\n        textAlign={\"center\"}\n        align={\"center\"}\n        spacing={{ base: 8, md: 10 }}\n        p=\"3\"\n        rounded=\"xl\"\n      >\n        <Heading>Documentation and resources</Heading>\n        <List>\n          <ListItem>\n            <Link href=\"https://docs.sanctis.xyz/\">Official documentation</Link>\n          </ListItem>\n          <ListItem>\n            <Link href=\"https://discord.gg/RzW8Eptb3g\">Discord</Link>\n          </ListItem>\n          <ListItem>\n            <Link href=\"https://github.com/Sanctis-Game\">Github</Link>\n          </ListItem>\n        </List>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Documentation;\n","import { Button, Container, Flex, Heading, Stack, Text, useColorModeValue, Wrap, WrapItem } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport useSanctis from \"../hooks/useSanctis\";\n\nimport ColonizeCard from \"./Commander/ColonizeCard\";\nimport PlanetCard from \"./Commander/PlanetCard\";\n\nconst Planets: React.FC = () => {\n  const { currentCommander } = useSanctis();\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Flex\n        direction={\"column\"}\n        textAlign={\"center\"}\n        align={\"center\"}\n        bg={useColorModeValue(\"gray.300\", \"gray.700\")}\n        mt={2}\n        p={3}\n        rounded=\"lg\"\n        shadow=\"2xl\"\n        boxShadow=\"inner\"\n      >\n        {currentCommander ? (\n          <>\n            <Text fontSize=\"lg\" fontWeight=\"bold\">\n              {currentCommander?.name}'s planets\n            </Text>\n            <Wrap spacing={5} mt=\"2\">\n              {currentCommander?.planets?.map((e) => (\n                <WrapItem key={e} shadow=\"xl\">\n                  <PlanetCard planetId={e} />\n                </WrapItem>\n              ))}\n            </Wrap>\n          </>\n        ) : (\n          <Stack spacing={6} p={3}>\n            <Heading>You have not chosen a commander</Heading>\n            <Button>Choose a summoner</Button>\n          </Stack>\n        )}\n      </Flex>\n      {currentCommander && <ColonizeCard colonizer={currentCommander} />}\n    </Container>\n  );\n};\n\nexport default Planets;\n","import { Container, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst Fleets: React.FC = () => {\n  return (\n    <Container maxW={\"5xl\"}>\n      <Text fontSize={\"3xl\"}>This section is under construction</Text>\n    </Container>\n  );\n};\n\nexport default Fleets;\n","import { Container, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport usePlanets from \"../hooks/usePlanets\";\n\nconst Explore: React.FC = () => {\n  const planets = usePlanets();\n  console.log(planets);\n\n  return (\n    <Container maxW={\"5xl\"}>\n      <Text fontSize={\"3xl\"}>This section is under construction</Text>\n    </Container>\n  );\n};\n\nexport default Explore;\n","import React from \"react\";\nimport { Route, HashRouter as Router, Routes } from \"react-router-dom\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { UseWalletProvider } from \"@binance-chain/bsc-use-wallet\";\n\nimport Sidebar from \"./components/Sidebar\";\nimport Home from \"./views/Home\";\nimport Planet from \"./views/Planet\";\nimport useChainPicker from \"./hooks/useChainPicker\";\nimport ChainPickerProvider from \"./contexts/ChainPicker\";\nimport ConfirmationModalProvider from \"./contexts/ConfirmationModal\";\nimport SanctisProvider from \"./contexts/Sanctis\";\nimport Commanders from \"views/Commanders\";\nimport Commander from \"views/Commander\";\nimport Documentation from \"./views/Documentation\";\nimport Planets from \"./views/Planets\";\nimport Fleets from \"./views/Fleets\";\nimport Explore from \"./views/Explore\";\n\nconst WalletProvider: React.FC = ({ children }) => {\n  const { chainId } = useChainPicker();\n\n  return <UseWalletProvider chainId={chainId}>{children}</UseWalletProvider>;\n};\n\nconst Providers: React.FC = ({ children }) => {\n  return (\n    <ChakraProvider>\n      <ChainPickerProvider>\n        <WalletProvider>\n          <ConfirmationModalProvider>\n            <SanctisProvider>{children}</SanctisProvider>\n          </ConfirmationModalProvider>\n        </WalletProvider>\n      </ChainPickerProvider>\n    </ChakraProvider>\n  );\n};\n\nfunction App() {\n  return (\n    <Providers>\n      <Sidebar>\n        <Router>\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/commanders\" element={<Commanders />} />\n            <Route path=\"/commander/:id\" element={<Commander />} />\n            <Route path=\"/planet/:id\" element={<Planet />} />\n            <Route path=\"/planets\" element={<Planets />} />\n            <Route path=\"/fleets\" element={<Fleets />} />\n            <Route path=\"/explore\" element={<Explore />} />\n            <Route path=\"/documentation\" element={<Documentation />} />\n          </Routes>\n        </Router>\n      </Sidebar>\n    </Providers>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}